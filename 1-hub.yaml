esphome:
  name: esp32-hub
  platform: ESP32
  board: esp32-c3-devkitm-1

external_components:
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: 'nvds-new-espnow'
    components: [espnow]

logger:

wifi:
  ssid: !secret WiFi_ssid
  password: !secret WiFi_password
  power_save_mode: none

web_server:
  port: 80

globals:
  - id: peer_addresses
    type: uint64_t[8]
    initial_value: '{0, 0, 0, 0, 0, 0, 0, 0}'
    restore_value: yes
  - id: peer_names
    type: uint8_t[8]
    initial_value: '{0, 0, 0, 0, 0, 0, 0, 0}'
    restore_value: yes

button:
  - platform: template
    name: 'Ping Devices'
    entity_category: config
    on_press:
      then:
        - espnow.send:
            data: 'ping'

espnow:
  auto_add_peer: true
  wifi_channel: !secret espnow_channel
  peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          if (packet.is_valid()) {
            // Convert the received data to a string
            std::string received_string((char*)packet.get_payload(), packet.size);
            
            ESP_LOGI("main", "Received data: %s", received_string.c_str());
            
            // Peer
            uint64_t peer = packet.peer;
            ESP_LOGI("main", "Peer: 0x%12llx", peer);

            char buffer[241];
            strncpy(buffer, received_string.c_str(), sizeof(buffer));

            char* topic = strtok(buffer, ";");
            char* value = strtok(nullptr, ";");
            char* end = strtok(nullptr, ";");

            if (topic != nullptr && value != nullptr) {
              ESP_LOGI("main", "Topic: %s, Value: %s", topic, value);
              if (strcmp(topic, "pong") == 0) {
                // Check if peer is already in the list
                bool peer_exists = false;
                for (int i = 0; i < 8; i++) {
                    if (id(peer_addresses)[i] == peer) {
                        peer_exists = true;
                        break;
                    }
                }

                bool peer_added = false;
                // If peer is not in the list, add it to the first available 0 position
                if (!peer_exists) {
                    for (int i = 0; i < 8; i++) {
                        if (id(peer_addresses)[i] == 0) { // Check for an empty spot (0 indicates empty)
                            id(peer_addresses)[i] = peer;
                            id(peer_names)[i] = atoi(value);
                            peer_added = true;
                            break;
                        }
                    }
                    if (!peer_added) {
                        ESP_LOGW("main", "No more space for peers");
                    }
                }

                ESP_LOGI("main", "Response: Peer: 0x%12llx Name: %s", peer, value);
              }
              else {
                ESP_LOGW("main", "Unknown topic");
              }
            }
            else {
              ESP_LOGW("main", "Received data is not recognized");
            }
          }
          else {
            ESP_LOGW("main", "Received data is not valid");
          }

          // // Check if the peer exists in the list and print its name
          // if (id(peer_names).find(peer) != id(peer_names).end()) {
          //   ESP_LOGI("main", "Message received from peer 0x%12llx with name: %s", peer, id(peer_names)[peer].c_str());
          // } else {
          //   ESP_LOGW("main", "Message received from unknown peer: 0x%12llx", peer);
          // }
          for (int i = 0; i < 8; i++) {
            if (id(peer_addresses)[i] != 0) {
              ESP_LOGI("main", "Index %d Peer: 0x%12llx Name: %d",i, id(peer_addresses)[i], id(peer_names)[i]);
            }
          }
