esphome:
  name: esp32-modbus
  platform: ESP32
  board: esp32-c3-devkitm-1 # For ESP32-C3 based boards

logger:

wifi:
  ssid: !secret WiFi_ssid # WiFi SSID from secrets.yaml
  password: !secret WiFi_password # WiFi password from secrets.yaml

external_components:
  - source:
      type: git
      url: https://gitlab.com/ripnetuk-public/espnow/ripnetuk-esphome-easynow.git
      ref: main
    refresh: never
    
api:
  password: !secret API_password # API password for Home Assistant

ota:
  - platform: esphome
    password: !secret OTA_password # OTA password from secrets.yaml

uart:
  - id: intmodbus
    tx_pin: 21
    rx_pin: 20
    baud_rate: 4800
    stop_bits: 1
    data_bits: 8
    parity: NONE
    debug:
      direction: BOTH

modbus:
  flow_control_pin: GPIO1
  id: modbus1

modbus_controller:
  - id: modbus_device
    address: 0x1   ## address of the Modbus slave device on the bus¨
    modbus_id: modbus1
    setup_priority: -10
    update_interval: 10s

sensor:
  
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Humidity'
    register_type: holding
    address: 0x00  # Register for humidity
    unit_of_measurement: '%RH'
    value_type: U_WORD
    id: 'humidity'

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Temperature"
  #   register_type: holding
  #   address: 0x01  # Register for temperature
  #   unit_of_measurement: "°C"
  #   value_type: U_WORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1  # Apply scaling as per the manual
  #   id: 'temperature'

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Conductivity"
  #   register_type: holding
  #   address: 0x02  # Register for conductivity
  #   unit_of_measurement: "µS/cm"
  #   value_type: U_WORD
  #   accuracy_decimals: 0
  #   filters:
  #     - multiply: 1.0  # No scaling needed
  #   id: 'conductivity'

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "pH"
  #   register_type: holding
  #   address: 0x03  # Register for pH
  #   unit_of_measurement: "pH"
  #   value_type: U_WORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1  # Scaling factor for pH
  #   id: 'ph'

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Nitrogen (N)"
  #   register_type: holding
  #   address: 0x04  # Register for Nitrogen
  #   unit_of_measurement: "mg/kg"
  #   value_type: U_WORD
  #   accuracy_decimals: 0
  #   filters:
  #     - multiply: 1.0  # No scaling needed
  #   id: 'nitrogen'

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Phosphorus (P)"
  #   register_type: holding
  #   address: 0x05  # Register for Phosphorus
  #   unit_of_measurement: "mg/kg"
  #   value_type: U_WORD
  #   accuracy_decimals: 0
  #   filters:
  #     - multiply: 1.0  # No scaling needed
  #   id: 'phosphorus'

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Potassium (K)"
  #   register_type: holding
  #   address: 0x06  # Register for Potassium
  #   unit_of_measurement: "mg/kg"
  #   value_type: U_WORD
  #   accuracy_decimals: 0
  #   filters:
  #     - multiply: 1.0  # No scaling needed
  #   id: 'potassium'

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Conductivity Factor"
  #   register_type: holding
  #   address: 0x22  # Register for conductivity factor
  #   unit_of_measurement: "x"
  #   value_type: U_WORD

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Salinity Factor"
  #   register_type: holding
  #   address: 0x23  # Register for salinity factor
  #   unit_of_measurement: "x"
  #   value_type: U_WORD

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "TDS Factor"
  #   register_type: holding
  #   address: 0x24  # Register for TDS factor
  #   unit_of_measurement: "x"
  #   value_type: U_WORD

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Temperature Offset"
  #   register_type: holding
  #   address: 0x50  # Register for temperature offset
  #   unit_of_measurement: "°C"
  #   value_type: U_WORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1  # Scaling factor for offset

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Humidity Offset"
  #   register_type: holding
  #   address: 0x51  # Register for humidity offset
  #   unit_of_measurement: "%RH"
  #   value_type: U_WORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1  # Scaling factor for offset

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Conductivity Offset"
  #   register_type: holding
  #   address: 0x52  # Register for conductivity offset
  #   unit_of_measurement: "µS/cm"
  #   value_type: U_WORD
  #   accuracy_decimals: 0
  #   filters:
  #     - multiply: 1.0  # No scaling needed

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "pH Offset"
  #   register_type: holding
  #   address: 0x53  # Register for pH offset
  #   unit_of_measurement: "pH"
  #   value_type: U_WORD
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1  # Scaling factor for pH offset

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Nitrogen Factor High"
  #   register_type: holding
  #   address: 0x4E8  # Nitrogen factor high byte
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Nitrogen Factor Low"
  #   register_type: holding
  #   address: 0x4E9  # Nitrogen factor low byte
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Nitrogen Offset"
  #   register_type: holding
  #   address: 0x4EA  # Nitrogen offset
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Phosphorus Factor High"
  #   register_type: holding
  #   address: 0x4F2  # Phosphorus factor high byte
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Phosphorus Factor Low"
  #   register_type: holding
  #   address: 0x4F3  # Phosphorus factor low byte
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Phosphorus Offset"
  #   register_type: holding
  #   address: 0x4F4  # Phosphorus offset
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Potassium Factor High"
  #   register_type: holding
  #   address: 0x4FC  # Potassium factor high byte
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Potassium Factor Low"
  #   register_type: holding
  #   address: 0x4FD  # Potassium factor low byte
  #   value_type: U_WORD
  #   accuracy_decimals: 0

  # - platform: modbus_controller
  #   modbus_controller_id: modbus_device
  #   name: "Potassium Offset"
  #   register_type: holding
  #   address: 0x4FE  # Potassium offset
  #   value_type: U_WORD
  #   accuracy_decimals: 0

# number:
#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: conductivity_factor_set_value
#     name: "Conductivity Factor"
#     address: 0x22
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: conductivity_factor_set_value_second
#     name: "Conductivity Factor"
#     address: 0x22
#     value_type: U_WORD
#     lambda: "return  x * 1.0; " #Multipy value by 1.0 in Home assistant interface
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;
  
#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: salinity_factor_set_value
#     name: "Salinity Factor"
#     address: 0x23
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: salinity_factor_set_value_second
#     name: "Salinity Factor"
#     address: 0x23
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: tds_factor_set_value
#     name: "TDS Factor"
#     address: 0x24
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: tds_factor_set_value_second
#     name: "TDS Factor"
#     address: 0x24
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: temperature_offset_set_value
#     name: "Temperature Offset"
#     address: 0x50
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: temperature_offset_set_value_second
#     name: "Temperature Offset"
#     address: 0x50
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: humidity_offset_set_value
#     name: "Humidity Offset"
#     address: 0x51
#     value_type: U_WORD
#     multiply: 1.0 #Multipy value by 1.0 in Home assistant interface

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: humidity_offset_set_value_second
#     name: "Humidity Offset"
#     address: 0x51
#     value_type: U_WORD
#     lambda: "return  x * 1.0; " #Multipy value by 1.0 in Home assistant interface
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ; 
  
#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: conductivity_offset_set_value
#     name: "Conductivity Offset"
#     address: 0x52
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: conductivity_offset_set_value_second
#     name: "Conductivity Offset"
#     address: 0x52
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: ph_offset_set_value
#     name: "pH Offset"
#     address: 0x53
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: ph_offset_set_value_second
#     name: "pH Offset"
#     address: 0x53
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: nitrogen_factor_high_set_value
#     name: "Nitrogen Factor High"
#     address: 0x4E8
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: nitrogen_factor_high_set_value_second
#     name: "Nitrogen Factor High"
#     address: 0x4E8
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: nitrogen_factor_low_set_value
#     name: "Nitrogen Factor Low"
#     address: 0x4E9
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: nitrogen_factor_low_set_value_second
#     name: "Nitrogen Factor Low"
#     address: 0x4E9
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: nitrogen_offset_set_value
#     name: "Nitrogen Offset"
#     address: 0x4EA
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: nitrogen_offset_set_value_second
#     name: "Nitrogen Offset"
#     address: 0x4EA
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: phosphorus_factor_high_set_value
#     name: "Phosphorus Factor High"
#     address: 0x4F2
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: phosphorus_factor_high_set_value_second
#     name: "Phosphorus Factor High"
#     address: 0x4F2
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: phosphorus_factor_low_set_value
#     name: "Phosphorus Factor Low"
#     address: 0x4F3
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: phosphorus_factor_low_set_value_second
#     name: "Phosphorus Factor Low"
#     address: 0x4F3
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: phosphorus_offset_set_value
#     name: "Phosphorus Offset"
#     address: 0x4F4
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: phosphorus_offset_set_value_second
#     name: "Phosphorus Offset"
#     address: 0x4F4
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: potassium_factor_high_set_value
#     name: "Potassium Factor High"
#     address: 0x4FC
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: potassium_factor_high_set_value_second
#     name: "Potassium Factor High"
#     address: 0x4FC
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: potassium_factor_low_set_value
#     name: "Potassium Factor Low"
#     address: 0x4FD
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: potassium_factor_low_set_value_second
#     name: "Potassium Factor Low"
#     address: 0x4FD
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: potassium_offset_set_value
#     name: "Potassium Offset"
#     address: 0x4FE
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: potassium_offset_set_value_second
#     name: "Potassium Offset"
#     address: 0x4FE
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: nitrogen_set_value
#     name: "Nitrogen (N)"
#     address: 0x04
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: nitrogen_set_value_second
#     name: "Nitrogen (N)"
#     address: 0x04
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: phosphorus_set_value
#     name: "Phosphorus (P)"
#     address: 0x05
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: phosphorus_set_value_second
#     name: "Phosphorus (P)"
#     address: 0x05
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: potassium_set_value
#     name: "Potassium (K)"
#     address: 0x06
#     value_type: U_WORD

#   - platform: modbus_controller
#     modbus_controller_id: modbus_device
#     id: potassium_set_value_second
#     name: "Potassium (K)"
#     address: 0x06
#     value_type: U_WORD
#     lambda: "return  x * 1.0; "
#     write_lambda: |-
#       ESP_LOGD("main","Modbus Number incoming value = %f",x);
#       uint16_t new_value = x;
#       payload.push_back(new_value);
#       return x * 1.0 ;

# proxy_transmitter:
#   espnow_channel: 11
#   receiver_mac_address: !secret receiver_mac_address
#   deep_sleep_length: 30s
#   sensors:
#     - sensor: 'humidity'
#       proxy_id: 'soil_hum_proxy'
      