esphome:
  name: 4-slave-air
  platformio_options:
    platform: https://github.com/lucaskatayama/platform-espressif32.git#feat/seeed_xiao_esp32c6.json
  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp
  on_boot:
    priority: -10000
    then:
      - lambda: |-
          ESP_LOGI("main", "Hub address: 0x%12llx", id(hub_address));
      - delay: 500ms
      - lambda: |-
          id(espnow_component)->add_peer(id(hub_address));
      - script.execute:
          id: changeTemperatureOversampling
          oversampling_index_local: !lambda 'return id(temperature_oversampling_index);'
      - script.execute:
          id: changePressureOversampling
          oversampling_index_local: !lambda 'return id(pressure_oversampling_index);'
      - script.execute:
          id: changeIIRFilter
          iir_filter_index_local: !lambda 'return id(iir_filter_index);'
      - component.update: bmp280_sensor
      - delay: 500ms
      - if:
          condition:
            lambda: 'return id(deep_sleep_button).state;'
          then:
            - deep_sleep.prevent: deep_sleep_1
          else:
            - script.execute: espnow_communication

esp32:
  board: seeed_xiao_esp32c6
  variant: ESP32C6
  framework:
    type: esp-idf
    version: 5.3.0
    platform_version: 6.9.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

logger:
  baud_rate: 115200
  level: DEBUG
  hardware_uart: USB_SERIAL_JTAG

deep_sleep:
  id: deep_sleep_1
  run_duration: 80s # Time for the ESP32 to run before entering sleep mode
  sleep_duration: 60s # Change this to your desired sleep time
  wakeup_pin:
    number: GPIO1
    allow_other_uses: true
  wakeup_pin_mode: IGNORE

globals:
  - id: long_press_timer
    type: unsigned long
    restore_value: no
    initial_value: '0'

  - id: long_press_action
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: pinged
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: paring
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: hub_address
    type: uint64_t
    initial_value: '0xFFFFFFFFFFFF'
    restore_value: yes

  - id: get_calibration
    type: bool
    initial_value: 'false'

  - id: request_cal
    type: bool
    initial_value: 'false'

  - id: temperature_oversampling_index
    type: int
    initial_value: '4' # Default to BMP280_OVERSAMPLING_16X
    restore_value: yes

  - id: pressure_oversampling_index
    type: int
    initial_value: '4' # Default to BMP280_OVERSAMPLING_16X
    restore_value: yes

  - id: iir_filter_index
    type: int
    initial_value: '0' # Default to BMP280_IIR_FILTER_OFF
    restore_value: yes

  - id: flash
    type: bool
    initial_value: 'false'

i2c:
  sda: GPIO22
  scl: GPIO23
  scan: true
  frequency: 200kHz

sensor:
  - platform: bmp280_i2c
    id: bmp280_sensor
    temperature:
      name: 'Temperature (BMP280)'
      id: bmp280_temp
    pressure:
      name: 'Pressure'
      id: bmp280_press
    address: 0x76
    update_interval: never
  - platform: htu21d
    id: si7021_sensor
    temperature:
      name: 'Temperature (Si7021)'
      id: si7021_temp
    humidity:
      name: 'Humidity'
      id: si7021_hum
    address: 0x40
    update_interval: never
  - platform: ccs811
    id: ccs811_sensor
    eco2:
      name: 'CCS811 eCO2 Value'
      id: ccs811_eco2
    tvoc:
      name: 'CCS811 Total Volatile Organic Compound'
      id: ccs811_tvoc
    temperature: bmp280_temp
    humidity: si7021_hum
    address: 0x5A
    update_interval: never

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO1
      allow_other_uses: true
    name: 'Button'
    id: 'deep_sleep_button'
    on_state:
      then:
        - if:
            condition:
              lambda: 'return !x;'
            then:
              - logger.log: 'Button pressed'
              - deep_sleep.enter: deep_sleep_1
  - platform: gpio
    pin:
      number: GPIO19
      mode: INPUT_PULLUP
      inverted: true
    name: 'Long Press Button'
    id: long_press_button
    on_press:
      then:
        - lambda: |-
            id(long_press_timer) = millis();
    on_release:
      then:
        - lambda: |-
            if (millis() - id(long_press_timer) > 3000) {
                ESP_LOGD("main", "Button was pressed for longer than 3 seconds.");
                id(long_press_action) = true;
                }
            else {ESP_LOGD("main", "Button was pressed for less than 3 seconds.");}

espnow:
  id: espnow_component
  auto_add_peer: true
  wifi_channel: !secret espnow_channel
  predefined_peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          std::string received_string((char*)packet.get_payload(), packet.size);

          if(packet.is_valid()){
            // Convert the received data to a string
            std::string received_string((char*)packet.get_payload(), packet.size);
            ESP_LOGI("main", "Received data: %s", received_string.c_str());

            if(received_string == "ping") {
                if(id(long_press_action)) {
                    id(hub_address) = packet.peer;
                    ESP_LOGI("main", "Setting hub address: 0x%12llx", id(hub_address));
                    id(long_press_action) = false;
                    id(paring) = true;
                }
                id(pinged) = true;
            }
            if(packet.peer == id(hub_address)) {
                ESP_LOGI("main", "Received from hub");
                 // Parse the received data
                char buffer[241];

                strncpy(buffer, received_string.c_str(), sizeof(buffer));

                char* topic = strtok(buffer, ";");
                char* value = strtok(nullptr, ";");
                char* end = strtok(nullptr, ";");

                if(topic != nullptr){
                    if(strcmp(topic, "getcalibration") == 0){
                            id(get_calibration) = true;
                            id(request_cal) = true;
                        }
                    else if(value != nullptr){
                        ESP_LOGI("main", "Topic: %s, Value: %s", topic, value);

                        int value_int = atoi(value);

                        if(strcmp(topic, "flash") == 0){
                          if(value_int == 1){id(flash) = true;}
                        }
                        else if(strcmp(topic, "temp_index") == 0){
                          
                          if (id(flash)) {
                            ESP_LOGI("main", "Writing temp_index to flash");
                            id(temperature_oversampling_index) = value_int;
                          }
                          id(changeTemperatureOversampling)->execute(value_int);
                        }
                        else if(strcmp(topic, "press_index") == 0){
                          if (id(flash)) {
                            ESP_LOGI("main", "Writing press_index to flash");
                            id(pressure_oversampling_index) = value_int;
                          }
                          id(changePressureOversampling)->execute(value_int);
                        }
                        else if(strcmp(topic, "iir_index") == 0){
                          if (id(flash)) {
                            ESP_LOGI("main", "Writing iir_index to flash");
                            id(iir_filter_index) = value_int;
                          }
                          id(changeIIRFilter)->execute(value_int);
                        }
                        else{ESP_LOGW("main", "Value is none");}
                    }
                    else{ESP_LOGW("main", "Value is none");}
                }
                else{ESP_LOGW("main", "Topic is none");}
            }
            else {ESP_LOGW("main", "Received from unknown peer. Not accepting data from unknown peers.");}
          }
          else{ESP_LOGW("main", "Invalid packet");}
      - script.execute: handleOnRecieve

external_components:
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: d23346165e1baefd337ed805d3a211e5bead53af
    refresh: 1min
    components: [espnow]

script:
  - id: espnow_communication
    then:
      - script.execute: beReadyToReceiveMessage
      - logger.log: 'Updating sensor data'
      - component.update: bmp280_sensor
      - component.update: si7021_sensor
      - component.update: ccs811_sensor
      - delay: 3s
      - logger.log: 'Sensor data updated'
      - repeat:
          count: 3
          then:
            - logger.log: 'Sending data to hub'
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("bmp_temp", id(bmp280_temp).state*100000);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("bmp_press", id(bmp280_press).state*100000);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("si_temp", id(si7021_temp).state*100000);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("si_hum", id(si7021_hum).state*100000);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("ccs_eco2", id(ccs811_eco2).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("ccs_tvoc", id(ccs811_tvoc).state);
  - id: sendCalibrationData
    then:
      - repeat:
          count: 3
          then:
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("temp_index", id(temperature_oversampling_index));
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("press_index", id(pressure_oversampling_index));
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("iir_index", id(iir_filter_index));
            - delay: 500ms
      - lambda: |-
          ESP_LOGI("main", "Calibration data sent");
          id(get_calibration) = false;
  - id: beReadyToReceiveMessage
    then:
      - espnow.send:
          mac_address: !lambda 'return id(hub_address);'
          payload: 'hub;beReadyToReceiveMessage'
      - delay: 500ms
  - id: handleOnRecieve
    then:
      - if:
          condition:
            lambda: 'return id(pinged);'
          then:
            - logger.log: 'Pinging back'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data("pong", "44", id(paring));
            - lambda: |-
                id(paring) = false;
                id(pinged) = false;
      - if:
          condition:
            lambda: 'return id(get_calibration);'
          then:
            - logger.log: 'Sending calibration data'
            - script.execute: sendCalibrationData
            - lambda: |-
                id(get_calibration) = false;
  - id: changeTemperatureOversampling
    parameters:
      oversampling_index_local: int
    then:
      - lambda: |-
          std::vector<esphome::bmp280_base::BMP280Oversampling> oversampling_options = {
            esphome::bmp280_base::BMP280_OVERSAMPLING_1X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_2X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_4X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_8X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_16X
          };

          if (oversampling_index_local >= 0 && oversampling_index_local < oversampling_options.size()) {
            id(bmp280_sensor).set_temperature_oversampling(oversampling_options[oversampling_index_local]);
            ESP_LOGI("configuration", "Temperature oversampling set to %dX", 1 << oversampling_index_local);
          } else {
            ESP_LOGW("configuration", "Invalid oversampling index: %d", oversampling_index_local);
          }
  - id: changePressureOversampling
    parameters:
      oversampling_index_local: int
    then:
      - lambda: |-
          std::vector<esphome::bmp280_base::BMP280Oversampling> oversampling_options = {
            esphome::bmp280_base::BMP280_OVERSAMPLING_1X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_2X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_4X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_8X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_16X
          };

          if (oversampling_index_local >= 0 && oversampling_index_local < oversampling_options.size()) {
            id(bmp280_sensor).set_pressure_oversampling(oversampling_options[oversampling_index_local]);
            ESP_LOGI("configuration", "Pressure oversampling set to %dX", 1 << oversampling_index_local);
          } else {
            ESP_LOGW("configuration", "Invalid oversampling index: %d", oversampling_index_local);
          }
  - id: changeIIRFilter
    parameters:
      iir_filter_index_local: int
    then:
      - lambda: |-
          std::vector<esphome::bmp280_base::BMP280IIRFilter> iir_filter_options = {
            esphome::bmp280_base::BMP280_IIR_FILTER_OFF,
            esphome::bmp280_base::BMP280_IIR_FILTER_2X,
            esphome::bmp280_base::BMP280_IIR_FILTER_4X,
            esphome::bmp280_base::BMP280_IIR_FILTER_8X,
            esphome::bmp280_base::BMP280_IIR_FILTER_16X
          };

          if (iir_filter_index_local >= 0 && iir_filter_index_local < iir_filter_options.size()) {
            id(bmp280_sensor).set_iir_filter(iir_filter_options[iir_filter_index_local]);
            if (iir_filter_index_local == 0) {
              ESP_LOGI("configuration", "IIR filter set to OFF");
            } else {
              ESP_LOGI("configuration", "IIR filter set to %dX", 1 << (iir_filter_index_local));
            }
          } else {
            ESP_LOGW("configuration", "Invalid IIR filter index: %d", iir_filter_index_local);
          }
