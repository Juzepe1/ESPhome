esphome:
  name: 4-slave-air
  platformio_options:
    platform: https://github.com/lucaskatayama/platform-espressif32.git#feat/seeed_xiao_esp32c6.json
    build_flags: -DI2C_NUM_1=I2C_NUM_0
  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp
  friendly_name: Air Quality Sensor

  on_boot:
    priority: -10000
    then:
      - lambda: |-
          ESP_LOGI("main", "Starting ESP-NOW");
          ESP_LOGI("main", "Hub address: 0x%12llx", id(hub_address));
          ESP_LOGI("main", "ESP Sensor Mode: %d", id(esp_sensor_mode));
          ESP_LOGI("main", "Wake up reason: %d", esp_sleep_get_wakeup_cause());
          ESP_LOGI("main", "Deep sleep duration: %f seconds", id(deep_sleep_duration_number).state);
      - delay: 500ms
      - lambda: |-
          id(espnow_component)->add_peer(id(hub_address));

          // Update sensor data
          id(changeSensorSettings).execute();
      - deep_sleep.prevent: deep_sleep_1
      - if:
          condition:
            lambda: 'return esp_sleep_get_wakeup_cause()==7;'
          then:
            - lambda: |-
                ESP_LOGI("main", "Woke up from deep sleep");
                id(handleShowMode).execute();
      - script.execute: handleModeChange

esp32:
  board: seeed_xiao_esp32c6
  variant: ESP32C6
  framework:
    type: esp-idf
    version: 5.3.0
    platform_version: 6.9.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

packages:
  essentialCode: !include
    file: packages/EssentialCodeSlave.yaml
    vars:
      ssid_name: 'AirQualitySensor'
      battery_group_id: 'sg_data'
      battery_sorting_weight: 8

web_server:
  local: true
  version: 3
  log: false
  id: web_server_component
  sorting_groups:
    - id: sg_data
      name: 'Air Quality Sensor Data'
      sorting_weight: 10

    - id: sg_settings
      name: 'Air Quality Sensor Settings'
      sorting_weight: 11

    - id: sg_device_settings
      name: 'Device Settings'
      sorting_weight: 12

logger:
  baud_rate: 115200
  level: DEBUG
  hardware_uart: USB_SERIAL_JTAG

i2c:
  sda: GPIO22
  scl: GPIO23
  scan: true
  frequency: 150kHz

sensor:
  - platform: bmp280_i2c
    id: bmp280_sensor
    temperature:
      name: 'Temperature (BMP280)'
      icon: 'mdi:thermometer'
      id: bmp280_temp
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 2
    pressure:
      name: 'Pressure'
      id: bmp280_press
      icon: 'mdi:gauge'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 3
    address: 0x76
    update_interval: 1s
  - platform: htu21d
    id: si7021_sensor
    temperature:
      name: 'Temperature (Si7021)'
      id: si7021_temp
      icon: 'mdi:thermometer'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 4
    humidity:
      name: 'Humidity'
      id: si7021_hum
      icon: 'mdi:water-percent'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 5
    address: 0x40
    update_interval: 1s
  - platform: ccs811
    id: ccs811_sensor
    eco2:
      name: 'CCS811 eCO2 Value'
      id: ccs811_eco2
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 6
    tvoc:
      name: 'CCS811 Total Volatile Organic Compound'
      id: ccs811_tvoc
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 7
    temperature: bmp280_temp
    humidity: si7021_hum
    address: 0x5A
    update_interval: 10s

number:
  - platform: template
    name: 'Temperature Oversampling'
    id: temperature_oversampling_number
    icon: 'mdi:alpha-x'
    min_value: 0
    max_value: 4
    step: 1
    optimistic: true
    update_interval: never
    restore_value: true
    initial_value: 4
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 1
    set_action:
      then:
        - script.execute:
            id: changeTemperatureOversampling
            oversampling_index_local: !lambda 'return x;'

  - platform: template
    name: 'Pressure Oversampling'
    id: pressure_oversampling_number
    icon: 'mdi:alpha-x'
    min_value: 0
    max_value: 4
    step: 1
    optimistic: true
    update_interval: never
    restore_value: true
    initial_value: 4
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 2
    set_action:
      then:
        - script.execute:
            id: changePressureOversampling
            oversampling_index_local: !lambda 'return x;'

  - platform: template
    name: 'IIR Filter'
    id: iir_filter_number
    icon: 'mdi:filter'
    min_value: 0
    max_value: 4
    step: 1
    optimistic: true
    update_interval: never
    restore_value: true
    initial_value: 0
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 3
    set_action:
      then:
        - script.execute:
            id: changeIIRFilter
            iir_filter_index_local: !lambda 'return x;'

button:
  - platform: template
    name: 'Update sensor data'
    icon: 'mdi:update'
    on_press:
      - component.update: battery
      - script.execute: updateAirSensorData
    web_server:
      sorting_group_id: sg_data
      sorting_weight: 1

espnow:
  id: espnow_component
  auto_add_peer: true
  conformation_timeout: 100ms
  wifi_channel: !secret espnow_channel
  predefined_peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          std::string received_string((char*)packet.get_payload(), packet.size);

          if(packet.is_valid()){
            // Convert the received data to a string
            std::string received_string((char*)packet.get_payload(), packet.size);
            ESP_LOGI("main", "Received data: %s", received_string.c_str());

            if(received_string == "ping") {
                if(id(long_press_action)) {
                    id(hub_address) = packet.peer;
                    ESP_LOGI("main", "Setting hub address: 0x%12llx", id(hub_address));
                    id(long_press_action) = false;
                    id(paring) = true;
                }
                id(pinged) = true;
            }
            if(packet.peer == id(hub_address)) {
                ESP_LOGI("main", "Received from hub");
                 // Parse the received data
                char buffer[241];

                strncpy(buffer, received_string.c_str(), sizeof(buffer));

                char* topic = strtok(buffer, ";");
                char* value = strtok(nullptr, ";");
                char* end = strtok(nullptr, ";");

                if(topic != nullptr){
                    if(strcmp(topic, "getcalibration") == 0){
                            id(get_calibration) = true;
                            id(request_cal) = true;
                        }
                    else if(value != nullptr){
                        ESP_LOGI("main", "Topic: %s, Value: %s", topic, value);

                        int value_int = atoi(value);

                        if(strcmp(topic, "temp_index") == 0){
                          id(temperature_oversampling_number).make_call().set_value(value_int).perform();
                        }
                        else if(strcmp(topic, "press_index") == 0){
                          id(pressure_oversampling_number).make_call().set_value(value_int).perform();
                        }
                        else if(strcmp(topic, "iir_index") == 0){
                          id(iir_filter_number).make_call().set_value(value_int).perform();
                        }
                        else{ESP_LOGW("main", "Unknown topic: %s", topic);}
                    }
                    else{ESP_LOGW("main", "Value is none");}
                }
                else{ESP_LOGW("main", "Topic is none");}
            }
            else {ESP_LOGW("main", "Received from unknown peer. Not accepting data from unknown peers.");}
          }
          else{ESP_LOGW("main", "Invalid packet");}
      - script.execute: handleOnRecieve

script:
  - id: handleOnRecieve
    then:
      - if:
          condition:
            lambda: 'return id(pinged);'
          then:
            - logger.log: 'Pinging back'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data("pong", "44", id(paring));
            - lambda: |-
                id(paring) = false;
                id(pinged) = false;
      - if:
          condition:
            lambda: 'return id(get_calibration);'
          then:
            - logger.log: 'Sending calibration data'
            - script.execute: sendCalibrationData
            - lambda: |-
                id(get_calibration) = false;
  - id: espnow_communication
    then:
      - output.turn_on: built_in_led
      - script.execute: beReadyToReceiveMessage
      - logger.log: 'Updating sensor data'
      - script.execute: updateAirSensorData
      - component.update: battery
      - delay: 3s
      - logger.log: 'Sensor data updated'
      - repeat:
          count: 1
          then:
            - logger.log: 'Sending data to hub'
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("bmp_temp", id(bmp280_temp).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("bmp_press", id(bmp280_press).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("si_temp", id(si7021_temp).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("si_hum", id(si7021_hum).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("ccs_eco2", id(ccs811_eco2).state);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("ccs_tvoc", id(ccs811_tvoc).state);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("battery", id(battery).state);
      - output.turn_off: built_in_led
  - id: updateAirSensorData
    then:
      - component.update: bmp280_sensor
      - component.update: si7021_sensor
      - wait_until:
          condition:
            lambda: |-
              return (!isnan(id(ccs811_eco2).state) && !isnan(id(ccs811_tvoc).state));
          timeout: 40s
  - id: sendCalibrationData
    then:
      - repeat:
          count: 1
          then:
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("temp_index", id(temperature_oversampling_number).state);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("press_index", id(pressure_oversampling_number).state);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("iir_index", id(iir_filter_number).state);
            - delay: !lambda 'return id(esp_now_message_delay);'
      - lambda: |-
          ESP_LOGI("main", "Calibration data sent");
          id(get_calibration) = false;
  - id: changeTemperatureOversampling
    parameters:
      oversampling_index_local: int
    then:
      - lambda: |-
          std::vector<esphome::bmp280_base::BMP280Oversampling> oversampling_options = {
            esphome::bmp280_base::BMP280_OVERSAMPLING_1X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_2X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_4X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_8X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_16X
          };

          if (oversampling_index_local >= 0 && oversampling_index_local < oversampling_options.size()) {
            id(bmp280_sensor).set_temperature_oversampling(oversampling_options[oversampling_index_local]);
            id(temperature_oversampling_number).publish_state(oversampling_index_local);
            ESP_LOGI("configuration", "Temperature oversampling set to %dX", 1 << oversampling_index_local);
          } else {
            ESP_LOGW("configuration", "Invalid oversampling index: %d", oversampling_index_local);
          }
  - id: changePressureOversampling
    parameters:
      oversampling_index_local: int
    then:
      - lambda: |-
          std::vector<esphome::bmp280_base::BMP280Oversampling> oversampling_options = {
            esphome::bmp280_base::BMP280_OVERSAMPLING_1X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_2X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_4X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_8X,
            esphome::bmp280_base::BMP280_OVERSAMPLING_16X
          };

          if (oversampling_index_local >= 0 && oversampling_index_local < oversampling_options.size()) {
            id(bmp280_sensor).set_pressure_oversampling(oversampling_options[oversampling_index_local]);
            id(pressure_oversampling_number).publish_state(oversampling_index_local);
            ESP_LOGI("configuration", "Pressure oversampling set to %dX", 1 << oversampling_index_local);
          } else {
            ESP_LOGW("configuration", "Invalid oversampling index: %d", oversampling_index_local);
          }
  - id: changeIIRFilter
    parameters:
      iir_filter_index_local: int
    then:
      - lambda: |-
          std::vector<esphome::bmp280_base::BMP280IIRFilter> iir_filter_options = {
            esphome::bmp280_base::BMP280_IIR_FILTER_OFF,
            esphome::bmp280_base::BMP280_IIR_FILTER_2X,
            esphome::bmp280_base::BMP280_IIR_FILTER_4X,
            esphome::bmp280_base::BMP280_IIR_FILTER_8X,
            esphome::bmp280_base::BMP280_IIR_FILTER_16X
          };

          if (iir_filter_index_local >= 0 && iir_filter_index_local < iir_filter_options.size()) {
            id(bmp280_sensor).set_iir_filter(iir_filter_options[iir_filter_index_local]);
            id(iir_filter_number).publish_state(iir_filter_index_local);
            if (iir_filter_index_local == 0) {
              ESP_LOGI("configuration", "IIR filter set to OFF");
            } else {
              ESP_LOGI("configuration", "IIR filter set to %dX", 1 << (iir_filter_index_local));
            }
          } else {
            ESP_LOGW("configuration", "Invalid IIR filter index: %d", iir_filter_index_local);
          }
  - id: changeSensorSettings
    then:
      - lambda: |-
          id(temperature_oversampling_number).make_call().set_value(id(temperature_oversampling_number).state).perform();
          id(pressure_oversampling_number).make_call().set_value(id(pressure_oversampling_number).state).perform();
          id(iir_filter_number).make_call().set_value(id(iir_filter_number).state).perform();
