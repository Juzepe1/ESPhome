esphome:
  name: esp32-transmitter
  platform: ESP32
  board: esp32-c3-devkitm-1

  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp

  on_boot:
    priority: -1000
    then:
      - lambda: |-
          // Set calibration data to spectral sensor
          id(spectral_sensor).setup_atime(id(atime));
          id(spectral_sensor).setup_astep(id(astep));
          id(spectral_sensor).setup_gain(static_cast<esphome::as7343::AS7343Gain>(id(gain)));
      - delay: 1s
      - if:
          condition:
            lambda: 'return id(deep_sleep_button).state;'
          then:
            - deep_sleep.prevent: deep_sleep_1
          else:
            - script.execute: espnow_communication

logger:

deep_sleep:
  id: deep_sleep_1
  run_duration: 60s # Time for the ESP32 to run before entering sleep mode
  sleep_duration: 60s # Change this to your desired sleep time
  wakeup_pin:
    number: GPIO3
    allow_other_uses: true
  wakeup_pin_mode: IGNORE

external_components:
  - source: components
    components:
      - as7343
    refresh: never
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: 'nvds-new-espnow'
    components: [espnow]
    refresh: never

i2c:
  sda: GPIO5
  scl: GPIO6
  scan: true
  id: bus_a

globals:
  - id: device_id
    type: std::string
    initial_value: '"02"'
  - id: get_calibration
    type: bool
    initial_value: 'false'

  - id: request_cal
    type: bool
    initial_value: 'false'

  - id: atime
    type: uint8_t
    initial_value: '29'
    restore_value: 'yes'
  - id: astep
    type: uint16_t
    initial_value: '599'
    restore_value: 'yes'
  - id: gain
    type: int
    initial_value: '3'
    restore_value: 'yes'

  - id: flash
    type: bool
    initial_value: 'false'

    #     enum AS7343Gain : uint8_t {
    #   AS7343_GAIN_0_5X,   0
    #   AS7343_GAIN_1X,     1
    #   AS7343_GAIN_2X,     2
    #   AS7343_GAIN_4X,     3
    #   AS7343_GAIN_8X,     4
    #   AS7343_GAIN_16X,    5
    #   AS7343_GAIN_32X,    6
    #   AS7343_GAIN_64X,    7
    #   AS7343_GAIN_128X,   8
    #   AS7343_GAIN_256X,   9
    #   AS7343_GAIN_512X,   10
    #   AS7343_GAIN_1024X,  11
    #   AS7343_GAIN_2048X,  12
    # };

sensor:
  - platform: as7343
    id: 'spectral_sensor'
    f1:
      name: '405nm'
      id: 'f1'
    f2:
      name: '425nm'
      id: 'f2'
    fz:
      name: '450nm'
      id: 'fz'
    f3:
      name: '475nm'
      id: 'f3'
    f4:
      name: '515nm'
      id: 'f4'
    fy:
      name: '555nm'
      id: 'fy'
    f5:
      name: '550nm'
      id: 'f5'
    fxl:
      name: '600nm'
      id: 'fxl'
    f6:
      name: '640nm'
      id: 'f6'
    f7:
      name: '690nm'
      id: 'f7'
    f8:
      name: '745nm'
      id: 'f8'
    nir:
      name: 'NIR'
      id: 'nir'
    clear:
      name: 'Clear'
      id: 'clear'
    irradiance:
      name: 'Irradiance'
      id: 'irradiance'
    irradiance_photopic:
      name: 'Irradiance_photopic'
      id: 'irradiance_photopic'
    ppfd:
      name: 'Pffd'
      id: 'pffd'
    saturation:
      name: 'Saturation'
      id: 'saturation'
    color_temperature:
      name: 'Color Temperature'
      id: 'color_temperature'
    par:
      name: 'PAR'
      id: 'par'
    lux:
      name: 'Lux'
      id: 'lux'
    lux2:
      name: 'Lux2'
      id: 'lux2'
    update_interval: never

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO3
      allow_other_uses: true
    name: 'Button'
    id: 'deep_sleep_button'
    on_state:
      then:
        - if:
            condition:
              lambda: 'return !x;'
            then:
              - logger.log: 'Button pressed'
              - deep_sleep.enter: deep_sleep_1

espnow:
  auto_add_peer: false
  wifi_channel: !secret espnow_channel
  peers:
    - !secret hub_mac_address
  on_receive:
    then:
      - lambda: |-
          ESP_LOGI("main", "Received data from ESP-NOW");

          // Convert the received data to a string
          std::string received_string((char*)packet.get_payload(), packet.size);

          ESP_LOGI("main", "Received data: %s", received_string.c_str());

          // Array to hold parts of the received string
          char buffer[50];
          strncpy(buffer, received_string.c_str(), sizeof(buffer));

          // Parse the string using strtok
          char* cal_device_id = strtok(buffer, ";");
          char* cal_sensor_name = strtok(nullptr, ";");
          char* cal_value_string = strtok(nullptr, ";");

          if(cal_device_id != nullptr && strcmp(cal_device_id, id(device_id).c_str()) == 0){
            
              
            if(cal_value_string != nullptr){
              int value = atoi(cal_value_string);
              if (strcmp(cal_sensor_name, "getcalibration") == 0) {
                if(value == 1){
                  id(get_calibration) = true;
                  ESP_LOGI("main", "Received getcalibration: %d", value);
                }
                id(request_cal) = true;
              }
              else if (strcmp(cal_sensor_name, "flash") == 0) {
                id(flash) = value;
                ESP_LOGI("main", "Received flash: %d", value);
              }
              else if (strcmp(cal_sensor_name, "atime") == 0) {
                ESP_LOGI("main", "Received atime: %d", value);
                if (id(flash)) {
                  id(atime) = value;
                  id(spectral_sensor).setup_atime(value);
                  ESP_LOGI("main", "Wrting to flash");
                }
                else {
                  id(spectral_sensor).setup_atime(value);
                  ESP_LOGI("main", "Not writing to flash");
                }
              }
              else if (strcmp(cal_sensor_name, "astep") == 0) {
                ESP_LOGI("main", "Received astep: %d", value);
                if (id(flash)) {
                  id(astep) = value;
                  id(spectral_sensor).setup_astep(value);
                  ESP_LOGI("main", "Wrting to flash");
                }
                else {
                  id(spectral_sensor).setup_astep(value);
                  ESP_LOGI("main", "Not writing to flash");
                }
              }
              else if (strcmp(cal_sensor_name, "gain") == 0) {
                ESP_LOGI("main", "Received gain: %d", value);
                if (id(flash)) {
                  id(gain) = value;
                  id(spectral_sensor).setup_gain(static_cast<esphome::as7343::AS7343Gain>(value));
                  ESP_LOGI("main", "Wrting to flash");
                }
                else {
                  id(spectral_sensor).setup_gain(static_cast<esphome::as7343::AS7343Gain>(value));
                  ESP_LOGI("main", "Not writing to flash");
                }
              }
            }
              
            }

          else {
            ESP_LOGI("main", "Received data not for this device");
          }
      - if:
          condition:
            lambda: 'return id(get_calibration);'
          then:
            - component.update: spectral_sensor
            - delay: 500ms
            - espnow.send:
                peer: !secret hub_mac_address
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "atime", id(spectral_sensor).get_atime());
            - delay: 500ms
            - espnow.send:
                peer: !secret hub_mac_address
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "astep", id(spectral_sensor).get_astep());
            - delay: 500ms
            - espnow.send:
                peer: !secret hub_mac_address
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "gain", id(spectral_sensor).get_gain());
            - lambda: |-
                ESP_LOGI("main", "Calibration data sent");
                id(get_calibration) = false;

script:
  - id: espnow_communication
    then:
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            std::string data = id(device_id) + ";requestCal";
            return std::vector<uint8_t>(data.begin(), data.end());

      - logger.log: 'Wating for response'
      - wait_until:
          condition:
            lambda: 'return id(request_cal);'
          timeout: 15s
      - logger.log: 'Response received'
      - lambda: |-
          id(request_cal) = false;
      - wait_until:
          condition:
            lambda: 'return !id(get_calibration);'
          timeout: 15s
      - logger.log: 'Calibration data sent'
      - logger.log: 'Updating sensor data'
      - component.update: spectral_sensor
      - delay: 3s
      - logger.log: 'Sensor data updated'
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "f1", id(f1).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "f2", id(f2).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "fz", id(fz).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "f3", id(f3).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "f4", id(f4).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "fy", id(fy).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "f5", id(f5).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "fxl", id(fxl).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "f6", id(f6).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "f7", id(f7).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "f8", id(f8).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "nir", id(nir).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "clear", id(clear).state*100000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "irradiance", id(irradiance).state*1000000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "irradiance_photopic", id(irradiance_photopic).state*1000000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "pffd", id(pffd).state*1000000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "saturation", id(saturation).state*1000000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "color_temperature", id(color_temperature).state*1000000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "par", id(par).state*1000000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "lux", id(lux).state*1000000);
      - delay: 500ms
      - espnow.send:
          peer: !secret hub_mac_address
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "lux2", id(lux2).state*1000000);
