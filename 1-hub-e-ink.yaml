esphome:
  name: esp32-hub-e-ink
  platformio_options:
    platform: https://github.com/lucaskatayama/platform-espressif32.git#feat/seeed_xiao_esp32c6.json
  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp
    - components/XBitMaps/sprites.h
    - components/vision_master/FreeMono7pt7b.h
    - components/vision_master/FreeMono9pt7b.h
    - components/vision_master/FreeMono12pt7b.h
    - components/vision_master/FreeMono18pt7b.h
    - components/vision_master/FreeMono24pt7b.h
    - components/vision_master/FreeMonoBold9pt7b.h
    - components/vision_master/FreeMonoBold12pt7b.h
    - components/vision_master/FreeMonoBold18pt7b.h
    - components/vision_master/FreeMonoBold24pt7b.h
    - components/vision_master/FreeMonoBoldOblique9pt7b.h
    - components/vision_master/FreeMonoBoldOblique12pt7b.h
    - components/vision_master/FreeMonoBoldOblique18pt7b.h
    - components/vision_master/FreeMonoBoldOblique24pt7b.h
    - components/vision_master/FreeMonoOblique9pt7b.h
    - components/vision_master/FreeMonoOblique12pt7b.h
    - components/vision_master/FreeMonoOblique18pt7b.h
    - components/vision_master/FreeMonoOblique24pt7b.h
    - components/vision_master/FreeSans9pt7b.h
    - components/vision_master/FreeSans12pt7b.h
    - components/vision_master/FreeSans18pt7b.h
    - components/vision_master/FreeSans24pt7b.h
    - components/vision_master/FreeSansBold9pt7b.h
    - components/vision_master/FreeSansBold12pt7b.h
    - components/vision_master/FreeSansBold18pt7b.h
    - components/vision_master/FreeSansBold24pt7b.h
    - components/vision_master/FreeSansBoldOblique9pt7b.h
    - components/vision_master/FreeSansBoldOblique12pt7b.h
    - components/vision_master/FreeSansBoldOblique18pt7b.h
    - components/vision_master/FreeSansBoldOblique24pt7b.h
    - components/vision_master/FreeSansOblique9pt7b.h
    - components/vision_master/FreeSansOblique12pt7b.h
    - components/vision_master/FreeSansOblique18pt7b.h
    - components/vision_master/FreeSansOblique24pt7b.h
    - components/vision_master/FreeSerif9pt7b.h
    - components/vision_master/FreeSerif12pt7b.h
    - components/vision_master/FreeSerif18pt7b.h
    - components/vision_master/FreeSerif24pt7b.h
    - components/vision_master/FreeSerifBold9pt7b.h
    - components/vision_master/FreeSerifBold12pt7b.h
    - components/vision_master/FreeSerifBold18pt7b.h
    - components/vision_master/FreeSerifBold24pt7b.h
    - components/vision_master/FreeSerifBoldItalic9pt7b.h
    - components/vision_master/FreeSerifBoldItalic12pt7b.h
    - components/vision_master/FreeSerifBoldItalic18pt7b.h
    - components/vision_master/FreeSerifBoldItalic24pt7b.h
    - components/vision_master/FreeSerifItalic9pt7b.h
    - components/vision_master/FreeSerifItalic12pt7b.h
    - components/vision_master/FreeSerifItalic18pt7b.h
    - components/vision_master/FreeSerifItalic24pt7b.h
    - components/vision_master/kongtext5pt7b.h
    - components/vision_master/Org_01.h
    - components/vision_master/Picopixel.h
    - components/vision_master/TomThumb.h
    - components/vision_master/Tiny3x3a2pt7b.h

  on_boot:
    priority: -10000
    then:
      - lambda: |-
          for (int i = 0; i < 8; i++) {
            if(id(peer_addresses)[i] != 0){
              id(espnow_component)->add_peer(id(peer_addresses)[i]);
            }
          }

spi:

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

logger:
  baud_rate: 115200
  level: DEBUG

substitutions:
  spectral_sensor_device_id: '22'
  soil_sensor_device_id: '33'
  air_sensor_device_id: '44'

web_server:
  port: 80
  auth:
    username: !secret web_username
    password: !secret web_password
  version: 3
  sorting_groups:
    - id: sg_readings_${spectral_sensor_device_id}
      name: 'Spectral Readings'
      sorting_weight: 10

    - id: sg_settings_${spectral_sensor_device_id}
      name: 'Spectral Settings'
      sorting_weight: 11

    - id: sg_readings_${soil_sensor_device_id}
      name: 'Soil Readings'
      sorting_weight: 12

    - id: sg_settings_${soil_sensor_device_id}
      name: 'Soil Settings'
      sorting_weight: 13

    - id: sg_readings_${air_sensor_device_id}
      name: 'Air Readings'
      sorting_weight: 14

    - id: sg_settings_${air_sensor_device_id}
      name: 'Air Settings'
      sorting_weight: 15

wifi:
  ssid: !secret WiFi_ssid # WiFi SSID from secrets.yaml
  password: !secret WiFi_password # WiFi password from secrets.yaml
  power_save_mode: none

# ota:
#   - platform: esphome
#     password: !secret OTA_password # OTA password from secrets.yaml

vision_master:
  id: my_display

external_components:
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: d23346165e1baefd337ed805d3a211e5bead53af
    refresh: 1min
    components: [espnow]

  - source: components
    components:
      - vision_master
    refresh: 1min

globals:
  - id: peer_addresses
    type: uint64_t[8]
    initial_value: '{0, 0, 0, 0, 0, 0, 0, 0}'
    restore_value: yes
  - id: peer_names
    type: uint8_t[8]
    initial_value: '{0, 0, 0, 0, 0, 0, 0, 0}'
    restore_value: yes

sensor:
  - platform: template
    name: '405nm ${spectral_sensor_device_id}'
    id: f1_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: '425nm ${spectral_sensor_device_id}'
    id: f2_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: '450nm ${spectral_sensor_device_id}'
    id: fz_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: '475nm ${spectral_sensor_device_id}'
    id: f3_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 4

  - platform: template
    name: '515nm ${spectral_sensor_device_id}'
    id: f4_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 5

  - platform: template
    name: '555nm ${spectral_sensor_device_id}'
    id: fy_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: '550nm ${spectral_sensor_device_id}'
    id: f5_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 7

  - platform: template
    name: '600nm ${spectral_sensor_device_id}'
    id: fxl_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 8

  - platform: template
    name: '640nm ${spectral_sensor_device_id}'
    id: f6_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 9

  - platform: template
    name: '690nm ${spectral_sensor_device_id}'
    id: f7_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 10

  - platform: template
    name: '745nm ${spectral_sensor_device_id}'
    id: f8_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 11

  - platform: template
    name: 'NIR ${spectral_sensor_device_id}'
    id: nir_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 12

  - platform: template
    name: 'Clear ${spectral_sensor_device_id}'
    id: clear_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 13

  - platform: template
    name: 'Irradiance ${spectral_sensor_device_id}'
    id: irradiance_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'W/mÂ²'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 14

  - platform: template
    name: 'Irradiance Photopic ${spectral_sensor_device_id}'
    id: irradiance_photopic_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'lm/mÂ²'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 15

  - platform: template
    name: 'PFFD ${spectral_sensor_device_id}'
    id: pffd_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'Âµmol/mÂ²/s'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 16

  - platform: template
    name: 'Saturation ${spectral_sensor_device_id}'
    id: saturation_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: '%'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 17

  - platform: template
    name: 'Color Temperature ${spectral_sensor_device_id}'
    id: color_temperature_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'K'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 18

  - platform: template
    name: 'PAR ${spectral_sensor_device_id}'
    id: par_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'Âµmol/mÂ²/s'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 19

  - platform: template
    name: 'Lux ${spectral_sensor_device_id}'
    id: lux_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'lx'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 20

  - platform: template
    name: 'Lux2 ${spectral_sensor_device_id}'
    id: lux2_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'lx'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 21

  - platform: template
    name: 'Humidity ${soil_sensor_device_id}'
    id: 'humidity_${soil_sensor_device_id}'
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: '%RH'
    device_class: humidity
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 1
    filters:
      - multiply: 0.1

  - platform: template
    name: 'Temperature ${soil_sensor_device_id}'
    id: temperature_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: 'Â°C'
    device_class: temperature
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 2
    filters:
      - multiply: 0.1

  - platform: template
    name: 'Conductivity_${soil_sensor_device_id}'
    id: conductivity_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: 'ÂµS/cm'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'pH_${soil_sensor_device_id}'
    id: ph_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: 'pH'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 4
    filters:
      - multiply: 0.1

  - platform: template
    name: 'Nitrogen_${soil_sensor_device_id}'
    id: nitrogen_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/kg'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 5

  - platform: template
    name: 'Phosphorus_${soil_sensor_device_id}'
    id: phosphorus_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/kg'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: 'Potassium_${soil_sensor_device_id}'
    id: potassium_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/kg'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 7

  - platform: template
    name: 'Salinity_${soil_sensor_device_id}'
    id: salinity_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/L'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 8

  - platform: template
    name: 'TDS_${soil_sensor_device_id}'
    id: tds_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/L'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 9

  - platform: template
    name: 'BMP Temperature ${air_sensor_device_id}'
    id: bmp_temp_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: 'Â°C'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: 'BMP Pressure ${air_sensor_device_id}'
    id: bmp_press_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: 'hPa'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: 'SI Temperature ${air_sensor_device_id}'
    id: si_temp_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: 'Â°C'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'SI Humidity ${air_sensor_device_id}'
    id: si_hum_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 4

  - platform: template
    name: 'CCS eCO2 ${air_sensor_device_id}'
    id: ccs_eco2_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'ppm'
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 5

  - platform: template
    name: 'CCS TVOC ${air_sensor_device_id}'
    id: ccs_tvoc_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'ppb'
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: 'Last BMP Temperature ${air_sensor_device_id}'
    id: bmp_temp_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last BMP Pressure ${air_sensor_device_id}'
    id: bmp_press_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last SI Temperature ${air_sensor_device_id}'
    id: si_temp_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last SI Humidity ${air_sensor_device_id}'
    id: si_hum_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last CCS eCO2 ${air_sensor_device_id}'
    id: eCO2_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last CCS TVOC ${air_sensor_device_id}'
    id: TVOC_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last Temperature ${soil_sensor_device_id}'
    id: temperature_last_${soil_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last Humidity ${soil_sensor_device_id}'
    id: humidity_last_${soil_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last pH ${soil_sensor_device_id}'
    id: ph_last_${soil_sensor_device_id}
    update_interval: never
    internal: true

number:
  - platform: template
    name: 'ATime'
    id: atime_${spectral_sensor_device_id}
    min_value: 0.0
    max_value: 255
    step: 1.0
    optimistic: true
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: 'AStep'
    id: astep_${spectral_sensor_device_id}
    min_value: 0.0
    max_value: 65534
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'Gain'
    id: gain_${spectral_sensor_device_id}
    min_value: 0.0
    max_value: 12.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 4

  - platform: template
    name: 'Conductivity Factor ${soil_sensor_device_id}'
    id: cond_f_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: 'Salinity Factor ${soil_sensor_device_id}'
    id: sal_f_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'TDS Factor ${soil_sensor_device_id}'
    id: tds_f_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 4

  - platform: template
    name: 'Temperature Offset ${soil_sensor_device_id}'
    id: temp_offset_${soil_sensor_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 5

  - platform: template
    name: 'Humidity Offset ${soil_sensor_device_id}'
    id: hum_offset_${soil_sensor_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: 'Conductivity Offset ${soil_sensor_device_id}'
    id: cond_offset_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 7

  - platform: template
    name: 'pH Offset ${soil_sensor_device_id}'
    id: ph_offset_${soil_sensor_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 8

  - platform: template
    name: 'Nitrogen Factor High ${soil_sensor_device_id}'
    id: n_f_high_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 9

  - platform: template
    name: 'Nitrogen Factor Low ${soil_sensor_device_id}'
    id: n_f_low_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 10

  - platform: template
    name: 'Nitrogen Offset ${soil_sensor_device_id}'
    id: n_offset_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 11

  - platform: template
    name: 'Phosphorus Factor High ${soil_sensor_device_id}'
    id: p_f_high_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 12

  - platform: template
    name: 'Phosphorus Factor Low ${soil_sensor_device_id}'
    id: p_f_low_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 13

  - platform: template
    name: 'Phosphorus Offset ${soil_sensor_device_id}'
    id: p_offset_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 14

  - platform: template
    name: 'Potassium Factor High ${soil_sensor_device_id}'
    id: k_f_high_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 15

  - platform: template
    name: 'Potassium Factor Low ${soil_sensor_device_id}'
    id: k_f_low_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 16

  - platform: template
    name: 'Potassium Offset ${soil_sensor_device_id}'
    id: k_offset_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 17

  - platform: template
    name: 'BMP Temperature Oversampling ${air_sensor_device_id}'
    id: temp_index_${air_sensor_device_id}
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: 'BMP Pressure Oversampling ${air_sensor_device_id}'
    id: press_index_${air_sensor_device_id}
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'IIR Filter ${air_sensor_device_id}'
    id: iir_index_${air_sensor_device_id}
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 4
button:
  - platform: factory_reset
    name: Restart with Factory Default Settings
    entity_category: config

  - platform: template
    name: 'Ping Devices'
    entity_category: config
    on_press:
      then:
        #- script.execute: beReadyToReceiveMessage
        - espnow.broadcast:
            payload: 'ping'

  - platform: template
    name: 'Peers list'
    entity_category: config
    on_press:
      then:
        - lambda: |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_addresses)[i] != 0) {
                    ESP_LOGI("main", "Index %d Peer: 0x%12llx Name: %d",i, id(peer_addresses)[i], id(peer_names)[i]);
                }
            }

  - platform: template
    name: 'Get cal. data ${spectral_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        #- script.execute: beReadyToReceiveMessage
        - script.execute:
            id: requestCalResponse
            device_id: ${spectral_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: 'Send cal. data ${spectral_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        #- script.execute: beReadyToReceiveMessage
        - script.execute: send_calibration_data_${spectral_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: 'Get cal. data ${soil_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        - script.execute:
            id: requestCalResponse
            device_id: ${soil_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: 'Send cal. data ${soil_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        - script.execute: send_calibration_data_${soil_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 18

  - platform: template
    name: 'Get cal. data ${air_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        - script.execute:
            id: requestCalResponse
            device_id: ${air_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: 'Send cal. data ${air_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        - script.execute: send_calibration_data_${air_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 6
switch:
  - platform: template
    name: 'Write cal. dat to flash ${spectral_sensor_device_id}'
    id: flash_${spectral_sensor_device_id}
    restore_mode: ALWAYS_OFF # Start in the OFF state
    optimistic: true # Optional: update state immediately
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 5
  - platform: template
    name: 'Write cal. dat to flash ${air_sensor_device_id}'
    id: flash_${air_sensor_device_id}
    restore_mode: ALWAYS_OFF # Start in the OFF state
    optimistic: true # Optional: update state immediately
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 5

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO21
      inverted: true
    name: 'Internal Button'
    on_press:
      then:
        # - script.execute:
        #     id: eink_page_${air_sensor_device_id}
        #     eCO2_value: !lambda return id(ccs_eco2_${air_sensor_device_id}).state;
        #     TVOC_value: !lambda return id(ccs_tvoc_${air_sensor_device_id}).state;
        #     pressure_value: !lambda return id(bmp_press_${air_sensor_device_id}).state;
        #     temperature_value: !lambda return id(si_temp_${air_sensor_device_id}).state;
        #     humidity_value: !lambda return id(si_hum_${air_sensor_device_id}).state;
        #     eCO2_value_last: !lambda return id(eCO2_last_${air_sensor_device_id}).state;
        #     TVOC_value_last: !lambda return id(TVOC_last_${air_sensor_device_id}).state;
        #     pressure_value_last: !lambda return id(bmp_press_last_${air_sensor_device_id}).state;
        #     temperature_value_last: !lambda return id(si_temp_last_${air_sensor_device_id}).state;
        #     humidity_value_last: !lambda return id(si_hum_last_${air_sensor_device_id}).state;
        # - script.execute: update_last_values_${air_sensor_device_id}
        # - script.execute:
        #     id: eink_page_${soil_sensor_device_id}
        #     temperature_value: !lambda return id(temperature_${soil_sensor_device_id}).state;
        #     humidity_value: !lambda return id(humidity_${soil_sensor_device_id}).state;
        #     conductivity_value: !lambda return id(conductivity_${soil_sensor_device_id}).state;
        #     ph_value: !lambda return id(ph_${soil_sensor_device_id}).state;
        #     nitrogen_value: !lambda return id(nitrogen_${soil_sensor_device_id}).state;
        #     phosphorus_value: !lambda return id(phosphorus_${soil_sensor_device_id}).state;
        #     potassium_value: !lambda return id(potassium_${soil_sensor_device_id}).state;
        #     salinity_value: !lambda return id(salinity_${soil_sensor_device_id}).state;
        #     tds_value: !lambda return id(tds_${soil_sensor_device_id}).state;
        #     temperature_value_last: !lambda return id(temperature_last_${soil_sensor_device_id}).state;
        #     humidity_value_last: !lambda return id(humidity_last_${soil_sensor_device_id}).state;
        #     ph_value_last: !lambda return id(ph_last_${soil_sensor_device_id}).state;
        # - script.execute: update_last_values_${soil_sensor_device_id}
        - script.execute:
            id: eink_page_${spectral_sensor_device_id}
            f1_value: !lambda return id(f1_${spectral_sensor_device_id}).state;
            f2_value: !lambda return id(f2_${spectral_sensor_device_id}).state;
            fz_value: !lambda return id(fz_${spectral_sensor_device_id}).state;
            f3_value: !lambda return id(f3_${spectral_sensor_device_id}).state;
            f4_value: !lambda return id(f4_${spectral_sensor_device_id}).state;
            fy_value: !lambda return id(fy_${spectral_sensor_device_id}).state;
            f5_value: !lambda return id(f5_${spectral_sensor_device_id}).state;
            fxl_value: !lambda return id(fxl_${spectral_sensor_device_id}).state;
            f6_value: !lambda return id(f6_${spectral_sensor_device_id}).state;
            f7_value: !lambda return id(f7_${spectral_sensor_device_id}).state;
            f8_value: !lambda return id(f8_${spectral_sensor_device_id}).state;
            nir_value: !lambda return id(nir_${spectral_sensor_device_id}).state;
            irradiance_value: !lambda return id(irradiance_${spectral_sensor_device_id}).state;
            par_value: !lambda return id(par_${spectral_sensor_device_id}).state;
            ppfd_value: !lambda return id(pffd_${spectral_sensor_device_id}).state;
            lux_value: !lambda return id(lux_${spectral_sensor_device_id}).state;
            cct_value: !lambda return id(color_temperature_${spectral_sensor_device_id}).state;

espnow:
  id: espnow_component
  auto_add_peer: true
  wifi_channel: !secret espnow_channel
  predefined_peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          if(packet.is_valid()){
            // Convert the received data to a string
            std::string received_string((char*)packet.get_payload(), packet.size);

            ESP_LOGI("main", "Received data: %s", received_string.c_str());

            // Peer
            uint64_t peer = packet.peer;
            ESP_LOGI("main", "Peer: 0x%12llx", peer);
            
            // Parse the received data
            char buffer[241];

            strncpy(buffer, received_string.c_str(), sizeof(buffer));
            
            

            char* topic = strtok(buffer, ";");
            char* value = strtok(nullptr, ";");
            char* end = strtok(nullptr, ";");

            
            if(topic != nullptr){
                if(value != nullptr){
                    int value_int = atoi(value);
                    //float value_float = atof(value);

                    bool savedPeer = false;
                    int sensor_id = 0;
                    // Peer name
                    for (int i = 0; i < 8; i++) {
                      if (id(peer_addresses)[i] == peer) {
                        savedPeer = true;
                        sensor_id = id(peer_names)[i];
                        break;
                      }
                    }
                    if (savedPeer){
                      //ESP_LOGI("main", "Peer already saved");
                      ESP_LOGI("main", "Sensor ID: %d", sensor_id);
                    }
                    else{
                      ESP_LOGW("main", "Recieved message is not from saved peer");
                    }
                    

                    if (strcmp(topic, "pong") == 0 && end != nullptr){
                        int end_int = atoi(end);
                        if(end_int == 1){
                          // Check if peer is already in the list
                          bool peer_exists = false;
                          for (int i = 0; i < 8; i++) {
                              if (id(peer_addresses)[i] == peer) {
                                  if(id(peer_names)[i] != value_int){
                                    id(peer_names)[i] = value_int;
                                  }
                                  peer_exists = true;
                                  break;
                              }
                          }

                          bool peer_added = false;
                          // If peer is not in the list, add it to the first available 0 position
                          if (!peer_exists) {
                              for (int i = 0; i < 8; i++) {
                                  if (id(peer_addresses)[i] == 0) { // Check for an empty spot (0 indicates empty)
                                      id(peer_addresses)[i] = peer;
                                      id(peer_names)[i] = value_int;
                                      peer_added = true;
                                      break;
                                  }
                              }
                              if (!peer_added) {
                                  ESP_LOGW("main", "No more space for peers");
                              }
                          }
                        }

                        ESP_LOGI("main", "Response: Peer: 0x%12llx Name: %s", peer, value);
                    }
                    else if(sensor_id == ${spectral_sensor_device_id}){
                        if (strcmp(topic, "f1") == 0) {
                          id(f1_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f2") == 0) {
                          id(f2_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "fz") == 0) {
                          id(fz_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f3") == 0) {
                          id(f3_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f4") == 0) {
                          id(f4_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "fy") == 0) {
                          id(fy_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f5") == 0) {
                          id(f5_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "fxl") == 0) {
                          id(fxl_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f6") == 0) {
                          id(f6_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f7") == 0) {
                          id(f7_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f8") == 0) {
                          id(f8_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "nir") == 0) {
                          id(nir_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "clear") == 0) {
                          id(clear_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "irradiance") == 0) {
                          id(irradiance_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "irradiance_photopic") == 0) {
                          id(irradiance_photopic_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "pffd") == 0) {
                          id(pffd_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "saturation") == 0) {
                          id(saturation_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "color_temperature") == 0) {
                          id(color_temperature_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "par") == 0) {
                          id(par_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "lux") == 0) {
                          id(lux_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "lux2") == 0) {
                          id(lux2_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "atime") == 0) {
                          id(atime_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "astep") == 0) {
                          id(astep_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "gain") == 0) {
                          id(gain_${spectral_sensor_device_id}).publish_state(value_int);
                        }
                    }
                    else if(sensor_id == ${soil_sensor_device_id}){
                        if (strcmp(topic, "humidity") == 0) {
                          id(humidity_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "temperature") == 0) {
                          id(temperature_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "conductivity") == 0) {
                          id(conductivity_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "ph") == 0) {
                          id(ph_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "nitrogen") == 0) {
                          id(nitrogen_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "phosphorus") == 0) {
                          id(phosphorus_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "potassium") == 0) {
                          id(potassium_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "salinity") == 0) {
                          id(salinity_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "tds") == 0) {
                          id(tds_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "cond_f") == 0){
                          id(cond_f_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "sal_f") == 0){
                          id(sal_f_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "tds_f") == 0){
                          id(tds_f_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "temp_offset") == 0){
                          if(value_int > 32767){
                            value_int = value_int - 65536; // 65536
                          }
                          id(temp_offset_${soil_sensor_device_id}).publish_state(value_int / 10.0);
                        } else if(strcmp(topic, "hum_offset") == 0){
                          if(value_int > 32767){
                            value_int = value_int - 65536; // 65536
                          }
                          id(hum_offset_${soil_sensor_device_id}).publish_state(value_int / 10.0);
                        } else if(strcmp(topic, "cond_offset") == 0){
                          id(cond_offset_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "ph_offset") == 0){
                          if(value_int > 32767){
                            value_int = value_int - 65536; // 65536
                          }
                          id(ph_offset_${soil_sensor_device_id}).publish_state(value_int / 10.0);
                        } else if(strcmp(topic, "n_f_high") == 0){
                          id(n_f_high_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "n_f_low") == 0){
                          id(n_f_low_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "n_offset") == 0){
                          id(n_offset_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "p_f_high") == 0){
                          id(p_f_high_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "p_f_low") == 0){
                          id(p_f_low_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "p_offset") == 0){
                          id(p_offset_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "k_f_high") == 0){
                          id(k_f_high_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "k_f_low") == 0){
                          id(k_f_low_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "k_offset") == 0){
                          id(k_offset_${soil_sensor_device_id}).publish_state(value_int);
                        }
                    }
                    else if(sensor_id == ${air_sensor_device_id}){
                        if (strcmp(topic, "bmp_temp") == 0) {
                          id(bmp_temp_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "bmp_press") == 0) {
                          id(bmp_press_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "si_temp") == 0) {
                          id(si_temp_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "si_hum") == 0) {
                          id(si_hum_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "ccs_eco2") == 0) {
                          id(ccs_eco2_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "ccs_tvoc") == 0) {
                          id(ccs_tvoc_${air_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "temp_index") == 0){
                          id(temp_index_${air_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "press_index") == 0){
                          id(press_index_${air_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "iir_index") == 0){
                          id(iir_index_${air_sensor_device_id}).publish_state(value_int);
                        }
                    }
                    else{
                        ESP_LOGW("main", "Unknown topic: %s", topic);
                    }
                }
                else{ESP_LOGW("main", "Value is none");}
            }
            else{ESP_LOGW("main", "Topic is none");}

          }
          else{ESP_LOGW("main", "Invalid packet");}

      - script.execute: handleOnRecieve

script:
  - id: send_calibration_data_${spectral_sensor_device_id}
    then:
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${spectral_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("flash", id(flash_${spectral_sensor_device_id}).state);
      - delay: 1000ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${spectral_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("atime", id(atime_${spectral_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${spectral_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("astep", id(astep_${spectral_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${spectral_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("gain", id(gain_${spectral_sensor_device_id}).state);
  - id: beReadyToReceiveMessage
    then:
      - espnow.broadcast:
          payload: 'hub;beReadyToReceiveMessage;'
      - delay: 500ms
  - id: requestCalResponse
    parameters:
      device_id: int
    then:
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == device_id) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: 'getcalibration;'
  - id: handleOnRecieve
    then:
      - logger.log: 'Received data'
  - id: send_calibration_data_${soil_sensor_device_id}
    then:
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("cond_f", id(cond_f_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("sal_f", id(sal_f_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("tds_f", id(tds_f_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("temp_offset", id(temp_offset_${soil_sensor_device_id}).state * 10);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("hum_offset", id(hum_offset_${soil_sensor_device_id}).state * 10);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("cond_offset", id(cond_offset_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("ph_offset", id(ph_offset_${soil_sensor_device_id}).state * 10);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("n_f_high", id(n_f_high_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("n_f_low", id(n_f_low_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("n_offset", id(n_offset_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("p_f_high", id(p_f_high_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("p_f_low", id(p_f_low_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("p_offset", id(p_offset_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("k_f_high", id(k_f_high_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("k_f_low", id(k_f_low_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("k_offset", id(k_offset_${soil_sensor_device_id}).state);
  - id: send_calibration_data_${air_sensor_device_id}
    then:
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
              if (id(peer_names)[i] == ${air_sensor_device_id}) {
                return id(peer_addresses)[i];
              }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("flash", id(flash_${air_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${air_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("temp_index", id(temp_index_${air_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${air_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("press_index", id(press_index_${air_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${air_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("iir_index", id(iir_index_${air_sensor_device_id}).state);
  - id: eink_page_${air_sensor_device_id}
    parameters:
      eCO2_value: int
      TVOC_value: int
      pressure_value: float
      temperature_value: float
      humidity_value: float
      eCO2_value_last: int
      TVOC_value_last: int
      pressure_value_last: float
      temperature_value_last: float
      humidity_value_last: float
    then:
      - lambda: |-
          int padding = 5;
          int small_padding = 3;
          int top_bottom_padding = 1;
          int tvoc_padding_right = 20;

          id(my_display).landscape();
          id(my_display).clearMemory();
          id(my_display).setTextWrap(false);

          //id(my_display).setTextColor(BLACK);
          //id(my_display).setBackgroundColor(WHITE);
          const uint16_t width  = id(my_display).width();
          const uint16_t height = id(my_display).height();

          id(my_display).setFont(&FreeMonoBold12pt7b);

          String title = "Air Sensor 2";
          uint8_t title_height = id(my_display).getTextHeight(title);

          int title_y = title_height + top_bottom_padding;

          id(my_display).setCursor(padding, title_y);
          id(my_display).print("Air Sensor 2");

          int line_y = title_y + small_padding;

          id(my_display).drawLine(0, line_y, width, line_y, BLACK);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          char eCO2_char[9];
          sprintf(eCO2_char, "%4d", eCO2_value);
          String eCO2_string = String(eCO2_char);
          if(eCO2_value > 9999 || eCO2_value < 0){
            eCO2_string = "nan";
          }

          char TVOC_char[9];
          sprintf(TVOC_char, "%4d", TVOC_value);
          String TVOC_string = String(TVOC_char);
          if(TVOC_value > 9999 || TVOC_value < 0){
            TVOC_string = "nan";
          }

          char pressure_char[10];
          sprintf(pressure_char, "%5.1f", pressure_value);
          String pressure_string = String(pressure_char);
          if(pressure_value > 9999 || pressure_value < 0){
            pressure_string = "nan";
          }


          uint8_t eco2_string_height = id(my_display).getTextHeight(eCO2_string);
          uint8_t tvoc_string_height = id(my_display).getTextHeight(TVOC_string);
          uint8_t pressure_string_height = id(my_display).getTextHeight(pressure_string);

          uint8_t max_string_height = max(eco2_string_height, max(tvoc_string_height, pressure_string_height));

          uint8_t eco2_string_width = id(my_display).getTextWidth(eCO2_string);
          uint8_t tvoc_string_width = id(my_display).getTextWidth(TVOC_string);
          uint8_t pressure_string_width = id(my_display).getTextWidth(pressure_string);

          id(my_display).setFont(&FreeMono9pt7b);

          String eCO2_label = "eCO2";
          String TVOC_label = "TVOC";
          String pressure_label = "Press.";

          uint8_t eco2_label_height = id(my_display).getTextHeight(eCO2_label);
          uint8_t tvoc_label_height = id(my_display).getTextHeight(TVOC_label);
          uint8_t pressure_label_height = id(my_display).getTextHeight(pressure_label);

          uint8_t eco2_label_width = id(my_display).getTextWidth(eCO2_label);
          uint8_t tvoc_label_width = id(my_display).getTextWidth(TVOC_label);
          uint8_t pressure_label_width = id(my_display).getTextWidth(pressure_label);

          uint8_t max_label_height = max(eco2_label_height, max(tvoc_label_height, pressure_label_height));

          id(my_display).setFont(&FreeMono7pt7b);

          String eCO2_unit = "ppm";
          String TVOC_unit = "ppb";
          String pressure_unit = "hPa";

          uint8_t eco2_unit_height = id(my_display).getTextHeight(eCO2_unit);
          uint8_t tvoc_unit_height = id(my_display).getTextHeight(TVOC_unit);
          uint8_t pressure_unit_height = id(my_display).getTextHeight(pressure_unit);

          uint8_t max_unit_height = max(eco2_unit_height, max(tvoc_unit_height, pressure_unit_height));

          uint8_t eco2_unit_width = id(my_display).getTextWidth(eCO2_unit);
          uint8_t tvoc_unit_width = id(my_display).getTextWidth(TVOC_unit);
          uint8_t pressure_unit_width = id(my_display).getTextWidth(pressure_unit);

          int pressure_x = width - pressure_string_width - padding - down_arrow_width;
          int eCO2_x = 0;
          int TVOC_x = ((pressure_x + (eCO2_x + eco2_string_width)) / 2) - ((tvoc_string_width) / 2);



          int small_letter_diff_down = 2; // ppb p is under the line and b is above the line
          int small_letter_diff_top = 3; // ppm m is under the line and p is above the line


          int unit_y = height - top_bottom_padding - small_letter_diff_down;
          int string_y = unit_y - max_unit_height - padding + small_letter_diff_top;
          int label_y = string_y - max_string_height - padding;

          id(my_display).setFont(&FreeMono7pt7b);

          id(my_display).setCursor(eCO2_x + (eco2_string_width - eco2_unit_width) / 2, unit_y);
          id(my_display).print(eCO2_unit);

          id(my_display).setCursor(TVOC_x + (tvoc_string_width - tvoc_unit_width) / 2, unit_y);
          id(my_display).print(TVOC_unit);

          id(my_display).setCursor(pressure_x + (pressure_string_width - pressure_unit_width) / 2, unit_y);
          id(my_display).print(pressure_unit);

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(eCO2_x + (eco2_string_width - eco2_label_width) / 2 , label_y);
          id(my_display).print(eCO2_label);

          id(my_display).setCursor(TVOC_x + (tvoc_string_width - tvoc_label_width) / 2, label_y);
          id(my_display).print(TVOC_label);

          id(my_display).setCursor(pressure_x + (pressure_string_width - pressure_label_width) / 2, label_y);
          id(my_display).print(pressure_label);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(eCO2_x, string_y);
          id(my_display).print(eCO2_string);

          id(my_display).setCursor(TVOC_x, string_y);
          id(my_display).print(TVOC_string);

          id(my_display).setCursor(pressure_x, string_y);
          id(my_display).print(pressure_string);

          if(eCO2_value > eCO2_value_last){
            id(my_display).drawXBitmap(eCO2_x+eco2_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(eCO2_value < eCO2_value_last){
            id(my_display).drawXBitmap(eCO2_x+eco2_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          if(TVOC_value > TVOC_value_last){
            id(my_display).drawXBitmap(TVOC_x+tvoc_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(TVOC_value < TVOC_value_last){
            id(my_display).drawXBitmap(TVOC_x+tvoc_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          if(pressure_value > pressure_value_last){
            id(my_display).drawXBitmap(pressure_x+pressure_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(pressure_value < pressure_value_last){
            id(my_display).drawXBitmap(pressure_x+pressure_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          // id(my_display).drawLine(0,unit_y , width, unit_y , BLACK);
          // id(my_display).drawLine(0,label_y + padding , width, label_y + padding, BLACK);
          // id(my_display).drawLine(0,label_y , width, label_y , BLACK);
          // id(my_display).drawLine(0,string_y + padding , width , string_y + padding , BLACK);
          // id(my_display).drawLine(0,string_y , width, string_y , BLACK);
          // id(my_display).drawLine(0,label_y - max_label_height, width, label_y - max_label_height, BLACK);

          // // Draw vertical line from top to bottom in the middle of the screen
          // id(my_display).drawLine(width / 2, 0, width / 2, height, BLACK);

          int thermometer_top_left_y = line_y + padding + 1;
          int thermometer_top_left_x = padding;

          // First draw a thermometer in the background, top centre
          id(my_display).drawXBitmap(thermometer_top_left_x, thermometer_top_left_y, thermometer_bits, thermometer_width, thermometer_height, BLACK);

          bool negative_temperature = false;

          float temperature_value_new = temperature_value;
          if(temperature_value < 0){
            negative_temperature = true;
            temperature_value_new = abs(temperature_value);
          }
            
          char temperature_char[4];
          sprintf(temperature_char, "%2.1f", temperature_value_new); 
          String temperature_string = String(temperature_char);
          if(temperature_value > 99.9 || temperature_value < -99.9){
            temperature_string = "nan";
          }

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t temperature_string_height = id(my_display).getTextHeight(temperature_string);
          uint8_t temperature_string_width = id(my_display).getTextWidth(temperature_string);


          int temperature_x = thermometer_top_left_x + thermometer_width + padding;
          int temperature_y = thermometer_top_left_y + thermometer_height * 0.48;

          int minus_sign_x = temperature_x - 15;
          int minus_sign_y = temperature_y;

          if(negative_temperature){
            id(my_display).setCursor(minus_sign_x, minus_sign_y);
            id(my_display).print("-");
          }

          id(my_display).setCursor(temperature_x, temperature_y);
          id(my_display).print(temperature_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String temperature_unit = " C";
          uint8_t temperature_unit_height = id(my_display).getTextHeight(temperature_unit);
          uint8_t temperature_unit_width = id(my_display).getTextWidth(temperature_unit);

          int temperature_unit_x = temperature_x + temperature_string_width / 2;
          int temperature_unit_y = temperature_y + temperature_unit_height + padding;

          id(my_display).setCursor(temperature_unit_x, temperature_unit_y);
          id(my_display).print(temperature_unit);

          //Draw degree symbol
          id(my_display).drawCircle(temperature_unit_x + 1, temperature_unit_y - 7, 2, BLACK);

          // water_drop
          int water_drop_top_left_x = width / 2 + padding;
          int water_drop_top_left_y = thermometer_top_left_y;

          id(my_display).drawXBitmap(water_drop_top_left_x, water_drop_top_left_y, water_drop_bits, water_drop_width, water_drop_height, BLACK);

          char humidity_char[4];
          sprintf(humidity_char, "%2.1f", humidity_value);
          String humidity_string = String(humidity_char);
          if(humidity_value > 99.9 || humidity_value < 0){
            humidity_string = "nan";
          }

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t humidity_string_height = id(my_display).getTextHeight(humidity_string);
          uint8_t humidity_string_width = id(my_display).getTextWidth(humidity_string);

          int humidity_x = water_drop_top_left_x + water_drop_width + padding;
          int humidity_y = temperature_y;

          id(my_display).setCursor(humidity_x, humidity_y);
          id(my_display).print(humidity_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String humidity_unit = "%";
          uint8_t humidity_unit_height = id(my_display).getTextHeight(humidity_unit);
          uint8_t humidity_unit_width = id(my_display).getTextWidth(humidity_unit);

          int humidity_unit_x = humidity_x + humidity_string_width / 2;
          int humidity_unit_y = temperature_unit_y;

          id(my_display).setCursor(humidity_unit_x, humidity_unit_y);
          id(my_display).print(humidity_unit);

          if(temperature_value > temperature_value_last){
            id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - temperature_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(temperature_value < temperature_value_last){
            id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(humidity_value > humidity_value_last){
            id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - humidity_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(humidity_value < humidity_value_last){
            id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          id(my_display).update();
  - id: eink_page_${soil_sensor_device_id}
    parameters:
      temperature_value: float
      temperature_value_last: float
      humidity_value: float
      humidity_value_last: float
      conductivity_value: int
      ph_value: float
      ph_value_last: float
      nitrogen_value: int
      phosphorus_value: int
      potassium_value: int
      salinity_value: int
      tds_value: int
    then:
      - lambda: |-
          int padding = 5;
          int small_padding = 3;
          int top_bottom_left_right_padding = 1;

          id(my_display).landscape();
          id(my_display).clearMemory();
          id(my_display).setTextWrap(false);

          //id(my_display).setTextColor(BLACK);
          //id(my_display).setBackgroundColor(WHITE);
          const uint16_t width  = id(my_display).width();
          const uint16_t height = id(my_display).height();

          id(my_display).setFont(&FreeMonoBold12pt7b);

          String title = "Soil Sensor 1";
          uint8_t title_height = id(my_display).getTextHeight(title);

          int title_y = title_height + top_bottom_left_right_padding;

          id(my_display).setCursor(padding, title_y);
          id(my_display).print("Soil Sensor 1");

          int line_y = title_y + small_padding;

          id(my_display).drawLine(0, line_y, width, line_y, BLACK);

          // Right side of the screen

          char nitrogen_char[5];
          sprintf(nitrogen_char, "%5d", nitrogen_value);
          String nitrogen_string = String(nitrogen_char);
          if (nitrogen_value > 99999 || nitrogen_value < 0) {
            nitrogen_string = "nan";
          }

          char phosphorus_char[5];
          sprintf(phosphorus_char, "%5d", phosphorus_value);
          String phosphorus_string = String(phosphorus_char);
          if (phosphorus_value > 99999 || phosphorus_value < 0) {
            phosphorus_string = "nan";
          }

          char potassium_char[5];
          sprintf(potassium_char, "%5d", potassium_value);
          String potassium_string = String(potassium_char);
          if (potassium_value > 99999 || potassium_value < 0) {
            potassium_string = "nan";
          }

          char conductivity_char[5];
          sprintf(conductivity_char, "%5d", conductivity_value);
          String conductivity_string = String(conductivity_char);
          if (conductivity_value > 99999 || conductivity_value < 0) {
            conductivity_string = "nan";
          }

          char tds_char[5];
          sprintf(tds_char, "%5d", tds_value);
          String tds_string = String(tds_char);
          if (tds_value > 99999 || tds_value < 0) {
            tds_string = "nan";
          }

          char salinity_char[5];
          sprintf(salinity_char, "%5d", salinity_value);
          String salinity_string = String(salinity_char);
          if (salinity_value > 99999 || salinity_value < 0) {
            salinity_string = "nan";
          }

          id(my_display).setFont(&FreeMonoBold9pt7b);


          uint8_t nitrogen_string_height = id(my_display).getTextHeight(nitrogen_string);
          uint8_t phosphorus_string_height = id(my_display).getTextHeight(phosphorus_string);
          uint8_t potassium_string_height = id(my_display).getTextHeight(potassium_string);
          uint8_t conductivity_string_height = id(my_display).getTextHeight(conductivity_string);
          uint8_t tds_string_height = id(my_display).getTextHeight(tds_string);
          uint8_t salinity_string_height = id(my_display).getTextHeight(salinity_string);

          uint8_t max_string_height = max(nitrogen_string_height, max(phosphorus_string_height, max(potassium_string_height, max(conductivity_string_height, max(tds_string_height, salinity_string_height)))));


          uint8_t nitrogen_string_width = id(my_display).getTextWidth(nitrogen_string);
          uint8_t phosphorus_string_width = id(my_display).getTextWidth(phosphorus_string);
          uint8_t potassium_string_width = id(my_display).getTextWidth(potassium_string);
          uint8_t conductivity_string_width = id(my_display).getTextWidth(conductivity_string);
          uint8_t tds_string_width = id(my_display).getTextWidth(tds_string);
          uint8_t salinity_string_width = id(my_display).getTextWidth(salinity_string);

          uint8_t max_string_width = max(nitrogen_string_width, max(phosphorus_string_width, max(potassium_string_width, max(conductivity_string_width, max(tds_string_width, salinity_string_width)))));

          id(my_display).setFont(&FreeMono9pt7b);

          String nitrogen_label = "N";
          String phosphorus_label = "P";
          String potassium_label = "K";
          String conductivity_label = "EC";
          String tds_label = "TDS";
          String salinity_label = "Sal";

          uint8_t nitrogen_label_height = id(my_display).getTextHeight(nitrogen_label);
          uint8_t phosphorus_label_height = id(my_display).getTextHeight(phosphorus_label);
          uint8_t potassium_label_height = id(my_display).getTextHeight(potassium_label);
          uint8_t conductivity_label_height = id(my_display).getTextHeight(conductivity_label);
          uint8_t tds_label_height = id(my_display).getTextHeight(tds_label);
          uint8_t salinity_label_height = id(my_display).getTextHeight(salinity_label);

          uint8_t nitrogen_label_width = id(my_display).getTextWidth(nitrogen_label);
          uint8_t phosphorus_label_width = id(my_display).getTextWidth(phosphorus_label);
          uint8_t potassium_label_width = id(my_display).getTextWidth(potassium_label);
          uint8_t conductivity_label_width = id(my_display).getTextWidth(conductivity_label);
          uint8_t tds_label_width = id(my_display).getTextWidth(tds_label);
          uint8_t salinity_label_width = id(my_display).getTextWidth(salinity_label);

          uint8_t max_label_height = max(nitrogen_label_height, max(phosphorus_label_height, max(potassium_label_height, max(conductivity_label_height, max(tds_label_height, salinity_label_height)))));
          uint8_t max_label_width = max(nitrogen_label_width, max(phosphorus_label_width, max(potassium_label_width, max(conductivity_label_width, max(tds_label_width, salinity_label_width)))));

          id(my_display).setFont(&Picopixel);

          String chemical_element_unit = "mg/kg";
          String tds_and_salinity_unit = "mg/L";
          String conductivity_unit = "uS/cm";

          uint8_t chemical_element_unit_height = id(my_display).getTextHeight(chemical_element_unit);
          uint8_t chemical_element_unit_width = id(my_display).getTextWidth(chemical_element_unit);

          uint8_t tds_and_salinity_unit_height = id(my_display).getTextHeight(tds_and_salinity_unit);
          uint8_t tds_and_salinity_unit_width = id(my_display).getTextWidth(tds_and_salinity_unit);

          uint8_t conductivity_unit_height = id(my_display).getTextHeight(conductivity_unit);
          uint8_t conductivity_unit_width = id(my_display).getTextWidth(conductivity_unit);

          uint8_t max_unit_height = max(chemical_element_unit_height, max(tds_and_salinity_unit_height, conductivity_unit_height));
          uint8_t max_unit_width = max(chemical_element_unit_width, max(tds_and_salinity_unit_width, conductivity_unit_width));

          // int label_x = 0; //top_bottom_left_right_padding;
          // int string_x = label_x + max_label_width + padding;
          // int unit_x = string_x + max_string_width + padding;

          int unit_x = width - max_unit_width; //- top_bottom_left_right_padding;
          int string_x = unit_x - max_string_width - padding;
          int label_x = string_x - max_label_width - padding;

          int salinity_y = height - top_bottom_left_right_padding;
          int tds_y = salinity_y - max_string_height - padding;
          int conductivity_y = tds_y - max_string_height - padding;
          int potassium_y = conductivity_y - max_string_height - padding;
          int phosphorus_y = potassium_y - max_string_height - padding;
          int nitrogen_y = phosphorus_y - max_string_height - padding;

          id(my_display).setFont(&Picopixel);

          id(my_display).setCursor(unit_x, potassium_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, phosphorus_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, nitrogen_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, conductivity_y - max_string_height/2 + conductivity_unit_height/2);
          id(my_display).print(conductivity_unit);

          id(my_display).setCursor(unit_x, tds_y - max_string_height/2 + tds_and_salinity_unit_height/2);
          id(my_display).print(tds_and_salinity_unit);

          id(my_display).setCursor(unit_x, salinity_y - max_string_height/2 + tds_and_salinity_unit_height/2);
          id(my_display).print(tds_and_salinity_unit);

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(label_x+(max_label_width/2 - potassium_label_width/2), potassium_y);
          id(my_display).print(potassium_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - phosphorus_label_width/2), phosphorus_y);
          id(my_display).print(phosphorus_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - nitrogen_label_width/2), nitrogen_y);
          id(my_display).print(nitrogen_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - conductivity_label_width/2), conductivity_y);
          id(my_display).print(conductivity_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - tds_label_width/2), tds_y);
          id(my_display).print(tds_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - salinity_label_width/2), salinity_y);
          id(my_display).print(salinity_label);

          id(my_display).setFont(&FreeMonoBold9pt7b);

          id(my_display).setCursor(string_x, potassium_y);
          id(my_display).print(potassium_string);

          id(my_display).setCursor(string_x, phosphorus_y);
          id(my_display).print(phosphorus_string);

          id(my_display).setCursor(string_x, nitrogen_y);
          id(my_display).print(nitrogen_string);

          id(my_display).setCursor(string_x, conductivity_y);
          id(my_display).print(conductivity_string);

          id(my_display).setCursor(string_x, tds_y);
          id(my_display).print(tds_string);

          id(my_display).setCursor(string_x, salinity_y);
          id(my_display).print(salinity_string);


          int right_side_x = label_x;
          // Right side of the screen
          char ph_char[4];
          sprintf(ph_char, "%2.1f", ph_value);
          String ph_string = String(ph_char);
          if (ph_value > 14 || ph_value < 0) {
            ph_string = "nan";
          }

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t ph_string_height = id(my_display).getTextHeight(ph_string);
          uint8_t ph_string_width = id(my_display).getTextWidth(ph_string);

          String ph_label = "pH";

          id(my_display).setFont(&FreeMono9pt7b);

          uint8_t ph_label_height = id(my_display).getTextHeight(ph_label);
          uint8_t ph_label_width = id(my_display).getTextWidth(ph_label);

          int ph_width = ph_string_width + 3 * padding + ph_label_width;

          int ph_string_x = right_side_x/2 - ph_width/2;
          int ph_label_x = ph_string_x + ph_string_width + 3*padding;

          int ph_y = height - top_bottom_left_right_padding - ph_string_height/2;

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(ph_label_x, ph_y - ph_string_height/2 + ph_label_height/2);
          id(my_display).print(ph_label);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(ph_string_x, ph_y);
          id(my_display).print(ph_string);

          // Right-Top part of the screen
          int thermometer_small_top_left_y = line_y + padding + 3;
          int thermometer_small_top_left_x = padding;

          // First draw a small thermometer in the background, top centre
          id(my_display).drawXBitmap(thermometer_small_top_left_x, thermometer_small_top_left_y, thermometer_small_bits, thermometer_small_width, thermometer_small_height, BLACK);

          bool negative_temperature = false;

          float temperature_value_new = temperature_value;
          if(temperature_value < 0){
          negative_temperature = true;
          temperature_value_new = abs(temperature_value);
          }

          char temperature_char[4];
          sprintf(temperature_char, "%2.1f", temperature_value_new); 
          String temperature_string = String(temperature_char);
          if (temperature_value > 99.9 || temperature_value < -99.9) {
          temperature_string = "nan";
          }

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t temperature_string_height = id(my_display).getTextHeight(temperature_string);
          uint8_t temperature_string_width = id(my_display).getTextWidth(temperature_string);

          int temperature_x = thermometer_small_top_left_x + thermometer_small_width + padding;
          int temperature_y = thermometer_small_top_left_y + thermometer_small_height/2 + temperature_string_height/2;

          int minus_sign_x = temperature_x - 12;
          int minus_sign_y = temperature_y-2;

          if(negative_temperature){
          id(my_display).setFont(&FreeMonoBold9pt7b);
          id(my_display).setCursor(minus_sign_x, minus_sign_y);
          id(my_display).print("-");
          }

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(temperature_x, temperature_y);
          id(my_display).print(temperature_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String temperature_unit = " C";
          uint8_t temperature_unit_height = id(my_display).getTextHeight(temperature_unit);
          uint8_t temperature_unit_width = id(my_display).getTextWidth(temperature_unit);

          int temperature_unit_x = temperature_x + temperature_string_width + 3*padding;
          int temperature_unit_y = temperature_y - temperature_string_height/2 + temperature_unit_height/2;

          id(my_display).setCursor(temperature_unit_x, temperature_unit_y);
          id(my_display).print(temperature_unit);

          //Draw degree symbol
          id(my_display).drawCircle(temperature_unit_x + 1, temperature_unit_y - 7, 2, BLACK);

          // water_drop_small
          int water_drop_small_top_left_x = thermometer_small_top_left_x;
          int water_drop_small_top_left_y = thermometer_small_top_left_y + thermometer_small_height + padding;

          id(my_display).drawXBitmap(water_drop_small_top_left_x, water_drop_small_top_left_y, water_drop_small_bits, water_drop_small_width, water_drop_small_height, BLACK);

          char humidity_char[4];
          sprintf(humidity_char, "%2.1f", humidity_value);
          String humidity_string = String(humidity_char);
          if (humidity_value > 100 || humidity_value < 0) {
          humidity_string = "nan";
          }

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t humidity_string_height = id(my_display).getTextHeight(humidity_string);
          uint8_t humidity_string_width = id(my_display).getTextWidth(humidity_string);

          int humidity_x = temperature_x;
          int humidity_y = water_drop_small_top_left_y + water_drop_small_height/2 + humidity_string_height/2;

          id(my_display).setCursor(humidity_x, humidity_y);
          id(my_display).print(humidity_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String humidity_unit = "%";
          uint8_t humidity_unit_height = id(my_display).getTextHeight(humidity_unit);
          uint8_t humidity_unit_width = id(my_display).getTextWidth(humidity_unit);

          int humidity_unit_x = humidity_x + humidity_string_width + 3*padding;
          int humidity_unit_y = humidity_y - humidity_string_height/2 + humidity_unit_height/2;

          id(my_display).setCursor(humidity_unit_x, humidity_unit_y);
          id(my_display).print(humidity_unit);

          //Draw line between the two parts
          //id(my_display).drawLine(right_side_x-padding, line_y,  right_side_x-padding, height, BLACK);


          if(temperature_value > temperature_value_last){
          id(my_display).drawXBitmap(temperature_x + temperature_string_width+ + padding, temperature_y - temperature_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(temperature_value < temperature_value_last){
          id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(humidity_value > humidity_value_last){
          id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - humidity_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(humidity_value < humidity_value_last){
          id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(ph_value > ph_value_last){
          id(my_display).drawXBitmap(ph_string_x + ph_string_width + padding, ph_y - ph_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(ph_value < ph_value_last){
          id(my_display).drawXBitmap(ph_string_x + ph_string_width + padding, ph_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          id(my_display).update();
  - id: eink_page_${spectral_sensor_device_id}
    parameters:
      f1_value: float
      f2_value: float
      fz_value: float
      f3_value: float
      f4_value: float
      fy_value: float
      f5_value: float
      fxl_value: float
      f6_value: float
      f7_value: float
      f8_value: float
      nir_value: float
      irradiance_value: float
      par_value: float
      ppfd_value: float
      lux_value: float
      cct_value: float

    then:
      - lambda: |-
          int big_padding = 7;
          int padding = 5;
          int small_padding = 3;
          int top_bottom_left_right_padding = 1;

          ESP_LOGI("main", "Displaying spectral sensor data");
          ESP_LOGI("main", "f1_value: %f", f1_value);
          ESP_LOGI("main", "f2_value: %f", f2_value);
          ESP_LOGI("main", "fz_value: %f", fz_value);
          ESP_LOGI("main", "f3_value: %f", f3_value);
          ESP_LOGI("main", "f4_value: %f", f4_value);
          ESP_LOGI("main", "fy_value: %f", fy_value);
          ESP_LOGI("main", "f5_value: %f", f5_value);
          ESP_LOGI("main", "fxl_value: %f", fxl_value);
          ESP_LOGI("main", "f6_value: %f", f6_value);
          ESP_LOGI("main", "f7_value: %f", f7_value);
          ESP_LOGI("main", "f8_value: %f", f8_value);
          ESP_LOGI("main", "nir_value: %f", nir_value);
          ESP_LOGI("main", "irradiance_value: %f", irradiance_value);
          ESP_LOGI("main", "par_value: %f", par_value);
          ESP_LOGI("main", "ppfd_value: %f", ppfd_value);
          ESP_LOGI("main", "lux_value: %f", lux_value);
          ESP_LOGI("main", "cct_value: %f", cct_value);


          id(my_display).landscape();
          id(my_display).clearMemory();
          id(my_display).setTextWrap(false);

          //id(my_display).setTextColor(BLACK);
          //id(my_display).setBackgroundColor(WHITE);
          const uint16_t width  = id(my_display).width();
          const uint16_t height = id(my_display).height();

          id(my_display).setFont(&FreeMonoBold9pt7b);

          String title = "Spectral Sensor ${spectral_sensor_device_id}";
          uint8_t title_height = id(my_display).getTextHeight(title);

          int title_y = title_height + top_bottom_left_right_padding;

          id(my_display).setCursor(padding, title_y);
          id(my_display).print(title);

          int line_y = title_y + small_padding;

          id(my_display).drawLine(0, line_y, width, line_y, BLACK);

          // Left side of the screen
          auto format_value = [](float value) -> String {
            if (value > 99999 || value < 0 || isnan(value)) {
              return "nan";
            } else if (value >= 10000) {
              char buf[10];
              sprintf(buf, "%5.0f", value);
              return String(buf);
            } else if (value >= 1000) {
              char buf[10];
              sprintf(buf, "%4.1f", value);
              return String(buf);
            } else if (value >= 100) {
              char buf[10];
              sprintf(buf, "%3.2f", value);
              return String(buf);
            } else if (value >= 10) {
              char buf[10];
              sprintf(buf, "%2.3f", value);
              return String(buf);
            } else {
              char buf[10];
              sprintf(buf, "%1.4f", value);
              return String(buf);
            }
          };

          String irradiance_string = format_value(irradiance_value);

          String par_string = format_value(par_value);

          String ppfd_string = format_value(ppfd_value);

          String lux_string = format_value(lux_value);


          char cct_char[10];
          sprintf(cct_char, "%5.0f", cct_value); // CCT typically displayed as an integer
          String cct_string = String(cct_char);
          if (cct_value > 99999 || cct_value < 0 || isnan(cct_value)) {
            cct_string = "nan";
          }

          id(my_display).setFont(&FreeMonoBold9pt7b);

          uint8_t irradiance_string_height = id(my_display).getTextHeight(irradiance_string);
          uint8_t par_string_height = id(my_display).getTextHeight(par_string);
          uint8_t ppfd_string_height = id(my_display).getTextHeight(ppfd_string);
          uint8_t lux_string_height = id(my_display).getTextHeight(lux_string);
          uint8_t cct_string_height = id(my_display).getTextHeight(cct_string);

          uint8_t max_string_height = max(irradiance_string_height, max(par_string_height, max(ppfd_string_height, max(lux_string_height, cct_string_height))));

          uint8_t irradiance_string_width = id(my_display).getTextWidth(irradiance_string);
          uint8_t par_string_width = id(my_display).getTextWidth(par_string);
          uint8_t ppfd_string_width = id(my_display).getTextWidth(ppfd_string);
          uint8_t lux_string_width = id(my_display).getTextWidth(lux_string);
          uint8_t cct_string_width = id(my_display).getTextWidth(cct_string);

          uint8_t max_string_width = max(irradiance_string_width, max(par_string_width, max(ppfd_string_width, max(lux_string_width, cct_string_width))));

          id(my_display).setFont(&FreeMono9pt7b);

          String irradiance_label = "Irr";
          String par_label = "PAR";
          String ppfd_label = "PPFD";
          String lux_label = "Lux";
          String cct_label = "CCT";

          uint8_t irradiance_label_width = id(my_display).getTextWidth(irradiance_label);
          uint8_t par_label_width = id(my_display).getTextWidth(par_label);
          uint8_t ppfd_label_width = id(my_display).getTextWidth(ppfd_label);
          uint8_t lux_label_width = id(my_display).getTextWidth(lux_label);
          uint8_t cct_label_width = id(my_display).getTextWidth(cct_label);

          uint8_t max_label_width = max(irradiance_label_width, max(par_label_width, max(ppfd_label_width, max(lux_label_width, cct_label_width))));

          id(my_display).setFont(&Picopixel);

          String irradiance_unit = "W/m2";
          String par_unit = "W/m2";
          String ppfd_unit = "Î¼mol/\nsm2";
          String lux_unit = "lx";
          String cct_unit = "K";

          uint8_t irradiance_unit_width = id(my_display).getTextWidth(irradiance_unit);
          uint8_t par_unit_width = id(my_display).getTextWidth(par_unit);
          uint8_t ppfd_unit_width = id(my_display).getTextWidth(ppfd_unit);
          uint8_t lux_unit_width = id(my_display).getTextWidth(lux_unit);
          uint8_t cct_unit_width = id(my_display).getTextWidth(cct_unit);

          uint8_t max_unit_width = max(irradiance_unit_width, max(par_unit_width, max(ppfd_unit_width, max(lux_unit_width, cct_unit_width))));

          int label_x = 0; //top_bottom_left_right_padding;
          int string_x = label_x + max_label_width + big_padding;
          int unit_x = string_x + max_string_width + big_padding;

          int space_left = height - line_y;

          int ppfd_y = line_y + space_left / 2 + max_string_height / 2;
          int par_y = ppfd_y - max_string_height - big_padding;
          int irradiance_y = par_y - max_string_height - big_padding;
          int lux_y = ppfd_y + max_string_height + big_padding;
          int cct_y = lux_y + max_string_height + big_padding;

          // Printing units
          id(my_display).setCursor(unit_x, irradiance_y - irradiance_string_height / 2 + id(my_display).getTextHeight(irradiance_unit) / 2);
          id(my_display).print(irradiance_unit);

          id(my_display).setCursor(unit_x, par_y - par_string_height / 2 + id(my_display).getTextHeight(par_unit) / 2);
          id(my_display).print(par_unit);

          id(my_display).setCursor(unit_x, ppfd_y - ppfd_string_height + id(my_display).getTextHeight(ppfd_unit)/2 - 1 );
          id(my_display).print(ppfd_unit);

          id(my_display).setCursor(unit_x, lux_y - lux_string_height / 2 + id(my_display).getTextHeight(lux_unit) / 2);
          id(my_display).print(lux_unit);

          id(my_display).setCursor(unit_x, cct_y - cct_string_height / 2 + id(my_display).getTextHeight(cct_unit) / 2);
          id(my_display).print(cct_unit);

          // Printing labels
          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(label_x, irradiance_y);
          id(my_display).print(irradiance_label);

          id(my_display).setCursor(label_x, par_y);
          id(my_display).print(par_label);

          id(my_display).setCursor(label_x, ppfd_y);
          id(my_display).print(ppfd_label);

          id(my_display).setCursor(label_x, lux_y);
          id(my_display).print(lux_label);

          id(my_display).setCursor(label_x, cct_y);
          id(my_display).print(cct_label);

          // Printing strings
          id(my_display).setFont(&FreeMonoBold9pt7b);

          id(my_display).setCursor(string_x + max_string_width/2 - irradiance_string_width/2, irradiance_y);
          id(my_display).print(irradiance_string);

          id(my_display).setCursor(string_x + max_string_width/2 - par_string_width/2, par_y);
          id(my_display).print(par_string);

          id(my_display).setCursor(string_x + max_string_width/2 - ppfd_string_width/2, ppfd_y);
          id(my_display).print(ppfd_string);

          id(my_display).setCursor(string_x + max_string_width/2 - lux_string_width/2, lux_y);
          id(my_display).print(lux_string);

          id(my_display).setCursor(string_x + max_string_width/2 - cct_string_width/2, cct_y);
          id(my_display).print(cct_string);

          // Bar chart on the right side of the screen

          id(my_display).setFont(&kongtext5pt7b);
          String number_label = "405";
          int number_label_width = id(my_display).getTextWidth(number_label);
          int number_label_height = id(my_display).getTextHeight(number_label);

          int text_x = unit_x + max_unit_width + big_padding;
          int text_y = line_y + padding + number_label_height;

          int max_bar_width = width - text_x - number_label_width - padding;

          int bar_x = text_x + number_label_width + padding;

          int bar_height = number_label_height;

          auto draw_bar = [&](float value, const char* label) {
              int bar_y = text_y - number_label_height / 2 - bar_height / 2;
              if (value < 0 || isnan(value)) {
                  value = 0;
              } else if (value > 100) {
                  value = 100;
              }

              // Calculate the width of the filled bar
              int bar_width = (value / 100.0) * max_bar_width;

              // Draw the bar outline
              id(my_display).drawRect(bar_x, bar_y, max_bar_width, bar_height, BLACK);

              // Draw the chessboard pattern
              int square_size = 1;  // Size of each "square" in the chessboard
              for (int x = 0; x < bar_width; x += square_size) {
                  for (int y = 0; y < bar_height; y += square_size) {
                      // Alternate between black and white based on position
                      if (((x / square_size) + (y / square_size)) % 2 == 0) {
                          id(my_display).fillRect(bar_x + x, bar_y + y, square_size, square_size, BLACK);
                      }
                  }
              }

              // Print the label next to the bar
              id(my_display).setFont(&kongtext5pt7b);
              id(my_display).setCursor(text_x, text_y);
              id(my_display).print(label);

              // Print percentage value in the middle of the bar
              id(my_display).setFont(&Picopixel);
              char value_char[10];
              sprintf(value_char, "%3.0f", value);
              String value_string = String(value_char);

              int value_string_width = id(my_display).getTextWidth(value_string);
              int value_string_height = id(my_display).getTextHeight(value_string);

              int value_x = bar_x + max_bar_width / 2 - value_string_width / 2;
              int value_y = bar_y + bar_height / 2 + value_string_height / 2;

              // Draw white rectangle over the chessboard pattern to make the text more readable
              id(my_display).fillRect(value_x - 1, value_y - value_string_height + 1, value_string_width + 2, value_string_height, WHITE);
              
              id(my_display).setCursor(value_x, value_y);
              id(my_display).print(value_string);
              
              // Move to the next row
              text_y += number_label_height + 1;
            };

            draw_bar(f1_value, "405");
            draw_bar(f2_value, "425");
            draw_bar(fz_value, "450");
            draw_bar(f3_value, "475");
            draw_bar(f4_value, "515");
            draw_bar(fy_value, "555");
            draw_bar(f5_value, "550");
            draw_bar(fxl_value, "600");
            draw_bar(f6_value, "640");
            draw_bar(f7_value, "690");
            draw_bar(f8_value, "745");
            draw_bar(nir_value, "855");

          id(my_display).update();

  - id: update_last_values_${air_sensor_device_id}
    then:
      - lambda: |-
          id(eCO2_last_${air_sensor_device_id}).publish_state(id(ccs_eco2_${air_sensor_device_id}).state);
          id(TVOC_last_${air_sensor_device_id}).publish_state(id(ccs_tvoc_${air_sensor_device_id}).state);
          id(bmp_press_last_${air_sensor_device_id}).publish_state(id(bmp_press_${air_sensor_device_id}).state);
          id(bmp_temp_last_${air_sensor_device_id}).publish_state(id(bmp_temp_${air_sensor_device_id}).state);
          id(si_temp_last_${air_sensor_device_id}).publish_state(id(si_temp_${air_sensor_device_id}).state);
          id(si_hum_last_${air_sensor_device_id}).publish_state(id(si_hum_${air_sensor_device_id}).state);

  - id: update_last_values_${soil_sensor_device_id}
    then:
      - lambda: |-
          id(temperature_last_${soil_sensor_device_id}).publish_state(id(temperature_${soil_sensor_device_id}).state);
          id(humidity_last_${soil_sensor_device_id}).publish_state(id(humidity_${soil_sensor_device_id}).state);
          id(ph_last_${soil_sensor_device_id}).publish_state(id(ph_${soil_sensor_device_id}).state);
