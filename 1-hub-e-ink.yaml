esphome:
  name: esp32-hub-e-ink
  platformio_options:
    platform: https://github.com/lucaskatayama/platform-espressif32.git#feat/seeed_xiao_esp32c6.json
  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp
    - components/XBitMaps/sprites.h

  on_boot:
    priority: -10000
    then:
      - lambda: |-
          for (int i = 0; i < 8; i++) {
            if(id(peer_addresses)[i] != 0){
              id(espnow_component)->add_peer(id(peer_addresses)[i]);
            }
          }

spi:

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

logger:
  baud_rate: 115200
  level: DEBUG

substitutions:
  spectral_sensor_device_id: '22'
  soil_sensor_device_id: '33'
  air_sensor_device_id: '44'

web_server:
  port: 80
  auth:
    username: !secret web_username
    password: !secret web_password
  version: 3
  sorting_groups:
    - id: sg_readings_${spectral_sensor_device_id}
      name: 'Spectral Readings'
      sorting_weight: 10

    - id: sg_settings_${spectral_sensor_device_id}
      name: 'Spectral Settings'
      sorting_weight: 11

    - id: sg_readings_${soil_sensor_device_id}
      name: 'Soil Readings'
      sorting_weight: 12

    - id: sg_settings_${soil_sensor_device_id}
      name: 'Soil Settings'
      sorting_weight: 13

    - id: sg_readings_${air_sensor_device_id}
      name: 'Air Readings'
      sorting_weight: 14

    - id: sg_settings_${air_sensor_device_id}
      name: 'Air Settings'
      sorting_weight: 15

wifi:
  ssid: !secret WiFi_ssid # WiFi SSID from secrets.yaml
  password: !secret WiFi_password # WiFi password from secrets.yaml
  power_save_mode: none

# ota:
#   - platform: esphome
#     password: !secret OTA_password # OTA password from secrets.yaml

vision_master:
  id: my_display

external_components:
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: d23346165e1baefd337ed805d3a211e5bead53af
    refresh: 1min
    components: [espnow]

  - source: components
    components:
      - vision_master
    refresh: 1min

globals:
  - id: peer_addresses
    type: uint64_t[8]
    initial_value: '{0, 0, 0, 0, 0, 0, 0, 0}'
    restore_value: yes
  - id: peer_names
    type: uint8_t[8]
    initial_value: '{0, 0, 0, 0, 0, 0, 0, 0}'
    restore_value: yes

sensor:
  - platform: template
    name: '405nm ${spectral_sensor_device_id}'
    id: f1_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: '425nm ${spectral_sensor_device_id}'
    id: f2_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: '450nm ${spectral_sensor_device_id}'
    id: fz_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: '475nm ${spectral_sensor_device_id}'
    id: f3_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 4

  - platform: template
    name: '515nm ${spectral_sensor_device_id}'
    id: f4_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 5

  - platform: template
    name: '555nm ${spectral_sensor_device_id}'
    id: fy_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: '550nm ${spectral_sensor_device_id}'
    id: f5_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 7

  - platform: template
    name: '600nm ${spectral_sensor_device_id}'
    id: fxl_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 8

  - platform: template
    name: '640nm ${spectral_sensor_device_id}'
    id: f6_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 9

  - platform: template
    name: '690nm ${spectral_sensor_device_id}'
    id: f7_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 10

  - platform: template
    name: '745nm ${spectral_sensor_device_id}'
    id: f8_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 11

  - platform: template
    name: 'NIR ${spectral_sensor_device_id}'
    id: nir_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 12

  - platform: template
    name: 'Clear ${spectral_sensor_device_id}'
    id: clear_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 13

  - platform: template
    name: 'Irradiance ${spectral_sensor_device_id}'
    id: irradiance_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'W/m²'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 14

  - platform: template
    name: 'Irradiance Photopic ${spectral_sensor_device_id}'
    id: irradiance_photopic_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'lm/m²'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 15

  - platform: template
    name: 'PFFD ${spectral_sensor_device_id}'
    id: pffd_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'µmol/m²/s'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 16

  - platform: template
    name: 'Saturation ${spectral_sensor_device_id}'
    id: saturation_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: '%'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 17

  - platform: template
    name: 'Color Temperature ${spectral_sensor_device_id}'
    id: color_temperature_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'K'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 18

  - platform: template
    name: 'PAR ${spectral_sensor_device_id}'
    id: par_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'µmol/m²/s'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 19

  - platform: template
    name: 'Lux ${spectral_sensor_device_id}'
    id: lux_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'lx'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 20

  - platform: template
    name: 'Lux2 ${spectral_sensor_device_id}'
    id: lux2_${spectral_sensor_device_id}
    update_interval: never
    accuracy_decimals: 6
    unit_of_measurement: 'lx'
    filters:
      - multiply: 0.000001
    web_server:
      sorting_group_id: sg_readings_${spectral_sensor_device_id}
      sorting_weight: 21

  - platform: template
    name: 'Humidity ${soil_sensor_device_id}'
    id: 'humidity_${soil_sensor_device_id}'
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: '%RH'
    device_class: humidity
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 1
    filters:
      - multiply: 0.1

  - platform: template
    name: 'Temperature ${soil_sensor_device_id}'
    id: temperature_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: '°C'
    device_class: temperature
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 2
    filters:
      - multiply: 0.1

  - platform: template
    name: 'Conductivity_${soil_sensor_device_id}'
    id: conductivity_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: 'µS/cm'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'pH_${soil_sensor_device_id}'
    id: ph_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: 'pH'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 4
    filters:
      - multiply: 0.1

  - platform: template
    name: 'Nitrogen_${soil_sensor_device_id}'
    id: nitrogen_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/kg'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 5

  - platform: template
    name: 'Phosphorus_${soil_sensor_device_id}'
    id: phosphorus_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/kg'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: 'Potassium_${soil_sensor_device_id}'
    id: potassium_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/kg'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 7

  - platform: template
    name: 'Salinity_${soil_sensor_device_id}'
    id: salinity_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/L'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 8

  - platform: template
    name: 'TDS_${soil_sensor_device_id}'
    id: tds_${soil_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'mg/L'
    web_server:
      sorting_group_id: sg_readings_${soil_sensor_device_id}
      sorting_weight: 9

  - platform: template
    name: 'BMP Temperature ${air_sensor_device_id}'
    id: bmp_temp_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '°C'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: 'BMP Pressure ${air_sensor_device_id}'
    id: bmp_press_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: 'hPa'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: 'SI Temperature ${air_sensor_device_id}'
    id: si_temp_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '°C'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'SI Humidity ${air_sensor_device_id}'
    id: si_hum_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 5
    unit_of_measurement: '%'
    filters:
      - multiply: 0.00001
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 4

  - platform: template
    name: 'CCS eCO2 ${air_sensor_device_id}'
    id: ccs_eco2_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'ppm'
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 5

  - platform: template
    name: 'CCS TVOC ${air_sensor_device_id}'
    id: ccs_tvoc_${air_sensor_device_id}
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: 'ppb'
    web_server:
      sorting_group_id: sg_readings_${air_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: 'Last BMP Temperature ${air_sensor_device_id}'
    id: bmp_temp_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last BMP Pressure ${air_sensor_device_id}'
    id: bmp_press_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last SI Temperature ${air_sensor_device_id}'
    id: si_temp_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last SI Humidity ${air_sensor_device_id}'
    id: si_hum_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last CCS eCO2 ${air_sensor_device_id}'
    id: eCO2_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last CCS TVOC ${air_sensor_device_id}'
    id: TVOC_last_${air_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last Temperature ${soil_sensor_device_id}'
    id: temperature_last_${soil_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last Humidity ${soil_sensor_device_id}'
    id: humidity_last_${soil_sensor_device_id}
    update_interval: never
    internal: true

  - platform: template
    name: 'Last pH ${soil_sensor_device_id}'
    id: ph_last_${soil_sensor_device_id}
    update_interval: never
    internal: true

number:
  - platform: template
    name: 'ATime'
    id: atime_${spectral_sensor_device_id}
    min_value: 0.0
    max_value: 255
    step: 1.0
    optimistic: true
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: 'AStep'
    id: astep_${spectral_sensor_device_id}
    min_value: 0.0
    max_value: 65534
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'Gain'
    id: gain_${spectral_sensor_device_id}
    min_value: 0.0
    max_value: 12.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 4

  - platform: template
    name: 'Conductivity Factor ${soil_sensor_device_id}'
    id: cond_f_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: 'Salinity Factor ${soil_sensor_device_id}'
    id: sal_f_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'TDS Factor ${soil_sensor_device_id}'
    id: tds_f_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 4

  - platform: template
    name: 'Temperature Offset ${soil_sensor_device_id}'
    id: temp_offset_${soil_sensor_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 5

  - platform: template
    name: 'Humidity Offset ${soil_sensor_device_id}'
    id: hum_offset_${soil_sensor_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: 'Conductivity Offset ${soil_sensor_device_id}'
    id: cond_offset_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 7

  - platform: template
    name: 'pH Offset ${soil_sensor_device_id}'
    id: ph_offset_${soil_sensor_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 8

  - platform: template
    name: 'Nitrogen Factor High ${soil_sensor_device_id}'
    id: n_f_high_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 9

  - platform: template
    name: 'Nitrogen Factor Low ${soil_sensor_device_id}'
    id: n_f_low_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 10

  - platform: template
    name: 'Nitrogen Offset ${soil_sensor_device_id}'
    id: n_offset_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 11

  - platform: template
    name: 'Phosphorus Factor High ${soil_sensor_device_id}'
    id: p_f_high_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 12

  - platform: template
    name: 'Phosphorus Factor Low ${soil_sensor_device_id}'
    id: p_f_low_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 13

  - platform: template
    name: 'Phosphorus Offset ${soil_sensor_device_id}'
    id: p_offset_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 14

  - platform: template
    name: 'Potassium Factor High ${soil_sensor_device_id}'
    id: k_f_high_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 15

  - platform: template
    name: 'Potassium Factor Low ${soil_sensor_device_id}'
    id: k_f_low_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 16

  - platform: template
    name: 'Potassium Offset ${soil_sensor_device_id}'
    id: k_offset_${soil_sensor_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 17

  - platform: template
    name: 'BMP Temperature Oversampling ${air_sensor_device_id}'
    id: temp_index_${air_sensor_device_id}
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 2

  - platform: template
    name: 'BMP Pressure Oversampling ${air_sensor_device_id}'
    id: press_index_${air_sensor_device_id}
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 3

  - platform: template
    name: 'IIR Filter ${air_sensor_device_id}'
    id: iir_index_${air_sensor_device_id}
    min_value: 0.0
    max_value: 4.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 4
button:
  - platform: factory_reset
    name: Restart with Factory Default Settings
    entity_category: config

  - platform: template
    name: 'Ping Devices'
    entity_category: config
    on_press:
      then:
        #- script.execute: beReadyToReceiveMessage
        - espnow.broadcast:
            payload: 'ping'

  - platform: template
    name: 'Peers list'
    entity_category: config
    on_press:
      then:
        - lambda: |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_addresses)[i] != 0) {
                    ESP_LOGI("main", "Index %d Peer: 0x%12llx Name: %d",i, id(peer_addresses)[i], id(peer_names)[i]);
                }
            }

  - platform: template
    name: 'Get cal. data ${spectral_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        #- script.execute: beReadyToReceiveMessage
        - script.execute:
            id: requestCalResponse
            device_id: ${spectral_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: 'Send cal. data ${spectral_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        #- script.execute: beReadyToReceiveMessage
        - script.execute: send_calibration_data_${spectral_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 6

  - platform: template
    name: 'Get cal. data ${soil_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        - script.execute:
            id: requestCalResponse
            device_id: ${soil_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: 'Send cal. data ${soil_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        - script.execute: send_calibration_data_${soil_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${soil_sensor_device_id}
      sorting_weight: 18

  - platform: template
    name: 'Get cal. data ${air_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        - script.execute:
            id: requestCalResponse
            device_id: ${air_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 1

  - platform: template
    name: 'Send cal. data ${air_sensor_device_id}'
    entity_category: config
    on_press:
      then:
        - script.execute: send_calibration_data_${air_sensor_device_id}
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 6
switch:
  - platform: template
    name: 'Write cal. dat to flash ${spectral_sensor_device_id}'
    id: flash_${spectral_sensor_device_id}
    restore_mode: ALWAYS_OFF # Start in the OFF state
    optimistic: true # Optional: update state immediately
    web_server:
      sorting_group_id: sg_settings_${spectral_sensor_device_id}
      sorting_weight: 5
  - platform: template
    name: 'Write cal. dat to flash ${air_sensor_device_id}'
    id: flash_${air_sensor_device_id}
    restore_mode: ALWAYS_OFF # Start in the OFF state
    optimistic: true # Optional: update state immediately
    web_server:
      sorting_group_id: sg_settings_${air_sensor_device_id}
      sorting_weight: 5

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO21
      inverted: true
    name: 'Internal Button'
    on_press:
      then:
        # - script.execute:
        #     id: eink_page_${air_sensor_device_id}
        #     eCO2_value: !lambda return id(ccs_eco2_${air_sensor_device_id}).state;
        #     TVOC_value: !lambda return id(ccs_tvoc_${air_sensor_device_id}).state;
        #     pressure_value: !lambda return id(bmp_press_${air_sensor_device_id}).state;
        #     temperature_value: !lambda return id(si_temp_${air_sensor_device_id}).state;
        #     humidity_value: !lambda return id(si_hum_${air_sensor_device_id}).state;
        #     eCO2_value_last: !lambda return id(eCO2_last_${air_sensor_device_id}).state;
        #     TVOC_value_last: !lambda return id(TVOC_last_${air_sensor_device_id}).state;
        #     pressure_value_last: !lambda return id(bmp_press_last_${air_sensor_device_id}).state;
        #     temperature_value_last: !lambda return id(si_temp_last_${air_sensor_device_id}).state;
        #     humidity_value_last: !lambda return id(si_hum_last_${air_sensor_device_id}).state;
        # - script.execute: update_last_values_${air_sensor_device_id}
        - script.execute:
            id: eink_page_${soil_sensor_device_id}
            temperature_value: !lambda return id(temperature_${soil_sensor_device_id}).state;
            humidity_value: !lambda return id(humidity_${soil_sensor_device_id}).state;
            conductivity_value: !lambda return id(conductivity_${soil_sensor_device_id}).state;
            ph_value: !lambda return id(ph_${soil_sensor_device_id}).state;
            nitrogen_value: !lambda return id(nitrogen_${soil_sensor_device_id}).state;
            phosphorus_value: !lambda return id(phosphorus_${soil_sensor_device_id}).state;
            potassium_value: !lambda return id(potassium_${soil_sensor_device_id}).state;
            salinity_value: !lambda return id(salinity_${soil_sensor_device_id}).state;
            tds_value: !lambda return id(tds_${soil_sensor_device_id}).state;
            temperature_value_last: !lambda return id(temperature_last_${soil_sensor_device_id}).state;
            humidity_value_last: !lambda return id(humidity_last_${soil_sensor_device_id}).state;
            ph_value_last: !lambda return id(ph_last_${soil_sensor_device_id}).state;
        - script.execute: update_last_values_${soil_sensor_device_id}

espnow:
  id: espnow_component
  auto_add_peer: true
  wifi_channel: !secret espnow_channel
  predefined_peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          if(packet.is_valid()){
            // Convert the received data to a string
            std::string received_string((char*)packet.get_payload(), packet.size);

            ESP_LOGI("main", "Received data: %s", received_string.c_str());

            // Peer
            uint64_t peer = packet.peer;
            ESP_LOGI("main", "Peer: 0x%12llx", peer);
            
            // Parse the received data
            char buffer[241];

            strncpy(buffer, received_string.c_str(), sizeof(buffer));
            
            

            char* topic = strtok(buffer, ";");
            char* value = strtok(nullptr, ";");
            char* end = strtok(nullptr, ";");

            
            if(topic != nullptr){
                if(value != nullptr){
                    int value_int = atoi(value);
                    //float value_float = atof(value);

                    bool savedPeer = false;
                    int sensor_id = 0;
                    // Peer name
                    for (int i = 0; i < 8; i++) {
                      if (id(peer_addresses)[i] == peer) {
                        savedPeer = true;
                        sensor_id = id(peer_names)[i];
                        break;
                      }
                    }
                    if (savedPeer){
                      //ESP_LOGI("main", "Peer already saved");
                      ESP_LOGI("main", "Sensor ID: %d", sensor_id);
                    }
                    else{
                      ESP_LOGW("main", "Recieved message is not from saved peer");
                    }
                    

                    if (strcmp(topic, "pong") == 0 && end != nullptr){
                        int end_int = atoi(end);
                        if(end_int == 1){
                          // Check if peer is already in the list
                          bool peer_exists = false;
                          for (int i = 0; i < 8; i++) {
                              if (id(peer_addresses)[i] == peer) {
                                  if(id(peer_names)[i] != value_int){
                                    id(peer_names)[i] = value_int;
                                  }
                                  peer_exists = true;
                                  break;
                              }
                          }

                          bool peer_added = false;
                          // If peer is not in the list, add it to the first available 0 position
                          if (!peer_exists) {
                              for (int i = 0; i < 8; i++) {
                                  if (id(peer_addresses)[i] == 0) { // Check for an empty spot (0 indicates empty)
                                      id(peer_addresses)[i] = peer;
                                      id(peer_names)[i] = value_int;
                                      peer_added = true;
                                      break;
                                  }
                              }
                              if (!peer_added) {
                                  ESP_LOGW("main", "No more space for peers");
                              }
                          }
                        }

                        ESP_LOGI("main", "Response: Peer: 0x%12llx Name: %s", peer, value);
                    }
                    else if(sensor_id == ${spectral_sensor_device_id}){
                        if (strcmp(topic, "f1") == 0) {
                          id(f1_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f2") == 0) {
                          id(f2_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "fz") == 0) {
                          id(fz_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f3") == 0) {
                          id(f3_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f4") == 0) {
                          id(f4_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "fy") == 0) {
                          id(fy_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f5") == 0) {
                          id(f5_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "fxl") == 0) {
                          id(fxl_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f6") == 0) {
                          id(f6_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f7") == 0) {
                          id(f7_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "f8") == 0) {
                          id(f8_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "nir") == 0) {
                          id(nir_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "clear") == 0) {
                          id(clear_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "irradiance") == 0) {
                          id(irradiance_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "irradiance_photopic") == 0) {
                          id(irradiance_photopic_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "pffd") == 0) {
                          id(pffd_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "saturation") == 0) {
                          id(saturation_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "color_temperature") == 0) {
                          id(color_temperature_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "par") == 0) {
                          id(par_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "lux") == 0) {
                          id(lux_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "lux2") == 0) {
                          id(lux2_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "atime") == 0) {
                          id(atime_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "astep") == 0) {
                          id(astep_${spectral_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "gain") == 0) {
                          id(gain_${spectral_sensor_device_id}).publish_state(value_int);
                        }
                    }
                    else if(sensor_id == ${soil_sensor_device_id}){
                        if (strcmp(topic, "humidity") == 0) {
                          id(humidity_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "temperature") == 0) {
                          id(temperature_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "conductivity") == 0) {
                          id(conductivity_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "ph") == 0) {
                          id(ph_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "nitrogen") == 0) {
                          id(nitrogen_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "phosphorus") == 0) {
                          id(phosphorus_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "potassium") == 0) {
                          id(potassium_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "salinity") == 0) {
                          id(salinity_${soil_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "tds") == 0) {
                          id(tds_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "cond_f") == 0){
                          id(cond_f_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "sal_f") == 0){
                          id(sal_f_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "tds_f") == 0){
                          id(tds_f_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "temp_offset") == 0){
                          if(value_int > 32767){
                            value_int = value_int - 65536; // 65536
                          }
                          id(temp_offset_${soil_sensor_device_id}).publish_state(value_int / 10.0);
                        } else if(strcmp(topic, "hum_offset") == 0){
                          if(value_int > 32767){
                            value_int = value_int - 65536; // 65536
                          }
                          id(hum_offset_${soil_sensor_device_id}).publish_state(value_int / 10.0);
                        } else if(strcmp(topic, "cond_offset") == 0){
                          id(cond_offset_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "ph_offset") == 0){
                          if(value_int > 32767){
                            value_int = value_int - 65536; // 65536
                          }
                          id(ph_offset_${soil_sensor_device_id}).publish_state(value_int / 10.0);
                        } else if(strcmp(topic, "n_f_high") == 0){
                          id(n_f_high_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "n_f_low") == 0){
                          id(n_f_low_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "n_offset") == 0){
                          id(n_offset_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "p_f_high") == 0){
                          id(p_f_high_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "p_f_low") == 0){
                          id(p_f_low_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "p_offset") == 0){
                          id(p_offset_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "k_f_high") == 0){
                          id(k_f_high_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "k_f_low") == 0){
                          id(k_f_low_${soil_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "k_offset") == 0){
                          id(k_offset_${soil_sensor_device_id}).publish_state(value_int);
                        }
                    }
                    else if(sensor_id == ${air_sensor_device_id}){
                        if (strcmp(topic, "bmp_temp") == 0) {
                          id(bmp_temp_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "bmp_press") == 0) {
                          id(bmp_press_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "si_temp") == 0) {
                          id(si_temp_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "si_hum") == 0) {
                          id(si_hum_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "ccs_eco2") == 0) {
                          id(ccs_eco2_${air_sensor_device_id}).publish_state(value_int);
                        } else if (strcmp(topic, "ccs_tvoc") == 0) {
                          id(ccs_tvoc_${air_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "temp_index") == 0){
                          id(temp_index_${air_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "press_index") == 0){
                          id(press_index_${air_sensor_device_id}).publish_state(value_int);
                        } else if(strcmp(topic, "iir_index") == 0){
                          id(iir_index_${air_sensor_device_id}).publish_state(value_int);
                        }
                    }
                    else{
                        ESP_LOGW("main", "Unknown topic: %s", topic);
                    }
                }
                else{ESP_LOGW("main", "Value is none");}
            }
            else{ESP_LOGW("main", "Topic is none");}

          }
          else{ESP_LOGW("main", "Invalid packet");}

      - script.execute: handleOnRecieve

script:
  - id: send_calibration_data_${spectral_sensor_device_id}
    then:
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${spectral_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("flash", id(flash_${spectral_sensor_device_id}).state);
      - delay: 1000ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${spectral_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("atime", id(atime_${spectral_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${spectral_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("astep", id(astep_${spectral_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${spectral_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("gain", id(gain_${spectral_sensor_device_id}).state);
  - id: beReadyToReceiveMessage
    then:
      - espnow.broadcast:
          payload: 'hub;beReadyToReceiveMessage;'
      - delay: 500ms
  - id: requestCalResponse
    parameters:
      device_id: int
    then:
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == device_id) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: 'getcalibration;'
  - id: handleOnRecieve
    then:
      - logger.log: 'Received data'
  - id: send_calibration_data_${soil_sensor_device_id}
    then:
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("cond_f", id(cond_f_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("sal_f", id(sal_f_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("tds_f", id(tds_f_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("temp_offset", id(temp_offset_${soil_sensor_device_id}).state * 10);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("hum_offset", id(hum_offset_${soil_sensor_device_id}).state * 10);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("cond_offset", id(cond_offset_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("ph_offset", id(ph_offset_${soil_sensor_device_id}).state * 10);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("n_f_high", id(n_f_high_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("n_f_low", id(n_f_low_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("n_offset", id(n_offset_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("p_f_high", id(p_f_high_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("p_f_low", id(p_f_low_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("p_offset", id(p_offset_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("k_f_high", id(k_f_high_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("k_f_low", id(k_f_low_${soil_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${soil_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("k_offset", id(k_offset_${soil_sensor_device_id}).state);
  - id: send_calibration_data_${air_sensor_device_id}
    then:
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
              if (id(peer_names)[i] == ${air_sensor_device_id}) {
                return id(peer_addresses)[i];
              }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("flash", id(flash_${air_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${air_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("temp_index", id(temp_index_${air_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${air_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("press_index", id(press_index_${air_sensor_device_id}).state);
      - delay: 500ms
      - espnow.send:
          mac_address: !lambda |-
            for (int i = 0; i < 8; i++) {
                if (id(peer_names)[i] == ${air_sensor_device_id}) {
                    return id(peer_addresses)[i];
                }
            }
            return 0;
          payload: !lambda |-
            return format_espnow_data_new("iir_index", id(iir_index_${air_sensor_device_id}).state);
  - id: eink_page_${air_sensor_device_id}
    parameters:
      eCO2_value: int
      TVOC_value: int
      pressure_value: float
      temperature_value: float
      humidity_value: float
      eCO2_value_last: int
      TVOC_value_last: int
      pressure_value_last: float
      temperature_value_last: float
      humidity_value_last: float
    then:
      - lambda: |-
          int padding = 5;
          int small_padding = 3;
          int top_bottom_padding = 1;
          int tvoc_padding_right = 20;

          id(my_display).landscape();
          id(my_display).clearMemory();
          id(my_display).setTextWrap(false);

          //id(my_display).setTextColor(BLACK);
          //id(my_display).setBackgroundColor(WHITE);
          const uint16_t width  = id(my_display).width();
          const uint16_t height = id(my_display).height();

          id(my_display).setFont(&FreeMonoBold12pt7b);

          String title = "Air Sensor 2";
          uint8_t title_height = id(my_display).getTextHeight(title);

          int title_y = title_height + top_bottom_padding;

          id(my_display).setCursor(padding, title_y);
          id(my_display).print("Air Sensor 2");

          int line_y = title_y + small_padding;

          id(my_display).drawLine(0, line_y, width, line_y, BLACK);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          char eCO2_char[9];
          sprintf(eCO2_char, "%4d", eCO2_value);
          String eCO2_string = String(eCO2_char);

          char TVOC_char[9];
          sprintf(TVOC_char, "%4d", TVOC_value);
          String TVOC_string = String(TVOC_char);

          char pressure_char[10];
          sprintf(pressure_char, "%5.1f", pressure_value);
          String pressure_string = String(pressure_char);


          uint8_t eco2_string_height = id(my_display).getTextHeight(eCO2_string);
          uint8_t tvoc_string_height = id(my_display).getTextHeight(TVOC_string);
          uint8_t pressure_string_height = id(my_display).getTextHeight(pressure_string);

          uint8_t max_string_height = max(eco2_string_height, max(tvoc_string_height, pressure_string_height));

          uint8_t eco2_string_width = id(my_display).getTextWidth(eCO2_string);
          uint8_t tvoc_string_width = id(my_display).getTextWidth(TVOC_string);
          uint8_t pressure_string_width = id(my_display).getTextWidth(pressure_string);

          id(my_display).setFont(&FreeMono9pt7b);

          String eCO2_label = "eCO2";
          String TVOC_label = "TVOC";
          String pressure_label = "Press.";

          uint8_t eco2_label_height = id(my_display).getTextHeight(eCO2_label);
          uint8_t tvoc_label_height = id(my_display).getTextHeight(TVOC_label);
          uint8_t pressure_label_height = id(my_display).getTextHeight(pressure_label);

          uint8_t eco2_label_width = id(my_display).getTextWidth(eCO2_label);
          uint8_t tvoc_label_width = id(my_display).getTextWidth(TVOC_label);
          uint8_t pressure_label_width = id(my_display).getTextWidth(pressure_label);

          uint8_t max_label_height = max(eco2_label_height, max(tvoc_label_height, pressure_label_height));

          id(my_display).setFont(&FreeMono7pt7b);

          String eCO2_unit = "ppm";
          String TVOC_unit = "ppb";
          String pressure_unit = "hPa";

          uint8_t eco2_unit_height = id(my_display).getTextHeight(eCO2_unit);
          uint8_t tvoc_unit_height = id(my_display).getTextHeight(TVOC_unit);
          uint8_t pressure_unit_height = id(my_display).getTextHeight(pressure_unit);

          uint8_t max_unit_height = max(eco2_unit_height, max(tvoc_unit_height, pressure_unit_height));

          uint8_t eco2_unit_width = id(my_display).getTextWidth(eCO2_unit);
          uint8_t tvoc_unit_width = id(my_display).getTextWidth(TVOC_unit);
          uint8_t pressure_unit_width = id(my_display).getTextWidth(pressure_unit);

          int pressure_x = width - pressure_string_width - padding - down_arrow_width;
          int eCO2_x = 0;
          int TVOC_x = ((pressure_x + (eCO2_x + eco2_string_width)) / 2) - ((tvoc_string_width) / 2);



          int small_letter_diff_down = 2; // ppb p is under the line and b is above the line
          int small_letter_diff_top = 3; // ppm m is under the line and p is above the line


          int unit_y = height - top_bottom_padding - small_letter_diff_down;
          int string_y = unit_y - max_unit_height - padding + small_letter_diff_top;
          int label_y = string_y - max_string_height - padding;

          id(my_display).setFont(&FreeMono7pt7b);

          id(my_display).setCursor(eCO2_x + (eco2_string_width - eco2_unit_width) / 2, unit_y);
          id(my_display).print(eCO2_unit);

          id(my_display).setCursor(TVOC_x + (tvoc_string_width - tvoc_unit_width) / 2, unit_y);
          id(my_display).print(TVOC_unit);

          id(my_display).setCursor(pressure_x + (pressure_string_width - pressure_unit_width) / 2, unit_y);
          id(my_display).print(pressure_unit);

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(eCO2_x + (eco2_string_width - eco2_label_width) / 2 , label_y);
          id(my_display).print(eCO2_label);

          id(my_display).setCursor(TVOC_x + (tvoc_string_width - tvoc_label_width) / 2, label_y);
          id(my_display).print(TVOC_label);

          id(my_display).setCursor(pressure_x + (pressure_string_width - pressure_label_width) / 2, label_y);
          id(my_display).print(pressure_label);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(eCO2_x, string_y);
          id(my_display).print(eCO2_string);

          id(my_display).setCursor(TVOC_x, string_y);
          id(my_display).print(TVOC_string);

          id(my_display).setCursor(pressure_x, string_y);
          id(my_display).print(pressure_string);

          if(eCO2_value > eCO2_value_last){
            id(my_display).drawXBitmap(eCO2_x+eco2_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(eCO2_value < eCO2_value_last){
            id(my_display).drawXBitmap(eCO2_x+eco2_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          if(TVOC_value > TVOC_value_last){
            id(my_display).drawXBitmap(TVOC_x+tvoc_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(TVOC_value < TVOC_value_last){
            id(my_display).drawXBitmap(TVOC_x+tvoc_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          if(pressure_value > pressure_value_last){
            id(my_display).drawXBitmap(pressure_x+pressure_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(pressure_value < pressure_value_last){
            id(my_display).drawXBitmap(pressure_x+pressure_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          // id(my_display).drawLine(0,unit_y , width, unit_y , BLACK);
          // id(my_display).drawLine(0,label_y + padding , width, label_y + padding, BLACK);
          // id(my_display).drawLine(0,label_y , width, label_y , BLACK);
          // id(my_display).drawLine(0,string_y + padding , width , string_y + padding , BLACK);
          // id(my_display).drawLine(0,string_y , width, string_y , BLACK);
          // id(my_display).drawLine(0,label_y - max_label_height, width, label_y - max_label_height, BLACK);

          // // Draw vertical line from top to bottom in the middle of the screen
          // id(my_display).drawLine(width / 2, 0, width / 2, height, BLACK);

          int thermometer_top_left_y = line_y + padding + 1;
          int thermometer_top_left_x = padding;

          // First draw a thermometer in the background, top centre
          id(my_display).drawXBitmap(thermometer_top_left_x, thermometer_top_left_y, thermometer_bits, thermometer_width, thermometer_height, BLACK);

          bool negative_temperature = false;

          float temperature_value_new = temperature_value;
          if(temperature_value < 0){
            negative_temperature = true;
            temperature_value_new = abs(temperature_value);
          }
            
          char temperature_char[4];
          sprintf(temperature_char, "%2.1f", temperature_value_new); 
          String temperature_string = String(temperature_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t temperature_string_height = id(my_display).getTextHeight(temperature_string);
          uint8_t temperature_string_width = id(my_display).getTextWidth(temperature_string);


          int temperature_x = thermometer_top_left_x + thermometer_width + padding;
          int temperature_y = thermometer_top_left_y + thermometer_height * 0.48;

          int minus_sign_x = temperature_x - 15;
          int minus_sign_y = temperature_y;

          if(negative_temperature){
            id(my_display).setCursor(minus_sign_x, minus_sign_y);
            id(my_display).print("-");
          }

          id(my_display).setCursor(temperature_x, temperature_y);
          id(my_display).print(temperature_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String temperature_unit = " C";
          uint8_t temperature_unit_height = id(my_display).getTextHeight(temperature_unit);
          uint8_t temperature_unit_width = id(my_display).getTextWidth(temperature_unit);

          int temperature_unit_x = temperature_x + temperature_string_width / 2;
          int temperature_unit_y = temperature_y + temperature_unit_height + padding;

          id(my_display).setCursor(temperature_unit_x, temperature_unit_y);
          id(my_display).print(temperature_unit);

          //Draw degree symbol
          id(my_display).drawCircle(temperature_unit_x + 1, temperature_unit_y - 7, 2, BLACK);

          // water_drop
          int water_drop_top_left_x = width / 2 + padding;
          int water_drop_top_left_y = thermometer_top_left_y;

          id(my_display).drawXBitmap(water_drop_top_left_x, water_drop_top_left_y, water_drop_bits, water_drop_width, water_drop_height, BLACK);

          char humidity_char[4];
          sprintf(humidity_char, "%2.1f", humidity_value);
          String humidity_string = String(humidity_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t humidity_string_height = id(my_display).getTextHeight(humidity_string);
          uint8_t humidity_string_width = id(my_display).getTextWidth(humidity_string);

          int humidity_x = water_drop_top_left_x + water_drop_width + padding;
          int humidity_y = temperature_y;

          id(my_display).setCursor(humidity_x, humidity_y);
          id(my_display).print(humidity_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String humidity_unit = "%";
          uint8_t humidity_unit_height = id(my_display).getTextHeight(humidity_unit);
          uint8_t humidity_unit_width = id(my_display).getTextWidth(humidity_unit);

          int humidity_unit_x = humidity_x + humidity_string_width / 2;
          int humidity_unit_y = temperature_unit_y;

          id(my_display).setCursor(humidity_unit_x, humidity_unit_y);
          id(my_display).print(humidity_unit);

          if(temperature_value > temperature_value_last){
            id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - temperature_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(temperature_value < temperature_value_last){
            id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(humidity_value > humidity_value_last){
            id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - humidity_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(humidity_value < humidity_value_last){
            id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          id(my_display).update();
  - id: eink_page_${soil_sensor_device_id}
    parameters:
      temperature_value: float
      temperature_value_last: float
      humidity_value: float
      humidity_value_last: float
      conductivity_value: int
      ph_value: float
      ph_value_last: float
      nitrogen_value: int
      phosphorus_value: int
      potassium_value: int
      salinity_value: int
      tds_value: int
    then:
      - lambda: |-
          int padding = 5;
          int small_padding = 3;
          int top_bottom_left_right_padding = 1;

          id(my_display).landscape();
          id(my_display).clearMemory();
          id(my_display).setTextWrap(false);

          //id(my_display).setTextColor(BLACK);
          //id(my_display).setBackgroundColor(WHITE);
          const uint16_t width  = id(my_display).width();
          const uint16_t height = id(my_display).height();

          id(my_display).setFont(&FreeMonoBold12pt7b);

          String title = "Soil Sensor 1";
          uint8_t title_height = id(my_display).getTextHeight(title);

          int title_y = title_height + top_bottom_left_right_padding;

          id(my_display).setCursor(padding, title_y);
          id(my_display).print("Soil Sensor 1");

          int line_y = title_y + small_padding;

          id(my_display).drawLine(0, line_y, width, line_y, BLACK);

          // Right side of the screen

          char nitrogen_char[5];
          sprintf(nitrogen_char, "%5d", nitrogen_value);
          String nitrogen_string = String(nitrogen_char);

          char phosphorus_char[5];
          sprintf(phosphorus_char, "%5d", phosphorus_value);
          String phosphorus_string = String(phosphorus_char);

          char potassium_char[5];
          sprintf(potassium_char, "%5d", potassium_value);
          String potassium_string = String(potassium_char);

          char conductivity_char[5];
          sprintf(conductivity_char, "%5d", conductivity_value);
          String conductivity_string = String(conductivity_char);

          char tds_char[5];
          sprintf(tds_char, "%5d", tds_value);
          String tds_string = String(tds_char);

          char salinity_char[5];
          sprintf(salinity_char, "%5d", salinity_value);
          String salinity_string = String(salinity_char);

          id(my_display).setFont(&FreeMonoBold9pt7b);


          uint8_t nitrogen_string_height = id(my_display).getTextHeight(nitrogen_string);
          uint8_t phosphorus_string_height = id(my_display).getTextHeight(phosphorus_string);
          uint8_t potassium_string_height = id(my_display).getTextHeight(potassium_string);
          uint8_t conductivity_string_height = id(my_display).getTextHeight(conductivity_string);
          uint8_t tds_string_height = id(my_display).getTextHeight(tds_string);
          uint8_t salinity_string_height = id(my_display).getTextHeight(salinity_string);

          uint8_t max_string_height = max(nitrogen_string_height, max(phosphorus_string_height, max(potassium_string_height, max(conductivity_string_height, max(tds_string_height, salinity_string_height)))));


          uint8_t nitrogen_string_width = id(my_display).getTextWidth(nitrogen_string);
          uint8_t phosphorus_string_width = id(my_display).getTextWidth(phosphorus_string);
          uint8_t potassium_string_width = id(my_display).getTextWidth(potassium_string);
          uint8_t conductivity_string_width = id(my_display).getTextWidth(conductivity_string);
          uint8_t tds_string_width = id(my_display).getTextWidth(tds_string);
          uint8_t salinity_string_width = id(my_display).getTextWidth(salinity_string);

          uint8_t max_string_width = max(nitrogen_string_width, max(phosphorus_string_width, max(potassium_string_width, max(conductivity_string_width, max(tds_string_width, salinity_string_width)))));

          id(my_display).setFont(&FreeMono9pt7b);

          String nitrogen_label = "N";
          String phosphorus_label = "P";
          String potassium_label = "K";
          String conductivity_label = "EC";
          String tds_label = "TDS";
          String salinity_label = "Sal";

          uint8_t nitrogen_label_height = id(my_display).getTextHeight(nitrogen_label);
          uint8_t phosphorus_label_height = id(my_display).getTextHeight(phosphorus_label);
          uint8_t potassium_label_height = id(my_display).getTextHeight(potassium_label);
          uint8_t conductivity_label_height = id(my_display).getTextHeight(conductivity_label);
          uint8_t tds_label_height = id(my_display).getTextHeight(tds_label);
          uint8_t salinity_label_height = id(my_display).getTextHeight(salinity_label);

          uint8_t nitrogen_label_width = id(my_display).getTextWidth(nitrogen_label);
          uint8_t phosphorus_label_width = id(my_display).getTextWidth(phosphorus_label);
          uint8_t potassium_label_width = id(my_display).getTextWidth(potassium_label);
          uint8_t conductivity_label_width = id(my_display).getTextWidth(conductivity_label);
          uint8_t tds_label_width = id(my_display).getTextWidth(tds_label);
          uint8_t salinity_label_width = id(my_display).getTextWidth(salinity_label);

          uint8_t max_label_height = max(nitrogen_label_height, max(phosphorus_label_height, max(potassium_label_height, max(conductivity_label_height, max(tds_label_height, salinity_label_height)))));
          uint8_t max_label_width = max(nitrogen_label_width, max(phosphorus_label_width, max(potassium_label_width, max(conductivity_label_width, max(tds_label_width, salinity_label_width)))));

          id(my_display).setFont(&Picopixel);

          String chemical_element_unit = "mg/kg";
          String tds_and_salinity_unit = "mg/L";
          String conductivity_unit = "uS/cm";

          uint8_t chemical_element_unit_height = id(my_display).getTextHeight(chemical_element_unit);
          uint8_t chemical_element_unit_width = id(my_display).getTextWidth(chemical_element_unit);

          uint8_t tds_and_salinity_unit_height = id(my_display).getTextHeight(tds_and_salinity_unit);
          uint8_t tds_and_salinity_unit_width = id(my_display).getTextWidth(tds_and_salinity_unit);

          uint8_t conductivity_unit_height = id(my_display).getTextHeight(conductivity_unit);
          uint8_t conductivity_unit_width = id(my_display).getTextWidth(conductivity_unit);

          uint8_t max_unit_height = max(chemical_element_unit_height, max(tds_and_salinity_unit_height, conductivity_unit_height));
          uint8_t max_unit_width = max(chemical_element_unit_width, max(tds_and_salinity_unit_width, conductivity_unit_width));

          // int label_x = 0; //top_bottom_left_right_padding;
          // int string_x = label_x + max_label_width + padding;
          // int unit_x = string_x + max_string_width + padding;

          int unit_x = width - max_unit_width; //- top_bottom_left_right_padding;
          int string_x = unit_x - max_string_width - padding;
          int label_x = string_x - max_label_width - padding;

          int salinity_y = height - top_bottom_left_right_padding;
          int tds_y = salinity_y - max_string_height - padding;
          int conductivity_y = tds_y - max_string_height - padding;
          int potassium_y = conductivity_y - max_string_height - padding;
          int phosphorus_y = potassium_y - max_string_height - padding;
          int nitrogen_y = phosphorus_y - max_string_height - padding;

          id(my_display).setFont(&Picopixel);

          id(my_display).setCursor(unit_x, potassium_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, phosphorus_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, nitrogen_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, conductivity_y - max_string_height/2 + conductivity_unit_height/2);
          id(my_display).print(conductivity_unit);

          id(my_display).setCursor(unit_x, tds_y - max_string_height/2 + tds_and_salinity_unit_height/2);
          id(my_display).print(tds_and_salinity_unit);

          id(my_display).setCursor(unit_x, salinity_y - max_string_height/2 + tds_and_salinity_unit_height/2);
          id(my_display).print(tds_and_salinity_unit);

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(label_x+(max_label_width/2 - potassium_label_width/2), potassium_y);
          id(my_display).print(potassium_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - phosphorus_label_width/2), phosphorus_y);
          id(my_display).print(phosphorus_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - nitrogen_label_width/2), nitrogen_y);
          id(my_display).print(nitrogen_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - conductivity_label_width/2), conductivity_y);
          id(my_display).print(conductivity_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - tds_label_width/2), tds_y);
          id(my_display).print(tds_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - salinity_label_width/2), salinity_y);
          id(my_display).print(salinity_label);

          id(my_display).setFont(&FreeMonoBold9pt7b);

          id(my_display).setCursor(string_x, potassium_y);
          id(my_display).print(potassium_string);

          id(my_display).setCursor(string_x, phosphorus_y);
          id(my_display).print(phosphorus_string);

          id(my_display).setCursor(string_x, nitrogen_y);
          id(my_display).print(nitrogen_string);

          id(my_display).setCursor(string_x, conductivity_y);
          id(my_display).print(conductivity_string);

          id(my_display).setCursor(string_x, tds_y);
          id(my_display).print(tds_string);

          id(my_display).setCursor(string_x, salinity_y);
          id(my_display).print(salinity_string);


          int right_side_x = label_x;
          // Right side of the screen
          char ph_char[4];
          sprintf(ph_char, "%2.1f", ph_value);
          String ph_string = String(ph_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t ph_string_height = id(my_display).getTextHeight(ph_string);
          uint8_t ph_string_width = id(my_display).getTextWidth(ph_string);

          String ph_label = "pH";

          id(my_display).setFont(&FreeMono9pt7b);

          uint8_t ph_label_height = id(my_display).getTextHeight(ph_label);
          uint8_t ph_label_width = id(my_display).getTextWidth(ph_label);

          int ph_width = ph_string_width + 3 * padding + ph_label_width;

          int ph_string_x = right_side_x/2 - ph_width/2;
          int ph_label_x = ph_string_x + ph_string_width + 3*padding;

          int ph_y = height - top_bottom_left_right_padding - ph_string_height/2;

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(ph_label_x, ph_y - ph_string_height/2 + ph_label_height/2);
          id(my_display).print(ph_label);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(ph_string_x, ph_y);
          id(my_display).print(ph_string);

          // Right-Top part of the screen
          int thermometer_small_top_left_y = line_y + padding + 3;
          int thermometer_small_top_left_x = padding;

          // First draw a small thermometer in the background, top centre
          id(my_display).drawXBitmap(thermometer_small_top_left_x, thermometer_small_top_left_y, thermometer_small_bits, thermometer_small_width, thermometer_small_height, BLACK);

          bool negative_temperature = false;

          float temperature_value_new = temperature_value;
          if(temperature_value < 0){
          negative_temperature = true;
          temperature_value_new = abs(temperature_value);
          }

          char temperature_char[4];
          sprintf(temperature_char, "%2.1f", temperature_value_new); 
          String temperature_string = String(temperature_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t temperature_string_height = id(my_display).getTextHeight(temperature_string);
          uint8_t temperature_string_width = id(my_display).getTextWidth(temperature_string);

          int temperature_x = thermometer_small_top_left_x + thermometer_small_width + padding;
          int temperature_y = thermometer_small_top_left_y + thermometer_small_height/2 + temperature_string_height/2;

          int minus_sign_x = temperature_x - 12;
          int minus_sign_y = temperature_y-2;

          if(negative_temperature){
          id(my_display).setFont(&FreeMonoBold9pt7b);
          id(my_display).setCursor(minus_sign_x, minus_sign_y);
          id(my_display).print("-");
          }

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(temperature_x, temperature_y);
          id(my_display).print(temperature_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String temperature_unit = " C";
          uint8_t temperature_unit_height = id(my_display).getTextHeight(temperature_unit);
          uint8_t temperature_unit_width = id(my_display).getTextWidth(temperature_unit);

          int temperature_unit_x = temperature_x + temperature_string_width + 3*padding;
          int temperature_unit_y = temperature_y - temperature_string_height/2 + temperature_unit_height/2;

          id(my_display).setCursor(temperature_unit_x, temperature_unit_y);
          id(my_display).print(temperature_unit);

          //Draw degree symbol
          id(my_display).drawCircle(temperature_unit_x + 1, temperature_unit_y - 7, 2, BLACK);

          // water_drop_small
          int water_drop_small_top_left_x = thermometer_small_top_left_x;
          int water_drop_small_top_left_y = thermometer_small_top_left_y + thermometer_small_height + padding;

          id(my_display).drawXBitmap(water_drop_small_top_left_x, water_drop_small_top_left_y, water_drop_small_bits, water_drop_small_width, water_drop_small_height, BLACK);

          char humidity_char[4];
          sprintf(humidity_char, "%2.1f", humidity_value);
          String humidity_string = String(humidity_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t humidity_string_height = id(my_display).getTextHeight(humidity_string);
          uint8_t humidity_string_width = id(my_display).getTextWidth(humidity_string);

          int humidity_x = temperature_x;
          int humidity_y = water_drop_small_top_left_y + water_drop_small_height/2 + humidity_string_height/2;

          id(my_display).setCursor(humidity_x, humidity_y);
          id(my_display).print(humidity_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String humidity_unit = "%";
          uint8_t humidity_unit_height = id(my_display).getTextHeight(humidity_unit);
          uint8_t humidity_unit_width = id(my_display).getTextWidth(humidity_unit);

          int humidity_unit_x = humidity_x + humidity_string_width + 3*padding;
          int humidity_unit_y = humidity_y - humidity_string_height/2 + humidity_unit_height/2;

          id(my_display).setCursor(humidity_unit_x, humidity_unit_y);
          id(my_display).print(humidity_unit);

          //Draw line between the two parts
          //id(my_display).drawLine(right_side_x-padding, line_y,  right_side_x-padding, height, BLACK);


          if(temperature_value > temperature_value_last){
          id(my_display).drawXBitmap(temperature_x + temperature_string_width+ + padding, temperature_y - temperature_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(temperature_value < temperature_value_last){
          id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(humidity_value > humidity_value_last){
          id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - humidity_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(humidity_value < humidity_value_last){
          id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(ph_value > ph_value_last){
          id(my_display).drawXBitmap(ph_string_x + ph_string_width + padding, ph_y - ph_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(ph_value < ph_value_last){
          id(my_display).drawXBitmap(ph_string_x + ph_string_width + padding, ph_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          id(my_display).update();

  - id: update_last_values_${air_sensor_device_id}
    then:
      - lambda: |-
          id(eCO2_last_${air_sensor_device_id}).publish_state(id(ccs_eco2_${air_sensor_device_id}).state);
          id(TVOC_last_${air_sensor_device_id}).publish_state(id(ccs_tvoc_${air_sensor_device_id}).state);
          id(bmp_press_last_${air_sensor_device_id}).publish_state(id(bmp_press_${air_sensor_device_id}).state);
          id(bmp_temp_last_${air_sensor_device_id}).publish_state(id(bmp_temp_${air_sensor_device_id}).state);
          id(si_temp_last_${air_sensor_device_id}).publish_state(id(si_temp_${air_sensor_device_id}).state);
          id(si_hum_last_${air_sensor_device_id}).publish_state(id(si_hum_${air_sensor_device_id}).state);

  - id: update_last_values_${soil_sensor_device_id}
    then:
      - lambda: |-
          id(temperature_last_${soil_sensor_device_id}).publish_state(id(temperature_${soil_sensor_device_id}).state);
          id(humidity_last_${soil_sensor_device_id}).publish_state(id(humidity_${soil_sensor_device_id}).state);
          id(ph_last_${soil_sensor_device_id}).publish_state(id(ph_${soil_sensor_device_id}).state);
