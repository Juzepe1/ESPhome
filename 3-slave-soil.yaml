esphome:
  name: 3-slave-soil
  platformio_options:
    platform: https://github.com/lucaskatayama/platform-espressif32.git#feat/seeed_xiao_esp32c6.json
  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp
    - components/write_to_modbus_device/write_to_modbus_device.h
    - components/write_to_modbus_device/write_to_modbus_device.cpp
  on_boot:
    priority: -10000
    then:
      - lambda: |-
          ESP_LOGI("main", "Hub address: 0x%12llx", id(hub_address));
      - delay: 500ms
      - lambda: |-
          id(espnow_component)->add_peer(id(hub_address));
      - delay: 500ms
      - if:
          condition:
            lambda: 'return id(deep_sleep_button).state;'
          then:
            - deep_sleep.prevent: deep_sleep_1
          else:
            - script.execute: espnow_communication

esp32:
  board: seeed_xiao_esp32c6
  variant: ESP32C6
  framework:
    type: esp-idf
    version: 5.3.0
    platform_version: 6.9.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

logger:
  baud_rate: 115200
  level: DEBUG
  hardware_uart: USB_SERIAL_JTAG

deep_sleep:
  id: deep_sleep_1
  run_duration: 60s # Time for the ESP32 to run before entering sleep mode
  sleep_duration: 60s # Change this to your desired sleep time
  wakeup_pin:
    number: GPIO1
    allow_other_uses: true
  wakeup_pin_mode: IGNORE

external_components:
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: d23346165e1baefd337ed805d3a211e5bead53af
    refresh: 1min
    components: [espnow]
  - source:
      type: git
      url: https://github.com/lboue/esphome
      ref: adc_oneshot
    components: [adc]
    refresh: 0s

globals:
  - id: long_press_timer
    type: unsigned long
    restore_value: no
    initial_value: '0'

  - id: long_press_action
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: pinged
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: paring
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: hub_address
    type: uint64_t
    initial_value: '0xFFFFFFFFFFFF'
    restore_value: yes

  - id: get_calibration
    type: bool
    initial_value: 'false'

  - id: request_cal
    type: bool
    initial_value: 'false'

uart:
  - id: intmodbus
    tx_pin: GPIO16
    rx_pin: GPIO17
    baud_rate: 4800
    stop_bits: 1
    data_bits: 8
    parity: NONE
    debug:
      direction: BOTH

modbus:
  flow_control_pin: GPIO21
  id: modbus1

modbus_controller:
  - id: modbus_device
    address: 0x1
    modbus_id: modbus1
    setup_priority: -10
    update_interval: never

sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Humidity'
    register_type: holding
    address: 0x00
    unit_of_measurement: '%RH'
    value_type: U_WORD
    id: 'humidity'
    accuracy_decimals: 1

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Temperature'
    register_type: holding
    address: 0x01 # Register for temperature
    unit_of_measurement: '°C'
    value_type: U_WORD
    accuracy_decimals: 1
    id: 'temperature'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Conductivity'
    register_type: holding
    address: 0x02 # Register for conductivity
    unit_of_measurement: 'µS/cm'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'conductivity'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'pH'
    register_type: holding
    address: 0x03 # Register for pH
    unit_of_measurement: 'pH'
    value_type: U_WORD
    accuracy_decimals: 1
    id: 'ph'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Nitrogen (N)'
    register_type: holding
    address: 0x04 # Register for Nitrogen
    unit_of_measurement: 'mg/kg'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'nitrogen'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Phosphorus (P)'
    register_type: holding
    address: 0x05 # Register for Phosphorus
    unit_of_measurement: 'mg/kg'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'phosphorus'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Potassium (K)'
    register_type: holding
    address: 0x06 # Register for Potassium
    unit_of_measurement: 'mg/kg'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'potassium'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Salinity'
    register_type: holding
    address: 0x07 # Register for salinity
    unit_of_measurement: 'mg/L'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'salinity'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'TDS'
    register_type: holding
    address: 0x08 # Register for TDS
    unit_of_measurement: 'mg/L'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'tds'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Conductivity Factor'
    register_type: holding
    address: 0x22 # Register for conductivity factor
    unit_of_measurement: 'x'
    value_type: U_WORD
    id: 'cond_f'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Salinity Factor'
    register_type: holding
    address: 0x23 # Register for salinity factor
    unit_of_measurement: 'x'
    value_type: U_WORD
    id: 'sal_f'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'TDS Factor'
    register_type: holding
    address: 0x24 # Register for TDS factor
    unit_of_measurement: 'x'
    value_type: U_WORD
    id: 'tds_f'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Temperature Offset'
    register_type: holding
    address: 0x50 # Register for temperature offset
    unit_of_measurement: '°C'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'temp_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Humidity Offset'
    register_type: holding
    address: 0x51 # Register for humidity offset
    unit_of_measurement: '%RH'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'hum_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Conductivity Offset'
    register_type: holding
    address: 0x52 # Register for conductivity offset
    unit_of_measurement: 'µS/cm'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'cond_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'pH Offset'
    register_type: holding
    address: 0x53 # Register for pH offset
    unit_of_measurement: 'pH'
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'ph_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Nitrogen Factor High'
    register_type: holding
    address: 0x4E8 # Nitrogen factor high byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'n_f_high'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Nitrogen Factor Low'
    register_type: holding
    address: 0x4E9 # Nitrogen factor low byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'n_f_low'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Nitrogen Offset'
    register_type: holding
    address: 0x4EA # Nitrogen offset
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'n_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Phosphorus Factor High'
    register_type: holding
    address: 0x4F2 # Phosphorus factor high byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'p_f_high'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Phosphorus Factor Low'
    register_type: holding
    address: 0x4F3 # Phosphorus factor low byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'p_f_low'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Phosphorus Offset'
    register_type: holding
    address: 0x4F4 # Phosphorus offset
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'p_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Potassium Factor High'
    register_type: holding
    address: 0x4FC # Potassium factor high byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'k_f_high'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Potassium Factor Low'
    register_type: holding
    address: 0x4FD # Potassium factor low byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'k_f_low'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Potassium Offset'
    register_type: holding
    address: 0x4FE # Potassium offset
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'k_offset'

  - platform: adc
    name: Battery
    id: battery
    pin: GPIO0
    update_interval: never
    unit_of_measurement: '%'
    accuracy_decimals: 0
    filters:
      - multiply: 2.0 # R1 = 220k, R2 = 220k, Vout = R2/(R1+R2) * Vin
      - calibrate_linear:
          method: exact
          datapoints:
            - 0.00 -> 0.0
            - 3.30 -> 1.0
            - 3.39 -> 10.0
            - 3.75 -> 50.0
            - 4.11 -> 90.0
            - 4.20 -> 100.0
      - lambda: |-
          if (x < 0.0) {
              return 0.0;
          } else if (x > 100.0) {
              return 100.0;
          } else {
              return x;
          }

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO1
      allow_other_uses: true
    name: 'Button'
    id: 'deep_sleep_button'
    on_state:
      then:
        - if:
            condition:
              lambda: 'return !x;'
            then:
              - logger.log: 'Button pressed'
              - deep_sleep.enter: deep_sleep_1
  - platform: gpio
    pin:
      number: GPIO19 # replace with the actual GPIO number
      mode: INPUT_PULLUP
      inverted: true
    name: 'Long Press Button'
    id: long_press_button
    on_press:
      then:
        - lambda: |-
            id(long_press_timer) = millis();
    on_release:
      then:
        - lambda: |-
            if (millis() - id(long_press_timer) > 3000) {
                ESP_LOGD("main", "Button was pressed for longer than 3 seconds.");
                id(long_press_action) = true;
                }
            else {ESP_LOGD("main", "Button was pressed for less than 3 seconds.");}

output:
  - platform: gpio
    pin: GPIO15
    id: built_in_led
    inverted: true

espnow:
  id: espnow_component
  auto_add_peer: true
  wifi_channel: !secret espnow_channel
  predefined_peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          std::string received_string((char*)packet.get_payload(), packet.size);

          if(packet.is_valid()){
            // Convert the received data to a string
            std::string received_string((char*)packet.get_payload(), packet.size);
            ESP_LOGI("main", "Received data: %s", received_string.c_str());

            if(received_string == "ping") {
                if(id(long_press_action)) {
                    id(hub_address) = packet.peer;
                    ESP_LOGI("main", "Setting hub address: 0x%12llx", id(hub_address));
                    id(long_press_action) = false;
                    id(paring) = true;
                }
                id(pinged) = true;
            }
            if(packet.peer == id(hub_address)) {
                ESP_LOGI("main", "Received from hub");
                 // Parse the received data
                char buffer[241];

                strncpy(buffer, received_string.c_str(), sizeof(buffer));

                char* topic = strtok(buffer, ";");
                char* value = strtok(nullptr, ";");
                char* end = strtok(nullptr, ";");
                
                if(topic != nullptr){
                    if(strcmp(topic, "getcalibration") == 0){
                            id(get_calibration) = true;
                            id(request_cal) = true;
                        }
                    else if(value != nullptr){
                        ESP_LOGI("main", "Topic: %s, Value: %s", topic, value);

                        int value_int = atoi(value);

                        float value_float = atof(value);
                        if (strcmp(topic, "cond_f") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x22, value_float);
                        } else if (strcmp(topic, "sal_f") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x23, value_float);
                        } else if (strcmp(topic, "tds_f") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x24, value_float);
                        } else if (strcmp(topic, "temp_offset") == 0) {
                            if (value_float < 0) {value_float = 65536 + value_float;}
                            write_to_modbus_device(id(modbus_device), 0x50, value_float);
                        } else if (strcmp(topic, "hum_offset") == 0) {
                            if (value_float < 0) {value_float = 65536 + value_float;}
                            write_to_modbus_device(id(modbus_device), 0x51, value_float);
                        } else if (strcmp(topic, "cond_offset") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x52, value_float);
                        } else if (strcmp(topic, "ph_offset") == 0) {
                            if (value_float < 0) {value_float = 65536 + value_float;}
                            write_to_modbus_device(id(modbus_device), 0x53, value_float);
                        } else if (strcmp(topic, "n_f_high") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4E8, value_float);
                        } else if (strcmp(topic, "n_f_low") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4E9, value_float);
                        } else if (strcmp(topic, "n_offset") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4EA, value_float);
                        } else if (strcmp(topic, "p_f_high") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4F2, value_float);
                        } else if (strcmp(topic, "p_f_low") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4F3, value_float);
                        } else if (strcmp(topic, "p_offset") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4F4, value_float);
                        } else if (strcmp(topic, "k_f_high") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4FC, value_float);
                        } else if (strcmp(topic, "k_f_low") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4FD, value_float);
                        } else if (strcmp(topic, "k_offset") == 0) {
                            write_to_modbus_device(id(modbus_device), 0x4FE, value_float);
                        }
                        else{ESP_LOGW("main", "Value is none");}
                    }
                    else{ESP_LOGW("main", "Value is none");}
                }
                else{ESP_LOGW("main", "Topic is none");}
            }
            else {ESP_LOGW("main", "Received from unknown peer. Not accepting data from unknown peers.");}
          }
          else{ESP_LOGW("main", "Invalid packet");}
      - script.execute: handleOnRecieve

script:
  - id: espnow_communication
    then:
      - output.turn_on: built_in_led
      - script.execute: beReadyToReceiveMessage
      - logger.log: 'Updating sensor data'
      - component.update: modbus_device
      - component.update: battery
      - delay: 5s
      - logger.log: 'Sensor data updated'

      - repeat:
          count: 3
          then:
            - lambda: |-
                ESP_LOGI("main", "Sending data to hub");
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("humidity", id(humidity).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("temperature", id(temperature).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("conductivity", id(conductivity).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("ph", id(ph).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("nitrogen", id(nitrogen).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("phosphorus", id(phosphorus).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("potassium", id(potassium).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("salinity", id(salinity).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("tds", id(tds).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("battery", id(battery).state);
      - output.turn_off: built_in_led
  - id: beReadyToReceiveMessage
    then:
      - espnow.broadcast:
          payload: 'hub;beReadyToReceiveMessage'
      - delay: 500ms
  - id: sendCalibrationData
    then:
      - component.update: modbus_device
      - delay: 5s
      - repeat:
          count: 3
          then:
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("cond_f", id(cond_f).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("sal_f", id(sal_f).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("tds_f", id(tds_f).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("temp_offset", id(temp_offset).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("hum_offset", id(hum_offset).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("cond_offset", id(cond_offset).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("ph_offset", id(ph_offset).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("n_f_high", id(n_f_high).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("n_f_low", id(n_f_low).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("n_offset", id(n_offset).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("p_f_high", id(p_f_high).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("p_f_low", id(p_f_low).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("p_offset", id(p_offset).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("k_f_high", id(k_f_high).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("k_f_low", id(k_f_low).state);
            - delay: 500ms
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("k_offset", id(k_offset).state);
            - delay: 500ms
      - lambda: |-
          ESP_LOGI("main", "Calibration data sent");
          id(get_calibration) = false;
  - id: handleOnRecieve
    then:
      - if:
          condition:
            lambda: 'return id(pinged);'
          then:
            - logger.log: 'Pinging back'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data("pong", "33", id(paring));
            - lambda: |-
                id(paring) = false;
                id(pinged) = false;
      - if:
          condition:
            lambda: 'return id(get_calibration);'
          then:
            - logger.log: 'Sending calibration data'
            - script.execute: sendCalibrationData
            - lambda: |-
                id(get_calibration) = false;
