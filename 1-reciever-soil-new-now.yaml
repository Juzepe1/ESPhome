esphome:
  name: esp32-reciever
  platform: ESP32
  board: esp32-c3-devkitm-1 # For ESP32-C3 based boards

  
      

logger:

wifi:
  ssid: !secret WiFi_ssid # WiFi SSID from secrets.yaml
  password: !secret WiFi_password # WiFi password from secrets.yaml
  power_save_mode: none

api:
  password: !secret API_password # API password for Home Assistant

ota:
  - platform: esphome
    password: !secret OTA_password # OTA password from secrets.yaml

external_components:
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: "nvds-new-espnow"
    components: [ espnow ]

substitutions:
  soil_moisture_device_id: "01"


sensor:
  - platform: template
    name: "Humidity ${soil_moisture_device_id}"
    id: 'humidity_${soil_moisture_device_id}'
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "%RH"

  - platform: template
    name: "Temperature ${soil_moisture_device_id}"
    id: temperature_${soil_moisture_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "°C"

  - platform: template
    name: "Conductivity_${soil_moisture_device_id}"
    id: conductivity_${soil_moisture_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "µS/cm"

  - platform: template
    name: "pH_${soil_moisture_device_id}"
    id: ph_${soil_moisture_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "pH"

  - platform: template
    name: "Nitrogen_${soil_moisture_device_id}"
    id: nitrogen_${soil_moisture_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "mg/kg"

  - platform: template
    name: "Phosphorus_${soil_moisture_device_id}"
    id: phosphorus_${soil_moisture_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "mg/kg"

  - platform: template
    name: "Potassium_${soil_moisture_device_id}"
    id: potassium_${soil_moisture_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "mg/kg"

  - platform: template
    name: "Salinity_${soil_moisture_device_id}"
    id: salinity_${soil_moisture_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "mg/L"

  - platform: template
    name: "TDS_${soil_moisture_device_id}"
    id: tds_${soil_moisture_device_id}
    update_interval: never
    accuracy_decimals: 1
    unit_of_measurement: "mg/L"
  

number:
  - platform: template
    name: "Conductivity Factor"
    id: cond_f_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    optimistic: true
    
  - platform: template
    name: "Salinity Factor"
    id: sal_f_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    optimistic: true
    
  - platform: template
    name: "TDS Factor"
    id: tds_f_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    optimistic: true
    
  - platform: template
    name: "Temperature Offset"
    id: temp_offset_${soil_moisture_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    
  - platform: template
    name: "Humidity Offset"
    id: hum_offset_${soil_moisture_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    
  - platform: template
    name: "Conductivity Offset"
    id: cond_offset_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "pH Offset"
    id: ph_offset_${soil_moisture_device_id}
    min_value: -10.0
    max_value: 10.0
    step: 0.1
    optimistic: true
    
  - platform: template
    name: "Nitrogen Factor High"
    id: n_f_high_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "Nitrogen Factor Low"
    id: n_f_low_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "Nitrogen Offset"
    id: n_offset_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "Phosphorus Factor High"
    id: p_f_high_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "Phosphorus Factor Low"
    id: p_f_low_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "Phosphorus Offset"
    id: p_offset_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "Potassium Factor High"
    id: k_f_high_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "Potassium Factor Low"
    id: k_f_low_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    
  - platform: template
    name: "Potassium Offset"
    id: k_offset_${soil_moisture_device_id}
    min_value: 0.0
    max_value: 1000.0
    step: 1.0
    optimistic: true
    

button:
  - platform: template
    name: "Get calibration data"
    on_press:
      then:
        - espnow.send:
            data: !lambda |-
              std::string data = "getcalibration";
              return std::vector<uint8_t>(data.begin(), data.end());


espnow:
  auto_add_peer: true
  wifi_channel: "11"
  peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
    - lambda: |-
        ESP_LOGI("main", "Received data from ESP-NOW");

        // Convert the received data to a string
        std::string received_string((char*)packet.get_payload(), packet.size);
        
        // Array to hold parts of the received string
        char buffer[50];
        strncpy(buffer, received_string.c_str(), sizeof(buffer));

        // Parse the string using strtok
        char* device_id = strtok(buffer, ";");
        char* sensor_name = strtok(nullptr, ";");
        char* value_string = strtok(nullptr, ";");

        if (device_id != nullptr && sensor_name != nullptr && value_string != nullptr) {
          float value = atof(value_string);

          // Check if the device_id is "01"
          if (strcmp(device_id, "01") == 0) {
            // Compare sensor_name with the sensor IDs and publish the state
            if (strcmp(sensor_name, "humidity") == 0) {
              id(humidity_01).publish_state(value);
            } else if (strcmp(sensor_name, "temperature") == 0) {
              id(temperature_01).publish_state(value);
            } else if (strcmp(sensor_name, "conductivity") == 0) {
              id(conductivity_01).publish_state(value);
            } else if (strcmp(sensor_name, "ph") == 0) {
              id(ph_01).publish_state(value);
            } else if (strcmp(sensor_name, "nitrogen") == 0) {
              id(nitrogen_01).publish_state(value);
            } else if (strcmp(sensor_name, "phosphorus") == 0) {
              id(phosphorus_01).publish_state(value);
            } else if (strcmp(sensor_name, "potassium") == 0) {
              id(potassium_01).publish_state(value);
            } else if (strcmp(sensor_name, "salinity") == 0) {
              id(salinity_01).publish_state(value);
            } else if (strcmp(sensor_name, "tds") == 0) {
              id(tds_01).publish_state(value);
            }
            else if (strcmp(sensor_name, "cond_f") == 0) {
              auto call = id(cond_f_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "sal_f") == 0) {
              auto call = id(sal_f_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "tds_f") == 0) {
              auto call = id(tds_f_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "temp_offset") == 0) {
              auto call = id(temp_offset_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "hum_offset") == 0) {
              auto call = id(hum_offset_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "cond_offset") == 0) {
              auto call = id(cond_offset_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "ph_offset") == 0) {
              auto call = id(ph_offset_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "n_f_high") == 0) {
              auto call = id(n_f_high_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "n_f_low") == 0) {
              auto call = id(n_f_low_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "n_offset") == 0) {
              auto call = id(n_offset_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "p_f_high") == 0) {
              auto call = id(p_f_high_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "p_f_low") == 0) {
              auto call = id(p_f_low_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "p_offset") == 0) {
              auto call = id(p_offset_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "k_f_high") == 0) {
              auto call = id(k_f_high_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "k_f_low") == 0) {
              auto call = id(k_f_low_01).make_call();
              call.set_value(value);
              call.perform();
            } else if (strcmp(sensor_name, "k_offset") == 0) {
              auto call = id(k_offset_01).make_call();
              call.set_value(value);
              call.perform();
            }
            
            else {
              ESP_LOGW("main", "Unknown sensor name: %s", sensor_name);
              ESP_LOGW("main", "Invalid data received: %s", received_string.c_str());
            }
          }
          else {
            ESP_LOGW("main", "Unknown device ID: %s", device_id);
            ESP_LOGW("main", "Invalid data received: %s", received_string.c_str());
          }
        }
        else {
          ESP_LOGW("main", "Invalid data received: %s", received_string.c_str());
        }
  # - logger.log:
  #     format: "Received data from ESP-NOW: %s"
  #     args: [ packet.get_payload() ]