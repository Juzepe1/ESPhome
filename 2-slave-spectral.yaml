esphome:
  name: 2-slave-spectral
  platformio_options:
    platform: https://github.com/lucaskatayama/platform-espressif32.git#feat/seeed_xiao_esp32c6.json
    build_flags: -DI2C_NUM_1=I2C_NUM_0
  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp
  friendly_name: Spectral Sensor

  on_boot:
    priority: -10000
    then:
      - lambda: |-
          ESP_LOGI("main", "Starting ESP-NOW");
          ESP_LOGI("main", "Hub address: 0x%12llx", id(hub_address));
          ESP_LOGI("main", "ESP Sensor Mode: %d", id(esp_sensor_mode));
          ESP_LOGI("main", "Wake up reason: %d", esp_sleep_get_wakeup_cause());
      - lambda: |-
          // Set calibration data to spectral sensor
          id(spectral_sensor).setup_atime(id(atime));
          id(spectral_sensor).setup_astep(id(astep));
          id(spectral_sensor).setup_gain(static_cast<esphome::as7343::AS7343Gain>(id(gain)));
          id(spectral_sensor).setup_glass_attenuation_factor(id(glass_attenuation_factor));
          // Set deep sleep duration
          id(deep_sleep_duration_number).publish_state(id(deep_sleep_duration)/1000);
      - delay: 500ms
      - lambda: |-
          id(espnow_component)->add_peer(id(hub_address));
      - delay: 500ms
      - deep_sleep.prevent: deep_sleep_1
      - if:
          condition:
            lambda: 'return esp_sleep_get_wakeup_cause()==7;'
          then:
            - lambda: |-
                ESP_LOGI("main", "Woke up from deep sleep");
                id(handleShowMode).execute();

esp32:
  board: seeed_xiao_esp32c6
  variant: ESP32C6
  framework:
    type: esp-idf
    version: 5.3.0
    platform_version: 6.9.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

wifi:
  enable_on_boot: false
  id: wifi_component
  power_save_mode: none
  ap:
    ssid: 'Slave Spectral Sensor'
    password: !secret ap_password
    ap_timeout: 0s
    channel: !secret espnow_channel
  on_connect:
    - lambda: |-
        ESP_LOGD("main", "Trying to start captive portal");
        if (!id(captive_portal_component).is_active()) {
          ESP_LOGD("main", "Starting captive portal");
          id(captive_portal_component).start("/captive_portal");
        }

web_server:
  local: true
  version: 3
  id: web_server_component
  sorting_groups:
    - id: sg_data
      name: 'Spectral Sensor Data'
      sorting_weight: 10

    - id: sg_settings
      name: 'Spectral Sensor Settings'
      sorting_weight: 11

    - id: sg_device_settings
      name: 'Device Settings'
      sorting_weight: 12
  log: false

captive_portal:
  mode: always_active
  id: captive_portal_component

api:
  password: !secret API_password

logger:
  baud_rate: 115200
  level: DEBUG
  hardware_uart: USB_SERIAL_JTAG

deep_sleep:
  id: deep_sleep_1
  run_duration: 80s # Time for the ESP32 to run before entering sleep mode
  sleep_duration: 60s # Change this to your desired sleep time
  wakeup_pin:
    number: GPIO1
    allow_other_uses: true
  wakeup_pin_mode: IGNORE

external_components:
  - source: components
    components:
      - as7343
    refresh: 1min
  - source: components/espnow190225
    components:
      - espnow
    refresh: 1min
  - source:
      type: git
      url: https://github.com/lboue/esphome
      ref: adc_oneshot
    components: [adc]
    refresh: 1min
  - source: github://pr#8160
    components: [wifi, captive_portal, web_server]

i2c:
  sda: GPIO22
  scl: GPIO23
  scan: true
  frequency: 200kHz

globals:
  - id: long_press_action
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: pinged
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: paring
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: hub_address
    type: uint64_t
    initial_value: '0xFFFFFFFFFFFF'
    restore_value: yes

  - id: get_calibration
    type: bool
    initial_value: 'false'

  - id: request_cal
    type: bool
    initial_value: 'false'

  - id: flash
    type: bool
    initial_value: 'false'

  - id: atime
    type: uint8_t
    initial_value: '29'
    restore_value: 'yes'

  - id: astep
    type: uint16_t
    initial_value: '599'
    restore_value: 'yes'

  - id: gain
    type: int
    initial_value: '3'
    restore_value: 'yes'
  # Gain values:
  #   AS7343_GAIN_0_5X,   0
  #   AS7343_GAIN_1X,     1
  #   AS7343_GAIN_2X,     2
  #   AS7343_GAIN_4X,     3
  #   AS7343_GAIN_8X,     4
  #   AS7343_GAIN_16X,    5
  #   AS7343_GAIN_32X,    6
  #   AS7343_GAIN_64X,    7
  #   AS7343_GAIN_128X,   8
  #   AS7343_GAIN_256X,   9
  #   AS7343_GAIN_512X,   10
  #   AS7343_GAIN_1024X,  11
  #   AS7343_GAIN_2048X,  12

  - id: glass_attenuation_factor
    type: float
    initial_value: '1.0'
    restore_value: 'yes'

  - id: esp_sensor_mode
    type: uint8_t
    initial_value: '0'
    restore_value: 'yes'
    # 0 - ESP-NOW without deepsleep - calibration mode
    # 1 - ESP-NOW with deepsleep
    # 2 - Webserver mode with captive portal

  - id: esp_now_message_delay
    type: int
    initial_value: '50'
    restore_value: 'no'

  - id: deep_sleep_duration
    type: uint32_t
    initial_value: '60'
    restore_value: 'yes'

sensor:
  - platform: as7343
    id: 'spectral_sensor'
    f1:
      name: '405nm'
      id: 'f1'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 2
    f2:
      name: '425nm'
      id: 'f2'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 3
    fz:
      name: '450nm'
      id: 'fz'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 4
    f3:
      name: '475nm'
      id: 'f3'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 5
    f4:
      name: '515nm'
      id: 'f4'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 6
    fy:
      name: '555nm'
      id: 'fy'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 7
    f5:
      name: '550nm'
      id: 'f5'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 8
    fxl:
      name: '600nm'
      id: 'fxl'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 9
    f6:
      name: '640nm'
      id: 'f6'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 10
    f7:
      name: '690nm'
      id: 'f7'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 11
    f8:
      name: '745nm'
      id: 'f8'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 12
    nir:
      name: 'NIR'
      id: 'nir'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 13
    clear:
      name: 'Clear'
      id: 'clear'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 14
    irradiance:
      name: 'Irradiance'
      id: 'irradiance'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 15
    irradiance_photopic:
      name: 'Irradiance Photopic'
      id: 'irradiance_photopic'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 16
    ppfd:
      name: 'PPFD (Photosynthetic Photon Flux Density)'
      id: 'ppfd'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 17
    saturation:
      name: 'Saturation'
      id: 'saturation'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 18
    color_temperature:
      name: 'Color Temperature'
      id: 'color_temperature'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 19
    par:
      name: 'PAR (Photosynthetic Active Radiation)'
      id: 'par'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 20
    lux:
      name: 'Illuminance'
      id: 'lux'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 21
    lux2:
      name: 'Illuminance 2'
      id: 'lux2'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 22
    update_interval: never
  - platform: adc
    name: Battery
    id: battery
    pin: GPIO0
    update_interval: never
    unit_of_measurement: '%'
    accuracy_decimals: 0
    filters:
      - multiply: 2.0 # R1 = 220k, R2 = 220k, Vout = R2/(R1+R2) * Vin
      - calibrate_linear:
          method: exact
          datapoints:
            - 0.00 -> 0.0
            - 3.30 -> 1.0
            - 3.39 -> 10.0
            - 3.75 -> 50.0
            - 4.11 -> 90.0
            - 4.20 -> 100.0
      - lambda: |-
          if (x < 0.0) {
              return 0.0;
          } else if (x > 100.0) {
              return 100.0;
          } else {
              return x;
          }
    web_server:
      sorting_group_id: sg_data
      sorting_weight: 23

number:
  - platform: template
    name: 'ATime'
    id: atime_number
    min_value: 0.0
    max_value: 255
    step: 1.0
    optimistic: true
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 2

  - platform: template
    name: 'AStep'
    id: astep_number
    min_value: 0.0
    max_value: 65534
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 3

  - platform: template
    name: 'Gain'
    id: gain_number
    min_value: 0.0
    max_value: 12.0
    step: 1.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 4

  - platform: template
    name: 'Glass Attenuation Factor'
    id: glass_attenuation_number
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 5

  - platform: template
    name: 'Deep Sleep Duration'
    id: deep_sleep_duration_number
    min_value: 1
    max_value: 3600
    step: 1
    unit_of_measurement: 's'
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_device_settings
      sorting_weight: 1
    on_value:
      then:
        - lambda: |-
            id(deep_sleep_duration) = x*1000; // Convert seconds to milliseconds
            id(deep_sleep_1).set_sleep_duration(id(deep_sleep_duration));
            ESP_LOGI("main", "Deep sleep duration set to %f seconds", x);

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO1
      allow_other_uses: true
    name: 'Long Press Button'
    id: long_press_button
    internal: true
    on_click:
      - min_length: 10ms
        max_length: 999ms
        then:
          - script.execute: handleShowMode
      - min_length: 3000ms
        max_length: 10000ms
        then:
          lambda: |-
            if (id(esp_sensor_mode) == 0) {
              id(long_press_action) = true;
              id(button_rgb_led).turn_on().set_brightness(1.0).set_effect("Fast Pulse").set_transition_length(10).set_rgb(1, 0.79215686274, 0.22745098039).perform();
            }
            else if (id(esp_sensor_mode) == 2) {
              id(button_rgb_led).turn_on().set_brightness(1.0).set_effect("Fast Pulse").set_transition_length(10).set_rgb(0, 0.35, 1).perform();
              // TO DO: Disconnect from WiFi
            }
    on_double_click:
      min_length: 50ms
      max_length: 350ms
      then:
        lambda: |-
          id(esp_sensor_mode) = (id(esp_sensor_mode) + 1) % 3;
          id(handleModeChange).execute();

output:
  - platform: gpio
    pin: GPIO15
    id: built_in_led
    inverted: true

  - platform: ledc
    pin: GPIO19
    id: button_red_led

  - platform: ledc
    pin: GPIO20
    id: button_green_led

  - platform: ledc
    pin: GPIO18
    id: button_blue_led

light:
  - platform: rgb
    name: 'Button RGB LED'
    id: button_rgb_led
    red: button_red_led
    green: button_green_led
    blue: button_blue_led
    internal: true
    on_turn_on:
      - delay: 5s
      - light.turn_off: button_rgb_led
    effects:
      - pulse:
          name: 'Fast Pulse'
          transition_length: 0.5s
          update_interval: 0.5s

espnow:
  id: espnow_component
  auto_add_peer: true
  conformation_timeout: 100ms
  wifi_channel: !secret espnow_channel
  predefined_peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          std::string received_string((char*)packet.get_payload(), packet.size);

          if(packet.is_valid()){
            // Convert the received data to a string
            std::string received_string((char*)packet.get_payload(), packet.size);
            ESP_LOGI("main", "Received data: %s", received_string.c_str());

            if(received_string == "ping") {
                if(id(long_press_action)) {
                    id(hub_address) = packet.peer;
                    ESP_LOGI("main", "Setting hub address: 0x%12llx", id(hub_address));
                    id(long_press_action) = false;
                    id(paring) = true;
                }
                id(pinged) = true;
            }
            if(packet.peer == id(hub_address)) {
                ESP_LOGI("main", "Received from hub");
                 // Parse the received data
                char buffer[241];

                strncpy(buffer, received_string.c_str(), sizeof(buffer));

                char* topic = strtok(buffer, ";");
                char* value = strtok(nullptr, ";");
                char* end = strtok(nullptr, ";");
                
                if(topic != nullptr){
                    if(strcmp(topic, "getcalibration") == 0){
                            id(get_calibration) = true;
                            id(request_cal) = true;
                        }
                    else if(value != nullptr){
                        ESP_LOGI("main", "Topic: %s, Value: %s", topic, value);

                        int value_int = atoi(value);

                        if(strcmp(topic, "flash") == 0){
                          if(value_int == 1){id(flash) = true;}
                        }
                        else if(strcmp(topic, "atime") == 0){
                          
                          if (id(flash)) {
                            ESP_LOGI("main", "Writing atime to flash");
                            id(astep) = value_int;
                          }
                          id(spectral_sensor).setup_astep(value_int);
                              
                        }
                        else if(strcmp(topic, "astep") == 0){
                          
                          if (id(flash)) {
                            ESP_LOGI("main", "Writing astep to flash");
                            id(astep) = value_int;
                          }
                          id(spectral_sensor).setup_astep(value_int);
                        }
                        else if(strcmp(topic, "gain") == 0){ 
                          if (id(flash)) {
                            ESP_LOGI("main", "Writing gain to flash");
                            id(gain) = value_int;
                          }
                          id(spectral_sensor).setup_gain(static_cast<esphome::as7343::AS7343Gain>(value_int));
                        }
                        else if(strcmp(topic, "gaf") == 0){
                        if (id(flash)) {
                          ESP_LOGI("main", "Writing glass_attenuation_factor to flash");
                          id(glass_attenuation_factor) = value_int;
                        }
                        id(spectral_sensor).setup_glass_attenuation_factor(value_int);
                        }
                        else{ESP_LOGW("main", "Value is none");}
                    }
                    else{ESP_LOGW("main", "Value is none");}
                }
                else{ESP_LOGW("main", "Topic is none");}
            }
            else {ESP_LOGW("main", "Received from unknown peer. Not accepting data from unknown peers.");}
          }
          else{ESP_LOGW("main", "Invalid packet");}
      - script.execute: handleOnRecieve

script:
  - id: espnow_communication
    then:
      - output.turn_on: built_in_led
      - script.execute: beReadyToReceiveMessage
      - logger.log: 'Updating sensor data'
      - component.update: spectral_sensor
      - component.update: battery
      - delay: 3s
      - logger.log: 'Sensor data updated'

      - repeat:
          count: 1
          then:
            - lambda: |-
                ESP_LOGI("main", "Sending data to hub");
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f1", id(f1).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f2", id(f2).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("fz", id(fz).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f3", id(f3).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f4", id(f4).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("fy", id(fy).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f5", id(f5).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("fxl", id(fxl).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f6", id(f6).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f7", id(f7).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f8", id(f8).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("nir", id(nir).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("clear", id(clear).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("irradiance", id(irradiance).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("irradiance_photopic", id(irradiance_photopic).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("ppfd", id(ppfd).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("saturation", id(saturation).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("color_temperature", id(color_temperature).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("par", id(par).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("lux", id(lux).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("lux2", id(lux2).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("battery", id(battery).state);
      - output.turn_off: built_in_led
  - id: beReadyToReceiveMessage
    then:
      - espnow.send:
          mac_address: !lambda 'return id(hub_address);'
          payload: 'hub;beReadyToReceiveMessage'
      - delay: 500ms
  - id: sendCalibrationData
    then:
      - script.execute: espnow_communication
      - script.wait: espnow_communication
      - repeat:
          count: 1
          then:
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("atime", id(spectral_sensor).get_atime());
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("astep", id(spectral_sensor).get_astep());
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("gain", id(spectral_sensor).get_gain());
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("gaf", id(spectral_sensor).get_glass_attenuation_factor());
            - delay: !lambda 'return id(esp_now_message_delay);'
      - lambda: |-
          ESP_LOGI("main", "Calibration data sent");
          id(get_calibration) = false;
  - id: handleOnRecieve
    then:
      - if:
          condition:
            lambda: 'return id(pinged);'
          then:
            - logger.log: 'Pinging back'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data("pong", "22", id(paring));
            - lambda: |-
                id(paring) = false;
                id(pinged) = false;
      - if:
          condition:
            lambda: 'return id(get_calibration);'
          then:
            - logger.log: 'Sending calibration data'
            - script.execute: sendCalibrationData
            - lambda: |-
                id(get_calibration) = false;
  - id: handleModeChange
    then:
      - lambda: |-
          ESP_LOGI("main", "ESP Sensor Mode: %d", id(esp_sensor_mode));
          ESP_LOGI("main", "Wake up reason: %d", esp_sleep_get_wakeup_cause());
          id(button_rgb_led).turn_off().set_transition_length(10).perform();
          switch(id(esp_sensor_mode)) {
            case 0:
              id(button_rgb_led).turn_on().set_brightness(1.0).set_transition_length(10).set_rgb(1, 0.79215686274, 0.22745098039).perform(); // Yellow
              ESP_LOGD("main", "Starting ESP-NOW");
              id(captive_portal_component).end();
              id(wifi_component).stop_ap();
              id(wifi_component).disable();
              id(espnow_component)->setup();
              break;
            case 1:
              id(button_rgb_led).turn_on().set_brightness(1.0).set_transition_length(10).set_rgb(0.09019607843 , 0.74509803921, 0.34117647058).perform(); // Green
              id(espnow_communication).execute(); 
              id(deep_sleep_1).allow_deep_sleep();
              break;
            case 2:
              id(button_rgb_led).turn_on().set_brightness(1.0).set_transition_length(10).set_rgb(0, 0.35, 1).perform(); // Blue 
              ESP_LOGD("main", "Starting webserver with captive portal");
              id(espnow_communication).stop();
              id(built_in_led).turn_off();
              id(deep_sleep_1).prevent_deep_sleep();
              id(wifi_component).enable();
              id(wifi_component).start_ap();
              id(captive_portal_component).start("/captive_portal");
              break;
            default:
              break;
          }
  - id: handleShowMode
    then:
      - lambda: |-
          ESP_LOGI("main", "ESP Sensor Mode: %d", id(esp_sensor_mode));
          ESP_LOGI("main", "Wake up reason: %d", esp_sleep_get_wakeup_cause());
          switch(id(esp_sensor_mode)) {
            case 0:
              id(button_rgb_led).turn_on().set_brightness(1.0).set_transition_length(10).set_rgb(1, 0.79215686274, 0.22745098039).perform(); // Yellow
              break;
            case 1:
              id(button_rgb_led).turn_on().set_brightness(1.0).set_transition_length(10).set_rgb(0.09019607843 , 0.74509803921, 0.34117647058).perform(); // Green
              break;
            case 2:
              id(button_rgb_led).turn_on().set_brightness(1.0).set_transition_length(10).set_rgb(0, 0.35, 1).perform(); // Blue
              break;
            default:
              break;
          }

button:
  - platform: template
    name: 'Update sensor data'
    on_press:
      - component.update: spectral_sensor
      - component.update: battery
    web_server:
      sorting_group_id: sg_data
      sorting_weight: 1

  - platform: template
    name: 'Update calibration data'
    on_press:
      - lambda: |-
          id(atime_number).publish_state(id(spectral_sensor).get_atime());
          id(astep_number).publish_state(id(spectral_sensor).get_astep());
          id(gain_number).publish_state(id(spectral_sensor).get_gain());
          id(glass_attenuation_number).publish_state(id(spectral_sensor).get_glass_attenuation_factor());
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 1

  - platform: template
    name: 'Set calibration data'
    on_press:
      then:
        - lambda: |-
            id(atime) = id(atime_number).state;
            id(astep) = id(astep_number).state;
            id(gain) = id(gain_number).state;
            id(glass_attenuation_factor) = id(glass_attenuation_number).state;

            id(spectral_sensor).setup_atime(id(atime));
            id(spectral_sensor).setup_astep(id(astep));
            id(spectral_sensor).setup_gain(static_cast<esphome::as7343::AS7343Gain>(id(gain)));
            id(spectral_sensor).setup_glass_attenuation_factor(id(glass_attenuation_factor));
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 6

  # - platform: factory_reset
  #   name: Restart with Factory Default Settings
