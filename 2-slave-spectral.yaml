esphome:
  name: spectral-sensor
  platformio_options:
    platform: https://github.com/lucaskatayama/platform-espressif32.git#feat/seeed_xiao_esp32c6.json
    build_flags: -DI2C_NUM_1=I2C_NUM_0
  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp
  friendly_name: Spectral Sensor

  on_boot:
    priority: -10000
    then:
      - lambda: |-
          ESP_LOGI("main", "Starting ESP-NOW");
          ESP_LOGI("main", "Hub address: 0x%12llx", id(hub_address));
          ESP_LOGI("main", "ESP Sensor Mode: %d", id(esp_sensor_mode));
          ESP_LOGI("main", "Wake up reason: %d", esp_sleep_get_wakeup_cause());
          ESP_LOGI("main", "Deep sleep duration: %f seconds", id(deep_sleep_duration_number).state);
      - script.execute: changeAS7343Settings
      - lambda: |-
          // Print update AS7343 settings
          id(spectral_sensor).dump_config();
      - delay: 500ms
      - lambda: |-
          id(espnow_component)->add_peer(id(hub_address));
      - delay: 500ms
      - deep_sleep.prevent: deep_sleep_1
      - if:
          condition:
            lambda: 'return esp_sleep_get_wakeup_cause()==7;'
          then:
            - lambda: |-
                ESP_LOGI("main", "Woke up from deep sleep");
                id(handleShowMode).execute();
      - script.execute: handleModeChange

esp32:
  board: seeed_xiao_esp32c6
  variant: ESP32C6
  framework:
    type: esp-idf
    version: 5.3.0
    platform_version: 6.9.0
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

packages:
  essentialCode: !include
    file: packages/EssentialCodeSlave.yaml
    vars:
      ssid_name: 'SpectralSensor'
      battery_group_id: 'sg_data'
      battery_sorting_weight: 23

web_server:
  local: true
  version: 3
  log: false
  js_include: 'components/web_server-captive_portal/hide-sections-toggle.js'
  id: web_server_component
  sorting_groups:
    - id: sg_data
      name: 'Spectral Sensor Data'
      sorting_weight: 10

    - id: sg_settings
      name: 'Spectral Sensor Settings'
      sorting_weight: 11

    - id: sg_device_settings
      name: 'Device Settings'
      sorting_weight: 12

logger:
  baud_rate: 115200
  level: DEBUG
  hardware_uart: USB_SERIAL_JTAG

external_components:
  - source: components
    components:
      - as7343
    refresh: 1min

i2c:
  sda: GPIO22
  scl: GPIO23
  scan: true
  frequency: 200kHz

sensor:
  - platform: as7343
    id: 'spectral_sensor'
    f1:
      name: '405nm'
      id: 'f1'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 2
    f2:
      name: '425nm'
      id: 'f2'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 3
    fz:
      name: '450nm'
      id: 'fz'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 4
    f3:
      name: '475nm'
      id: 'f3'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 5
    f4:
      name: '515nm'
      id: 'f4'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 6
    fy:
      name: '555nm'
      id: 'fy'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 7
    f5:
      name: '550nm'
      id: 'f5'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 8
    fxl:
      name: '600nm'
      id: 'fxl'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 9
    f6:
      name: '640nm'
      id: 'f6'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 10
    f7:
      name: '690nm'
      id: 'f7'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 11
    f8:
      name: '745nm'
      id: 'f8'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 12
    nir:
      name: 'NIR'
      id: 'nir'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 13
    clear:
      name: 'Clear'
      id: 'clear'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 14
    irradiance:
      name: 'Irradiance'
      id: 'irradiance'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 15
    irradiance_photopic:
      name: 'Irradiance Photopic'
      id: 'irradiance_photopic'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 16
    ppfd:
      name: 'PPFD (Photosynthetic Photon Flux Density)'
      id: 'ppfd'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 17
    saturation:
      name: 'Saturation'
      id: 'saturation'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 18
    color_temperature:
      name: 'Color Temperature'
      id: 'color_temperature'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 19
    par:
      name: 'PAR (Photosynthetic Active Radiation)'
      id: 'par'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 20
    lux:
      name: 'Illuminance'
      id: 'lux'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 21
    lux2:
      name: 'Illuminance 2'
      id: 'lux2'
      web_server:
        sorting_group_id: sg_data
        sorting_weight: 22
    update_interval: never

number:
  - platform: template
    name: 'ATime'
    icon: 'mdi:clock-outline'
    id: atime_number
    min_value: 0.0
    max_value: 255
    step: 1.0
    optimistic: true
    update_interval: never
    restore_value: true
    initial_value: 29.0
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 3
    set_action:
      then:
        - lambda: |-
            id(spectral_sensor).change_atime(x);

  - platform: template
    name: 'AStep'
    icon: 'mdi:stairs'
    id: astep_number
    min_value: 0.0
    max_value: 65534
    step: 1.0
    update_interval: never
    restore_value: true
    initial_value: 599.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 4
    set_action:
      then:
        - lambda: |-
            id(spectral_sensor).change_astep(x);

  - platform: template
    name: 'Gain'
    icon: 'mdi:alpha-x'
    id: gain_number
    min_value: 0.0
    max_value: 12.0
    step: 1.0
    update_interval: never
    restore_value: true
    initial_value: 3.0
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 5
    set_action:
      then:
        - lambda: |-
            id(spectral_sensor).change_gain(static_cast<esphome::as7343::AS7343Gain>(x));

    # Gain values:
    #   AS7343_GAIN_0_5X,   0
    #   AS7343_GAIN_1X,     1
    #   AS7343_GAIN_2X,     2
    #   AS7343_GAIN_4X,     3
    #   AS7343_GAIN_8X,     4
    #   AS7343_GAIN_16X,    5
    #   AS7343_GAIN_32X,    6
    #   AS7343_GAIN_64X,    7
    #   AS7343_GAIN_128X,   8
    #   AS7343_GAIN_256X,   9
    #   AS7343_GAIN_512X,   10
    #   AS7343_GAIN_1024X,  11
    #   AS7343_GAIN_2048X,  12

  - platform: template
    name: 'Glass Attenuation Factor'
    icon: 'mdi:glass-tulip'
    id: glass_attenuation_factor_number
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    optimistic: true
    update_interval: never
    restore_value: true
    initial_value: 1.0
    entity_category: config
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 6
    set_action:
      then:
        - lambda: |-
            id(spectral_sensor).change_glass_attenuation_factor(x);

espnow:
  id: espnow_component
  auto_add_peer: true
  conformation_timeout: 100ms
  wifi_channel: !secret espnow_channel
  predefined_peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          std::string received_string((char*)packet.get_payload(), packet.size);

          if(packet.is_valid()){
            // Convert the received data to a string
            std::string received_string((char*)packet.get_payload(), packet.size);
            ESP_LOGI("main", "Received data: %s", received_string.c_str());

            if(received_string == "ping") {
                if(id(long_press_action)) {
                    id(hub_address) = packet.peer;
                    ESP_LOGI("main", "Setting hub address: 0x%12llx", id(hub_address));
                    id(long_press_action) = false;
                    id(paring) = true;
                }
                id(pinged) = true;
            }
            if(packet.peer == id(hub_address)) {
                ESP_LOGI("main", "Received from hub");
                 // Parse the received data
                char buffer[241];

                strncpy(buffer, received_string.c_str(), sizeof(buffer));

                char* topic = strtok(buffer, ";");
                char* value = strtok(nullptr, ";");
                char* end = strtok(nullptr, ";");
                
                if(topic != nullptr){
                  if(strcmp(topic, "getcalibration") == 0){
                    id(get_calibration) = true;
                    id(request_cal) = true;
                  }
                  else if(value != nullptr){
                  ESP_LOGI("main", "Topic: %s, Value: %s", topic, value);

                  int value_int = atoi(value);


                  if(strcmp(topic, "atime") == 0){
                    id(atime_number).make_call().set_value(value_int).perform();
                  }
                  else if(strcmp(topic, "astep") == 0){
                    id(astep_number).make_call().set_value(value_int).perform();
                  }
                  else if(strcmp(topic, "gain") == 0){ 
                    id(gain_number).make_call().set_value(value_int).perform();
                  }
                  else if(strcmp(topic, "gaf") == 0){
                    id(glass_attenuation_factor_number).make_call().set_value(value_int).perform();
                  }
                  else{ESP_LOGW("main", "Value is none");}
                  }
                  else{ESP_LOGW("main", "Value is none");}
                }
                else{ESP_LOGW("main", "Topic is none");}
            }
            else {ESP_LOGW("main", "Received from unknown peer. Not accepting data from unknown peers.");}
          }
          else{ESP_LOGW("main", "Invalid packet");}
      - script.execute: handleOnRecieve

script:
  - id: espnow_communication
    then:
      - output.turn_on: built_in_led
      - script.execute: beReadyToReceiveMessage
      - logger.log: 'Updating sensor data'
      - script.execute: updateAS7343Data
      - component.update: battery
      - delay: 3s
      - logger.log: 'Sensor data updated'

      - repeat:
          count: 1
          then:
            - lambda: |-
                ESP_LOGI("main", "Sending data to hub");
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f1", id(f1).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f2", id(f2).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("fz", id(fz).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f3", id(f3).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f4", id(f4).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("fy", id(fy).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f5", id(f5).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("fxl", id(fxl).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f6", id(f6).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f7", id(f7).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("f8", id(f8).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("nir", id(nir).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("clear", id(clear).state*100000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("irradiance", id(irradiance).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("irradiance_photopic", id(irradiance_photopic).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("ppfd", id(ppfd).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("saturation", id(saturation).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("color_temperature", id(color_temperature).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("par", id(par).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("lux", id(lux).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("lux2", id(lux2).state*1000000);
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("battery", id(battery).state);
      - output.turn_off: built_in_led
  - id: sendCalibrationData
    then:
      - script.execute: espnow_communication
      - script.wait: espnow_communication
      - repeat:
          count: 1
          then:
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("atime", id(spectral_sensor).get_atime());
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("astep", id(spectral_sensor).get_astep());
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("gain", id(spectral_sensor).get_gain());
            - delay: !lambda 'return id(esp_now_message_delay);'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data_new("gaf", id(spectral_sensor).get_glass_attenuation_factor());
            - delay: !lambda 'return id(esp_now_message_delay);'
      - lambda: |-
          ESP_LOGI("main", "Calibration data sent");
          id(get_calibration) = false;
  - id: handleOnRecieve
    then:
      - if:
          condition:
            lambda: 'return id(pinged);'
          then:
            - logger.log: 'Pinging back'
            - espnow.send:
                mac_address: !lambda 'return id(hub_address);'
                payload: !lambda |-
                  return format_espnow_data("pong", "22", id(paring));
            - lambda: |-
                id(paring) = false;
                id(pinged) = false;
      - if:
          condition:
            lambda: 'return id(get_calibration);'
          then:
            - logger.log: 'Sending calibration data'
            - script.execute: sendCalibrationData
            - lambda: |-
                id(get_calibration) = false;
  - id: changeAS7343Settings
    then:
      - lambda: |-
          id(atime_number).make_call().set_value(id(atime_number).state).perform();
          id(astep_number).make_call().set_value(id(astep_number).state).perform();
          id(gain_number).make_call().set_value(id(gain_number).state).perform();
          id(glass_attenuation_factor_number).make_call().set_value(id(glass_attenuation_factor_number).state).perform();
  - id: updateAS7343Data
    then:
      - lambda: |-
          if(id(agc_switch).state) {
            ESP_LOGI("main", "Updating sensor data with post process");
            id(spectral_sensor).update_with_post_process();
            // Check if gained is changed
            if(id(spectral_sensor).get_gain() != id(gain_number).state) {
              id(gain_number).make_call().set_value(id(spectral_sensor).get_gain()).perform();
            }
          } else {
            ESP_LOGI("main", "Updating sensor data");
            id(spectral_sensor).update();
          }

button:
  - platform: template
    name: 'Update sensor data'
    icon: 'mdi:update'
    on_press:
      - script.execute: updateAS7343Data
      - component.update: battery
    web_server:
      sorting_group_id: sg_data
      sorting_weight: 1

switch:
  - platform: template
    name: 'Automatic Gain Control'
    id: agc_switch
    icon: 'mdi:refresh-auto'
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_group_id: sg_settings
      sorting_weight: 1
    optimistic: true
