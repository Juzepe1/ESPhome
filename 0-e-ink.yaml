esphome:
  name: esp32-vision-master

  on_boot:
    priority: -1000
    then:
      # - script.execute:
      #     id: eink_soil_sensor_page
      #     temperature_value: 24.5
      #     temperature_value_last: 0
      #     humidity_value: 45.5
      #     humidity_value_last: 0
      #     conductivity_value: 19999
      #     ph_value: 13.5
      #     ph_value_last: 0
      #     nitrogen_value: 2999
      #     phosphorus_value: 1258
      #     potassium_value: 1458
      #     salinity_value: 9999
      #     tds_value: 5000

      - script.execute:
          id: eink_spectral_sensor_page
          f1_value: 10
          f2_value: 5
          fz_value: 100
          f3_value: 1
          f4_value: 16
          fy_value: 21.38634
          f5_value: 45.56
          fxl_value: 39.04
          f6_value: 55.4
          f7_value: 32
          f8_value: 13
          nir_value: 5.5
          irradiance_value: 84523.987
          par_value: 9834.83
          ppfd_value: 0.828046
          lux_value: 14.451061
          cct_value: 3119.495605

  includes:
    - components/XBitMaps/sprites.h
    - components/vision_master_fonts/FreeMonoBold12pt7b.h
    - components/vision_master_fonts/FreeMonoBold9pt7b.h
    - components/vision_master_fonts/FreeMono9pt7b.h
    - components/vision_master_fonts/FreeMono7pt7b.h
    - components/vision_master_fonts/FreeSans7pt7b.h
    - components/vision_master_fonts/Picopixel.h
    - components/vision_master_fonts/kongtext5pt7b.h

spi:

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

external_components:
  - source: components
    components:
      - vision_master
    refresh: 1min

vision_master:
  id: my_display

# Enable logging
logger:
  baud_rate: 115200
  level: VERBOSE

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO21
      inverted: true
    name: 'Internal Button'
    on_press:
      then:
        - script.execute:
            id: eink_air_sensor_page
            eCO2_value: 4258
            TVOC_value: 45
            pressure_value: 1025.8
            temperature_value: -9.333
            humidity_value: 45.5
            eCO2_value_last: 0
            TVOC_value_last: 0
            pressure_value_last: 0
            temperature_value_last: 0
            humidity_value_last: 0

        - delay: 5s
        - script.execute:
            id: eink_soil_sensor_page
            temperature_value: -24.5
            temperature_value_last: 0
            humidity_value: 45.5
            humidity_value_last: 90
            conductivity_value: 19999
            ph_value: 11.5
            ph_value_last: 13.3
            nitrogen_value: 2999
            phosphorus_value: 1258
            potassium_value: 1458
            salinity_value: 9999
            tds_value: 5000

script:
  - id: eink_air_sensor_page
    parameters:
      eCO2_value: int
      TVOC_value: int
      pressure_value: float
      temperature_value: float
      humidity_value: float
      eCO2_value_last: int
      TVOC_value_last: int
      pressure_value_last: float
      temperature_value_last: float
      humidity_value_last: float
    then:
      - lambda: |-
          int padding = 5;
          int small_padding = 3;
          int top_bottom_padding = 1;
          int tvoc_padding_right = 20;

          id(my_display).landscape();
          id(my_display).clearMemory();
          id(my_display).setTextWrap(false);

          //id(my_display).setTextColor(BLACK);
          //id(my_display).setBackgroundColor(WHITE);
          const uint16_t width  = id(my_display).width();
          const uint16_t height = id(my_display).height();

          id(my_display).setFont(&FreeMonoBold12pt7b);

          String title = "Air Sensor 2";
          uint8_t title_height = id(my_display).getTextHeight(title);

          int title_y = title_height + top_bottom_padding;

          id(my_display).setCursor(padding, title_y);
          id(my_display).print("Air Sensor 2");

          int line_y = title_y + small_padding;

          id(my_display).drawLine(0, line_y, width, line_y, BLACK);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          char eCO2_char[9];
          sprintf(eCO2_char, "%4d", eCO2_value);
          String eCO2_string = String(eCO2_char);

          char TVOC_char[9];
          sprintf(TVOC_char, "%4d", TVOC_value);
          String TVOC_string = String(TVOC_char);

          char pressure_char[10];
          sprintf(pressure_char, "%5.1f", pressure_value);
          String pressure_string = String(pressure_char);


          uint8_t eco2_string_height = id(my_display).getTextHeight(eCO2_string);
          uint8_t tvoc_string_height = id(my_display).getTextHeight(TVOC_string);
          uint8_t pressure_string_height = id(my_display).getTextHeight(pressure_string);

          uint8_t max_string_height = max(eco2_string_height, max(tvoc_string_height, pressure_string_height));

          uint8_t eco2_string_width = id(my_display).getTextWidth(eCO2_string);
          uint8_t tvoc_string_width = id(my_display).getTextWidth(TVOC_string);
          uint8_t pressure_string_width = id(my_display).getTextWidth(pressure_string);

          id(my_display).setFont(&FreeMono9pt7b);

          String eCO2_label = "eCO2";
          String TVOC_label = "TVOC";
          String pressure_label = "Press.";

          uint8_t eco2_label_height = id(my_display).getTextHeight(eCO2_label);
          uint8_t tvoc_label_height = id(my_display).getTextHeight(TVOC_label);
          uint8_t pressure_label_height = id(my_display).getTextHeight(pressure_label);

          uint8_t eco2_label_width = id(my_display).getTextWidth(eCO2_label);
          uint8_t tvoc_label_width = id(my_display).getTextWidth(TVOC_label);
          uint8_t pressure_label_width = id(my_display).getTextWidth(pressure_label);

          uint8_t max_label_height = max(eco2_label_height, max(tvoc_label_height, pressure_label_height));

          id(my_display).setFont(&FreeMono7pt7b);

          String eCO2_unit = "ppm";
          String TVOC_unit = "ppb";
          String pressure_unit = "hPa";

          uint8_t eco2_unit_height = id(my_display).getTextHeight(eCO2_unit);
          uint8_t tvoc_unit_height = id(my_display).getTextHeight(TVOC_unit);
          uint8_t pressure_unit_height = id(my_display).getTextHeight(pressure_unit);

          uint8_t max_unit_height = max(eco2_unit_height, max(tvoc_unit_height, pressure_unit_height));

          uint8_t eco2_unit_width = id(my_display).getTextWidth(eCO2_unit);
          uint8_t tvoc_unit_width = id(my_display).getTextWidth(TVOC_unit);
          uint8_t pressure_unit_width = id(my_display).getTextWidth(pressure_unit);

          int pressure_x = width - pressure_string_width - padding - down_arrow_width;
          int eCO2_x = 0;
          int TVOC_x = ((pressure_x + (eCO2_x + eco2_string_width)) / 2) - ((tvoc_string_width) / 2);



          int small_letter_diff_down = 2; // ppb p is under the line and b is above the line
          int small_letter_diff_top = 3; // ppm m is under the line and p is above the line


          int unit_y = height - top_bottom_padding - small_letter_diff_down;
          int string_y = unit_y - max_unit_height - padding + small_letter_diff_top;
          int label_y = string_y - max_string_height - padding;

          id(my_display).setFont(&FreeMono7pt7b);

          id(my_display).setCursor(eCO2_x + (eco2_string_width - eco2_unit_width) / 2, unit_y);
          id(my_display).print(eCO2_unit);

          id(my_display).setCursor(TVOC_x + (tvoc_string_width - tvoc_unit_width) / 2, unit_y);
          id(my_display).print(TVOC_unit);

          id(my_display).setCursor(pressure_x + (pressure_string_width - pressure_unit_width) / 2, unit_y);
          id(my_display).print(pressure_unit);

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(eCO2_x + (eco2_string_width - eco2_label_width) / 2 , label_y);
          id(my_display).print(eCO2_label);

          id(my_display).setCursor(TVOC_x + (tvoc_string_width - tvoc_label_width) / 2, label_y);
          id(my_display).print(TVOC_label);

          id(my_display).setCursor(pressure_x + (pressure_string_width - pressure_label_width) / 2, label_y);
          id(my_display).print(pressure_label);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(eCO2_x, string_y);
          id(my_display).print(eCO2_string);

          id(my_display).setCursor(TVOC_x, string_y);
          id(my_display).print(TVOC_string);

          id(my_display).setCursor(pressure_x, string_y);
          id(my_display).print(pressure_string);

          if(eCO2_value > eCO2_value_last){
            id(my_display).drawXBitmap(eCO2_x+eco2_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(eCO2_value < eCO2_value_last){
            id(my_display).drawXBitmap(eCO2_x+eco2_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          if(TVOC_value > TVOC_value_last){
            id(my_display).drawXBitmap(TVOC_x+tvoc_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(TVOC_value < TVOC_value_last){
            id(my_display).drawXBitmap(TVOC_x+tvoc_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          if(pressure_value > pressure_value_last){
            id(my_display).drawXBitmap(pressure_x+pressure_string_width+padding, string_y-max_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(pressure_value < pressure_value_last){
            id(my_display).drawXBitmap(pressure_x+pressure_string_width+padding,string_y-down_arrow_height,down_arrow_bits,down_arrow_width,down_arrow_height,BLACK);
          }

          // id(my_display).drawLine(0,unit_y , width, unit_y , BLACK);
          // id(my_display).drawLine(0,label_y + padding , width, label_y + padding, BLACK);
          // id(my_display).drawLine(0,label_y , width, label_y , BLACK);
          // id(my_display).drawLine(0,string_y + padding , width , string_y + padding , BLACK);
          // id(my_display).drawLine(0,string_y , width, string_y , BLACK);
          // id(my_display).drawLine(0,label_y - max_label_height, width, label_y - max_label_height, BLACK);

          // // Draw vertical line from top to bottom in the middle of the screen
          // id(my_display).drawLine(width / 2, 0, width / 2, height, BLACK);

          int thermometer_top_left_y = line_y + padding + 1;
          int thermometer_top_left_x = padding;

          // First draw a thermometer in the background, top centre
          id(my_display).drawXBitmap(thermometer_top_left_x, thermometer_top_left_y, thermometer_bits, thermometer_width, thermometer_height, BLACK);

          bool negative_temperature = false;

          float temperature_value_new = temperature_value;
          if(temperature_value < 0){
            negative_temperature = true;
            temperature_value_new = abs(temperature_value);
          }
            
          char temperature_char[4];
          sprintf(temperature_char, "%2.1f", temperature_value_new); 
          String temperature_string = String(temperature_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t temperature_string_height = id(my_display).getTextHeight(temperature_string);
          uint8_t temperature_string_width = id(my_display).getTextWidth(temperature_string);


          int temperature_x = thermometer_top_left_x + thermometer_width + padding;
          int temperature_y = thermometer_top_left_y + thermometer_height * 0.48;

          int minus_sign_x = temperature_x - 15;
          int minus_sign_y = temperature_y;

          if(negative_temperature){
            id(my_display).setCursor(minus_sign_x, minus_sign_y);
            id(my_display).print("-");
          }

          id(my_display).setCursor(temperature_x, temperature_y);
          id(my_display).print(temperature_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String temperature_unit = " C";
          uint8_t temperature_unit_height = id(my_display).getTextHeight(temperature_unit);
          uint8_t temperature_unit_width = id(my_display).getTextWidth(temperature_unit);

          int temperature_unit_x = temperature_x + temperature_string_width / 2;
          int temperature_unit_y = temperature_y + temperature_unit_height + padding;

          id(my_display).setCursor(temperature_unit_x, temperature_unit_y);
          id(my_display).print(temperature_unit);

          //Draw degree symbol
          id(my_display).drawCircle(temperature_unit_x + 1, temperature_unit_y - 7, 2, BLACK);

          // water_drop
          int water_drop_top_left_x = width / 2 + padding;
          int water_drop_top_left_y = thermometer_top_left_y;

          id(my_display).drawXBitmap(water_drop_top_left_x, water_drop_top_left_y, water_drop_bits, water_drop_width, water_drop_height, BLACK);

          char humidity_char[4];
          sprintf(humidity_char, "%2.1f", humidity_value);
          String humidity_string = String(humidity_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t humidity_string_height = id(my_display).getTextHeight(humidity_string);
          uint8_t humidity_string_width = id(my_display).getTextWidth(humidity_string);

          int humidity_x = water_drop_top_left_x + water_drop_width + padding;
          int humidity_y = temperature_y;

          id(my_display).setCursor(humidity_x, humidity_y);
          id(my_display).print(humidity_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String humidity_unit = "%";
          uint8_t humidity_unit_height = id(my_display).getTextHeight(humidity_unit);
          uint8_t humidity_unit_width = id(my_display).getTextWidth(humidity_unit);

          int humidity_unit_x = humidity_x + humidity_string_width / 2;
          int humidity_unit_y = temperature_unit_y;

          id(my_display).setCursor(humidity_unit_x, humidity_unit_y);
          id(my_display).print(humidity_unit);

          if(temperature_value > temperature_value_last){
            id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - temperature_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(temperature_value < temperature_value_last){
            id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(humidity_value > humidity_value_last){
            id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - humidity_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(humidity_value < humidity_value_last){
            id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          id(my_display).update();
  - id: eink_soil_sensor_page
    parameters:
      temperature_value: float
      temperature_value_last: float
      humidity_value: float
      humidity_value_last: float
      conductivity_value: int
      ph_value: float
      ph_value_last: float
      nitrogen_value: int
      phosphorus_value: int
      potassium_value: int
      salinity_value: int
      tds_value: int
    then:
      - lambda: |-
          int padding = 5;
          int small_padding = 3;
          int top_bottom_left_right_padding = 1;

          id(my_display).landscape();
          id(my_display).clearMemory();
          id(my_display).setTextWrap(false);

          //id(my_display).setTextColor(BLACK);
          //id(my_display).setBackgroundColor(WHITE);
          const uint16_t width  = id(my_display).width();
          const uint16_t height = id(my_display).height();

          id(my_display).setFont(&FreeMonoBold12pt7b);

          String title = "Soil Sensor 1";
          uint8_t title_height = id(my_display).getTextHeight(title);

          int title_y = title_height + top_bottom_left_right_padding;

          id(my_display).setCursor(padding, title_y);
          id(my_display).print("Soil Sensor 1");

          int line_y = title_y + small_padding;

          id(my_display).drawLine(0, line_y, width, line_y, BLACK);

          // Right side of the screen

          char nitrogen_char[5];
          sprintf(nitrogen_char, "%5d", nitrogen_value);
          String nitrogen_string = String(nitrogen_char);

          char phosphorus_char[5];
          sprintf(phosphorus_char, "%5d", phosphorus_value);
          String phosphorus_string = String(phosphorus_char);

          char potassium_char[5];
          sprintf(potassium_char, "%5d", potassium_value);
          String potassium_string = String(potassium_char);

          char conductivity_char[5];
          sprintf(conductivity_char, "%5d", conductivity_value);
          String conductivity_string = String(conductivity_char);

          char tds_char[5];
          sprintf(tds_char, "%5d", tds_value);
          String tds_string = String(tds_char);

          char salinity_char[5];
          sprintf(salinity_char, "%5d", salinity_value);
          String salinity_string = String(salinity_char);

          id(my_display).setFont(&FreeMonoBold9pt7b);


          uint8_t nitrogen_string_height = id(my_display).getTextHeight(nitrogen_string);
          uint8_t phosphorus_string_height = id(my_display).getTextHeight(phosphorus_string);
          uint8_t potassium_string_height = id(my_display).getTextHeight(potassium_string);
          uint8_t conductivity_string_height = id(my_display).getTextHeight(conductivity_string);
          uint8_t tds_string_height = id(my_display).getTextHeight(tds_string);
          uint8_t salinity_string_height = id(my_display).getTextHeight(salinity_string);

          uint8_t max_string_height = max(nitrogen_string_height, max(phosphorus_string_height, max(potassium_string_height, max(conductivity_string_height, max(tds_string_height, salinity_string_height)))));


          uint8_t nitrogen_string_width = id(my_display).getTextWidth(nitrogen_string);
          uint8_t phosphorus_string_width = id(my_display).getTextWidth(phosphorus_string);
          uint8_t potassium_string_width = id(my_display).getTextWidth(potassium_string);
          uint8_t conductivity_string_width = id(my_display).getTextWidth(conductivity_string);
          uint8_t tds_string_width = id(my_display).getTextWidth(tds_string);
          uint8_t salinity_string_width = id(my_display).getTextWidth(salinity_string);

          uint8_t max_string_width = max(nitrogen_string_width, max(phosphorus_string_width, max(potassium_string_width, max(conductivity_string_width, max(tds_string_width, salinity_string_width)))));

          id(my_display).setFont(&FreeMono9pt7b);

          String nitrogen_label = "N";
          String phosphorus_label = "P";
          String potassium_label = "K";
          String conductivity_label = "EC";
          String tds_label = "TDS";
          String salinity_label = "Sal";

          uint8_t nitrogen_label_height = id(my_display).getTextHeight(nitrogen_label);
          uint8_t phosphorus_label_height = id(my_display).getTextHeight(phosphorus_label);
          uint8_t potassium_label_height = id(my_display).getTextHeight(potassium_label);
          uint8_t conductivity_label_height = id(my_display).getTextHeight(conductivity_label);
          uint8_t tds_label_height = id(my_display).getTextHeight(tds_label);
          uint8_t salinity_label_height = id(my_display).getTextHeight(salinity_label);

          uint8_t nitrogen_label_width = id(my_display).getTextWidth(nitrogen_label);
          uint8_t phosphorus_label_width = id(my_display).getTextWidth(phosphorus_label);
          uint8_t potassium_label_width = id(my_display).getTextWidth(potassium_label);
          uint8_t conductivity_label_width = id(my_display).getTextWidth(conductivity_label);
          uint8_t tds_label_width = id(my_display).getTextWidth(tds_label);
          uint8_t salinity_label_width = id(my_display).getTextWidth(salinity_label);

          uint8_t max_label_height = max(nitrogen_label_height, max(phosphorus_label_height, max(potassium_label_height, max(conductivity_label_height, max(tds_label_height, salinity_label_height)))));
          uint8_t max_label_width = max(nitrogen_label_width, max(phosphorus_label_width, max(potassium_label_width, max(conductivity_label_width, max(tds_label_width, salinity_label_width)))));

          id(my_display).setFont(&Picopixel);

          String chemical_element_unit = "mg/kg";
          String tds_and_salinity_unit = "mg/L";
          String conductivity_unit = "uS/cm";

          uint8_t chemical_element_unit_height = id(my_display).getTextHeight(chemical_element_unit);
          uint8_t chemical_element_unit_width = id(my_display).getTextWidth(chemical_element_unit);

          uint8_t tds_and_salinity_unit_height = id(my_display).getTextHeight(tds_and_salinity_unit);
          uint8_t tds_and_salinity_unit_width = id(my_display).getTextWidth(tds_and_salinity_unit);

          uint8_t conductivity_unit_height = id(my_display).getTextHeight(conductivity_unit);
          uint8_t conductivity_unit_width = id(my_display).getTextWidth(conductivity_unit);

          uint8_t max_unit_height = max(chemical_element_unit_height, max(tds_and_salinity_unit_height, conductivity_unit_height));
          uint8_t max_unit_width = max(chemical_element_unit_width, max(tds_and_salinity_unit_width, conductivity_unit_width));

          // int label_x = 0; //top_bottom_left_right_padding;
          // int string_x = label_x + max_label_width + padding;
          // int unit_x = string_x + max_string_width + padding;

          int unit_x = width - max_unit_width; //- top_bottom_left_right_padding;
          int string_x = unit_x - max_string_width - padding;
          int label_x = string_x - max_label_width - padding;

          int salinity_y = height - top_bottom_left_right_padding;
          int tds_y = salinity_y - max_string_height - padding;
          int conductivity_y = tds_y - max_string_height - padding;
          int potassium_y = conductivity_y - max_string_height - padding;
          int phosphorus_y = potassium_y - max_string_height - padding;
          int nitrogen_y = phosphorus_y - max_string_height - padding;

          id(my_display).setFont(&Picopixel);

          id(my_display).setCursor(unit_x, potassium_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, phosphorus_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, nitrogen_y - max_string_height/2 + chemical_element_unit_height/2);
          id(my_display).print(chemical_element_unit);

          id(my_display).setCursor(unit_x, conductivity_y - max_string_height/2 + conductivity_unit_height/2);
          id(my_display).print(conductivity_unit);

          id(my_display).setCursor(unit_x, tds_y - max_string_height/2 + tds_and_salinity_unit_height/2);
          id(my_display).print(tds_and_salinity_unit);

          id(my_display).setCursor(unit_x, salinity_y - max_string_height/2 + tds_and_salinity_unit_height/2);
          id(my_display).print(tds_and_salinity_unit);

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(label_x+(max_label_width/2 - potassium_label_width/2), potassium_y);
          id(my_display).print(potassium_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - phosphorus_label_width/2), phosphorus_y);
          id(my_display).print(phosphorus_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - nitrogen_label_width/2), nitrogen_y);
          id(my_display).print(nitrogen_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - conductivity_label_width/2), conductivity_y);
          id(my_display).print(conductivity_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - tds_label_width/2), tds_y);
          id(my_display).print(tds_label);

          id(my_display).setCursor(label_x+(max_label_width/2 - salinity_label_width/2), salinity_y);
          id(my_display).print(salinity_label);

          id(my_display).setFont(&FreeMonoBold9pt7b);

          id(my_display).setCursor(string_x, potassium_y);
          id(my_display).print(potassium_string);

          id(my_display).setCursor(string_x, phosphorus_y);
          id(my_display).print(phosphorus_string);

          id(my_display).setCursor(string_x, nitrogen_y);
          id(my_display).print(nitrogen_string);

          id(my_display).setCursor(string_x, conductivity_y);
          id(my_display).print(conductivity_string);

          id(my_display).setCursor(string_x, tds_y);
          id(my_display).print(tds_string);

          id(my_display).setCursor(string_x, salinity_y);
          id(my_display).print(salinity_string);


          int right_side_x = label_x;
          // Right side of the screen
          char ph_char[4];
          sprintf(ph_char, "%2.1f", ph_value);
          String ph_string = String(ph_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t ph_string_height = id(my_display).getTextHeight(ph_string);
          uint8_t ph_string_width = id(my_display).getTextWidth(ph_string);

          String ph_label = "pH";

          id(my_display).setFont(&FreeMono9pt7b);

          uint8_t ph_label_height = id(my_display).getTextHeight(ph_label);
          uint8_t ph_label_width = id(my_display).getTextWidth(ph_label);

          int ph_width = ph_string_width + 3 * padding + ph_label_width;

          int ph_string_x = right_side_x/2 - ph_width/2;
          int ph_label_x = ph_string_x + ph_string_width + 3*padding;

          int ph_y = height - top_bottom_left_right_padding - ph_string_height/2;

          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(ph_label_x, ph_y - ph_string_height/2 + ph_label_height/2);
          id(my_display).print(ph_label);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(ph_string_x, ph_y);
          id(my_display).print(ph_string);

          // Right-Top part of the screen
          int thermometer_small_top_left_y = line_y + padding + 3;
          int thermometer_small_top_left_x = padding;

          // First draw a small thermometer in the background, top centre
          id(my_display).drawXBitmap(thermometer_small_top_left_x, thermometer_small_top_left_y, thermometer_small_bits, thermometer_small_width, thermometer_small_height, BLACK);

          bool negative_temperature = false;

          float temperature_value_new = temperature_value;
          if(temperature_value < 0){
          negative_temperature = true;
          temperature_value_new = abs(temperature_value);
          }

          char temperature_char[4];
          sprintf(temperature_char, "%2.1f", temperature_value_new); 
          String temperature_string = String(temperature_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t temperature_string_height = id(my_display).getTextHeight(temperature_string);
          uint8_t temperature_string_width = id(my_display).getTextWidth(temperature_string);

          int temperature_x = thermometer_small_top_left_x + thermometer_small_width + padding;
          int temperature_y = thermometer_small_top_left_y + thermometer_small_height/2 + temperature_string_height/2;

          int minus_sign_x = temperature_x - 12;
          int minus_sign_y = temperature_y-2;

          if(negative_temperature){
          id(my_display).setFont(&FreeMonoBold9pt7b);
          id(my_display).setCursor(minus_sign_x, minus_sign_y);
          id(my_display).print("-");
          }

          id(my_display).setFont(&FreeMonoBold12pt7b);

          id(my_display).setCursor(temperature_x, temperature_y);
          id(my_display).print(temperature_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String temperature_unit = " C";
          uint8_t temperature_unit_height = id(my_display).getTextHeight(temperature_unit);
          uint8_t temperature_unit_width = id(my_display).getTextWidth(temperature_unit);

          int temperature_unit_x = temperature_x + temperature_string_width + 3*padding;
          int temperature_unit_y = temperature_y - temperature_string_height/2 + temperature_unit_height/2;

          id(my_display).setCursor(temperature_unit_x, temperature_unit_y);
          id(my_display).print(temperature_unit);

          //Draw degree symbol
          id(my_display).drawCircle(temperature_unit_x + 1, temperature_unit_y - 7, 2, BLACK);

          // water_drop_small
          int water_drop_small_top_left_x = thermometer_small_top_left_x;
          int water_drop_small_top_left_y = thermometer_small_top_left_y + thermometer_small_height + padding;

          id(my_display).drawXBitmap(water_drop_small_top_left_x, water_drop_small_top_left_y, water_drop_small_bits, water_drop_small_width, water_drop_small_height, BLACK);

          char humidity_char[4];
          sprintf(humidity_char, "%2.1f", humidity_value);
          String humidity_string = String(humidity_char);

          id(my_display).setFont(&FreeMonoBold12pt7b);

          uint8_t humidity_string_height = id(my_display).getTextHeight(humidity_string);
          uint8_t humidity_string_width = id(my_display).getTextWidth(humidity_string);

          int humidity_x = temperature_x;
          int humidity_y = water_drop_small_top_left_y + water_drop_small_height/2 + humidity_string_height/2;

          id(my_display).setCursor(humidity_x, humidity_y);
          id(my_display).print(humidity_string);

          id(my_display).setFont(&FreeSans7pt7b);

          String humidity_unit = "%";
          uint8_t humidity_unit_height = id(my_display).getTextHeight(humidity_unit);
          uint8_t humidity_unit_width = id(my_display).getTextWidth(humidity_unit);

          int humidity_unit_x = humidity_x + humidity_string_width + 3*padding;
          int humidity_unit_y = humidity_y - humidity_string_height/2 + humidity_unit_height/2;

          id(my_display).setCursor(humidity_unit_x, humidity_unit_y);
          id(my_display).print(humidity_unit);

          //Draw line between the two parts
          //id(my_display).drawLine(right_side_x-padding, line_y,  right_side_x-padding, height, BLACK);


          if(temperature_value > temperature_value_last){
          id(my_display).drawXBitmap(temperature_x + temperature_string_width+ + padding, temperature_y - temperature_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(temperature_value < temperature_value_last){
          id(my_display).drawXBitmap(temperature_x + temperature_string_width + padding, temperature_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(humidity_value > humidity_value_last){
          id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - humidity_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(humidity_value < humidity_value_last){
          id(my_display).drawXBitmap(humidity_x + humidity_string_width + padding, humidity_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          if(ph_value > ph_value_last){
          id(my_display).drawXBitmap(ph_string_x + ph_string_width + padding, ph_y - ph_string_height, up_arrow_bits, up_arrow_width, up_arrow_height, BLACK);
          } else if(ph_value < ph_value_last){
          id(my_display).drawXBitmap(ph_string_x + ph_string_width + padding, ph_y - down_arrow_height, down_arrow_bits, down_arrow_width, down_arrow_height, BLACK);
          }

          id(my_display).update();
  - id: eink_spectral_sensor_page
    parameters:
      f1_value: float
      f2_value: float
      fz_value: float
      f3_value: float
      f4_value: float
      fy_value: float
      f5_value: float
      fxl_value: float
      f6_value: float
      f7_value: float
      f8_value: float
      nir_value: float
      irradiance_value: float
      par_value: float
      ppfd_value: float
      lux_value: float
      cct_value: float

    then:
      - lambda: |-
          int big_padding = 7;
          int padding = 5;
          int small_padding = 3;
          int top_bottom_left_right_padding = 1;

          id(my_display).landscape();
          id(my_display).clearMemory();
          id(my_display).setTextWrap(false);

          //id(my_display).setTextColor(BLACK);
          //id(my_display).setBackgroundColor(WHITE);
          const uint16_t width  = id(my_display).width();
          const uint16_t height = id(my_display).height();

          id(my_display).setFont(&FreeMonoBold9pt7b);

          String title = "Spectral Sensor 1";
          uint8_t title_height = id(my_display).getTextHeight(title);

          int title_y = title_height + top_bottom_left_right_padding;

          id(my_display).setCursor(padding, title_y);
          id(my_display).print(title);

          int line_y = title_y + small_padding;

          id(my_display).drawLine(0, line_y, width, line_y, BLACK);

          // Left side of the screen
          auto format_value = [](float value) -> String {
            if (value >= 10000) {
              char buf[10];
              sprintf(buf, "%5.0f", value);
              return String(buf);
            } else if (value >= 1000) {
              char buf[10];
              sprintf(buf, "%4.1f", value);
              return String(buf);
            } else if (value >= 100) {
              char buf[10];
              sprintf(buf, "%3.2f", value);
              return String(buf);
            } else if (value >= 10) {
              char buf[10];
              sprintf(buf, "%2.3f", value);
              return String(buf);
            } else {
              char buf[10];
              sprintf(buf, "%1.4f", value);
              return String(buf);
            }
          };

          String irradiance_string = format_value(irradiance_value);

          String par_string = format_value(par_value);

          String ppfd_string = format_value(ppfd_value);

          String lux_string = format_value(lux_value);

          char cct_char[10];
          sprintf(cct_char, "%5.0f", cct_value); // CCT typically displayed as an integer
          String cct_string = String(cct_char);

          id(my_display).setFont(&FreeMonoBold9pt7b);

          uint8_t irradiance_string_height = id(my_display).getTextHeight(irradiance_string);
          uint8_t par_string_height = id(my_display).getTextHeight(par_string);
          uint8_t ppfd_string_height = id(my_display).getTextHeight(ppfd_string);
          uint8_t lux_string_height = id(my_display).getTextHeight(lux_string);
          uint8_t cct_string_height = id(my_display).getTextHeight(cct_string);

          uint8_t max_string_height = max(irradiance_string_height, max(par_string_height, max(ppfd_string_height, max(lux_string_height, cct_string_height))));

          uint8_t irradiance_string_width = id(my_display).getTextWidth(irradiance_string);
          uint8_t par_string_width = id(my_display).getTextWidth(par_string);
          uint8_t ppfd_string_width = id(my_display).getTextWidth(ppfd_string);
          uint8_t lux_string_width = id(my_display).getTextWidth(lux_string);
          uint8_t cct_string_width = id(my_display).getTextWidth(cct_string);

          uint8_t max_string_width = max(irradiance_string_width, max(par_string_width, max(ppfd_string_width, max(lux_string_width, cct_string_width))));

          id(my_display).setFont(&FreeMono9pt7b);

          String irradiance_label = "Irr";
          String par_label = "PAR";
          String ppfd_label = "PPFD";
          String lux_label = "Lux";
          String cct_label = "CCT";

          uint8_t irradiance_label_width = id(my_display).getTextWidth(irradiance_label);
          uint8_t par_label_width = id(my_display).getTextWidth(par_label);
          uint8_t ppfd_label_width = id(my_display).getTextWidth(ppfd_label);
          uint8_t lux_label_width = id(my_display).getTextWidth(lux_label);
          uint8_t cct_label_width = id(my_display).getTextWidth(cct_label);

          uint8_t max_label_width = max(irradiance_label_width, max(par_label_width, max(ppfd_label_width, max(lux_label_width, cct_label_width))));

          id(my_display).setFont(&Picopixel);

          String irradiance_unit = "W/m2";
          String par_unit = "W/m2";
          String ppfd_unit = "μmol/\nsm2";
          String lux_unit = "lx";
          String cct_unit = "K";

          uint8_t irradiance_unit_width = id(my_display).getTextWidth(irradiance_unit);
          uint8_t par_unit_width = id(my_display).getTextWidth(par_unit);
          uint8_t ppfd_unit_width = id(my_display).getTextWidth(ppfd_unit);
          uint8_t lux_unit_width = id(my_display).getTextWidth(lux_unit);
          uint8_t cct_unit_width = id(my_display).getTextWidth(cct_unit);

          uint8_t max_unit_width = max(irradiance_unit_width, max(par_unit_width, max(ppfd_unit_width, max(lux_unit_width, cct_unit_width))));

          int label_x = 0; //top_bottom_left_right_padding;
          int string_x = label_x + max_label_width + big_padding;
          int unit_x = string_x + max_string_width + big_padding;

          int space_left = height - line_y;

            int ppfd_y = line_y + space_left / 2 + max_string_height / 2;
            int par_y = ppfd_y - max_string_height - big_padding;
            int irradiance_y = par_y - max_string_height - big_padding;
            int lux_y = ppfd_y + max_string_height + big_padding;
            int cct_y = lux_y + max_string_height + big_padding;

          // Printing units
          id(my_display).setCursor(unit_x, irradiance_y - irradiance_string_height / 2 + id(my_display).getTextHeight(irradiance_unit) / 2);
          id(my_display).print(irradiance_unit);

          id(my_display).setCursor(unit_x, par_y - par_string_height / 2 + id(my_display).getTextHeight(par_unit) / 2);
          id(my_display).print(par_unit);

          id(my_display).setCursor(unit_x, ppfd_y - ppfd_string_height + id(my_display).getTextHeight(ppfd_unit)/2 - 1 );
          id(my_display).print(ppfd_unit);

          id(my_display).setCursor(unit_x, lux_y - lux_string_height / 2 + id(my_display).getTextHeight(lux_unit) / 2);
          id(my_display).print(lux_unit);

          id(my_display).setCursor(unit_x, cct_y - cct_string_height / 2 + id(my_display).getTextHeight(cct_unit) / 2);
          id(my_display).print(cct_unit);

          // Printing labels
          id(my_display).setFont(&FreeMono9pt7b);

          id(my_display).setCursor(label_x, irradiance_y);
          id(my_display).print(irradiance_label);

          id(my_display).setCursor(label_x, par_y);
          id(my_display).print(par_label);

          id(my_display).setCursor(label_x, ppfd_y);
          id(my_display).print(ppfd_label);

          id(my_display).setCursor(label_x, lux_y);
          id(my_display).print(lux_label);

          id(my_display).setCursor(label_x, cct_y);
          id(my_display).print(cct_label);

          // Printing strings
          id(my_display).setFont(&FreeMonoBold9pt7b);

          id(my_display).setCursor(string_x + max_string_width/2 - irradiance_string_width/2, irradiance_y);
          id(my_display).print(irradiance_string);

          id(my_display).setCursor(string_x + max_string_width/2 - par_string_width/2, par_y);
          id(my_display).print(par_string);

          id(my_display).setCursor(string_x + max_string_width/2 - ppfd_string_width/2, ppfd_y);
          id(my_display).print(ppfd_string);

          id(my_display).setCursor(string_x + max_string_width/2 - lux_string_width/2, lux_y);
          id(my_display).print(lux_string);

          id(my_display).setCursor(string_x + max_string_width/2 - cct_string_width/2, cct_y);
          id(my_display).print(cct_string);

          // Bar chart on the right side of the screen

          id(my_display).setFont(&kongtext5pt7b);
          String number_label = "405";
          int number_label_width = id(my_display).getTextWidth(number_label);
          int number_label_height = id(my_display).getTextHeight(number_label);

          int text_x = unit_x + max_unit_width + big_padding;
          int text_y = line_y + padding + number_label_height;

          int max_bar_width = width - text_x - number_label_width - padding;

          int bar_x = text_x + number_label_width + padding;

          int bar_height = number_label_height;

          auto draw_bar = [&](float value, const char* label) {
              int bar_y = text_y - number_label_height / 2 - bar_height / 2;
              if (value < 0) {
                  value = 0;
              } else if (value > 100) {
                  value = 100;
              }

              // Calculate the width of the filled bar
              int bar_width = (value / 100.0) * max_bar_width;

              // Draw the bar outline
              id(my_display).drawRect(bar_x, bar_y, max_bar_width, bar_height, BLACK);

              // Draw the chessboard pattern
              int square_size = 1;  // Size of each "square" in the chessboard
              for (int x = 0; x < bar_width; x += square_size) {
                  for (int y = 0; y < bar_height; y += square_size) {
                      // Alternate between black and white based on position
                      if (((x / square_size) + (y / square_size)) % 2 == 0) {
                          id(my_display).fillRect(bar_x + x, bar_y + y, square_size, square_size, BLACK);
                      }
                  }
              }

              // Print the label next to the bar
              id(my_display).setFont(&kongtext5pt7b);
              id(my_display).setCursor(text_x, text_y);
              id(my_display).print(label);

              // Print percentage value in the middle of the bar
              id(my_display).setFont(&Picopixel);
              char value_char[10];
              sprintf(value_char, "%3.0f", value);
              String value_string = String(value_char);

              int value_string_width = id(my_display).getTextWidth(value_string);
              int value_string_height = id(my_display).getTextHeight(value_string);

              int value_x = bar_x + max_bar_width / 2 - value_string_width / 2;
              int value_y = bar_y + bar_height / 2 + value_string_height / 2;

              // Draw white rectangle over the chessboard pattern to make the text more readable
              id(my_display).fillRect(value_x - 1, value_y - value_string_height + 1, value_string_width + 2, value_string_height, WHITE);
              
              id(my_display).setCursor(value_x, value_y);
              id(my_display).print(value_string);
              
              // Move to the next row
              text_y += number_label_height + 1;
            };

            draw_bar(f1_value, "405");
            draw_bar(f2_value, "425");
            draw_bar(fz_value, "450");
            draw_bar(f3_value, "475");
            draw_bar(f4_value, "515");
            draw_bar(fy_value, "555");
            draw_bar(f5_value, "550");
            draw_bar(fxl_value, "600");
            draw_bar(f6_value, "640");
            draw_bar(f7_value, "690");
            draw_bar(f8_value, "745");
            draw_bar(nir_value, "855");

          id(my_display).update();
