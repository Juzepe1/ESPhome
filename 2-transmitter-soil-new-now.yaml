esphome:
  name: esp32-modbus
  platform: ESP32
  board: esp32-c3-devkitm-1

logger:

# wifi:
#   ssid: !secret WiFi_ssid
#   password: !secret WiFi_password

external_components:
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: "nvds-new-espnow"
    components: [ espnow ]

# api:
#   password: !secret API_password

# ota:
#   - platform: esphome
#     password: !secret OTA_password

uart:
  - id: intmodbus
    tx_pin: 21
    rx_pin: 20
    baud_rate: 4800
    stop_bits: 1
    data_bits: 8
    parity: NONE
    debug:
      direction: BOTH

modbus:
  flow_control_pin: GPIO1
  id: modbus1

modbus_controller:
  - id: modbus_device
    address: 0x1
    modbus_id: modbus1
    setup_priority: -10
    update_interval: never  # Do not poll sensor automatically

sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Humidity'
    register_type: holding
    address: 0x00
    unit_of_measurement: '%RH'
    value_type: U_WORD
    id: 'humidity'
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Temperature"
    register_type: holding
    address: 0x01  # Register for temperature
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Apply scaling as per the manual
    id: 'temperature'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Conductivity"
    register_type: holding
    address: 0x02  # Register for conductivity
    unit_of_measurement: "µS/cm"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'conductivity'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "pH"
    register_type: holding
    address: 0x03  # Register for pH
    unit_of_measurement: "pH"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Scaling factor for pH
    id: 'ph'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Nitrogen (N)"
    register_type: holding
    address: 0x04  # Register for Nitrogen
    unit_of_measurement: "mg/kg"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'nitrogen'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Phosphorus (P)"
    register_type: holding
    address: 0x05  # Register for Phosphorus
    unit_of_measurement: "mg/kg"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'phosphorus'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Potassium (K)"
    register_type: holding
    address: 0x06  # Register for Potassium
    unit_of_measurement: "mg/kg"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'potassium'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Conductivity Factor"
    register_type: holding
    address: 0x22  # Register for conductivity factor
    unit_of_measurement: "x"
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Salinity Factor"
    register_type: holding
    address: 0x23  # Register for salinity factor
    unit_of_measurement: "x"
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "TDS Factor"
    register_type: holding
    address: 0x24  # Register for TDS factor
    unit_of_measurement: "x"
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Temperature Offset"
    register_type: holding
    address: 0x50  # Register for temperature offset
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Scaling factor for offset

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Humidity Offset"
    register_type: holding
    address: 0x51  # Register for humidity offset
    unit_of_measurement: "%RH"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Scaling factor for offset

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Conductivity Offset"
    register_type: holding
    address: 0x52  # Register for conductivity offset
    unit_of_measurement: "µS/cm"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "pH Offset"
    register_type: holding
    address: 0x53  # Register for pH offset
    unit_of_measurement: "pH"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Scaling factor for pH offset

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Nitrogen Factor High"
    register_type: holding
    address: 0x4E8  # Nitrogen factor high byte
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Nitrogen Factor Low"
    register_type: holding
    address: 0x4E9  # Nitrogen factor low byte
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Nitrogen Offset"
    register_type: holding
    address: 0x4EA  # Nitrogen offset
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Phosphorus Factor High"
    register_type: holding
    address: 0x4F2  # Phosphorus factor high byte
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Phosphorus Factor Low"
    register_type: holding
    address: 0x4F3  # Phosphorus factor low byte
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Phosphorus Offset"
    register_type: holding
    address: 0x4F4  # Phosphorus offset
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Potassium Factor High"
    register_type: holding
    address: 0x4FC  # Potassium factor high byte
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Potassium Factor Low"
    register_type: holding
    address: 0x4FD  # Potassium factor low byte
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Potassium Offset"
    register_type: holding
    address: 0x4FE  # Potassium offset
    value_type: U_WORD
    accuracy_decimals: 0


espnow:
  auto_add_peer: true
  wifi_channel: "11"
  peers:
    - FF:FF:FF:FF:FF:FF

interval:
  - interval: 10s
    then:
      - component.update: modbus_device
      - delay: 1s
      - espnow.send:
          data: !lambda |-
            char buffer[30];
            snprintf(buffer, sizeof(buffer), "humidity;%.1f", id(humidity).state);
            return std::vector<unsigned char>(buffer, buffer + strlen(buffer));
      - delay: 1s
      - espnow.send:
          data: !lambda |-
            char buffer[30];
            snprintf(buffer, sizeof(buffer), "temperature;%.1f", id(temperature).state);
            return std::vector<unsigned char>(buffer, buffer + strlen(buffer));
      - delay: 1s
      - espnow.send:
          data: !lambda |-
            char buffer[30];
            snprintf(buffer, sizeof(buffer), "conductivity;%.0f", id(conductivity).state);
            return std::vector<unsigned char>(buffer, buffer + strlen(buffer));
      - delay: 1s
      - espnow.send:
          data: !lambda |-
            char buffer[30];
            snprintf(buffer, sizeof(buffer), "ph;%.1f", id(ph).state);
            return std::vector<unsigned char>(buffer, buffer + strlen(buffer));
      - delay: 1s
      - espnow.send:
          data: !lambda |-
            char buffer[30];
            snprintf(buffer, sizeof(buffer), "nitrogen;%.0f", id(nitrogen).state);
            return std::vector<unsigned char>(buffer, buffer + strlen(buffer));
      - delay: 1s
      - espnow.send:
          data: !lambda |-
            char buffer[30];
            snprintf(buffer, sizeof(buffer), "phosphorus;%.0f", id(phosphorus).state);
            return std::vector<unsigned char>(buffer, buffer + strlen(buffer));
      - delay: 1s
      - espnow.send:
          data: !lambda |-
            char buffer[30];
            snprintf(buffer, sizeof(buffer), "potassium;%.0f", id(potassium).state);
            return std::vector<unsigned char>(buffer, buffer + strlen(buffer));
      - delay: 1s