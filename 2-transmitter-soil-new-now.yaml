esphome:
  name: esp32-modbus
  platform: ESP32
  board: esp32-c3-devkitm-1

  includes:
    - components/espnow_send_custom_data/espnow_send_custom_data.h
    - components/espnow_send_custom_data/espnow_send_custom_data.cpp
    - components/write_to_modbus_device/write_to_modbus_device.h
    - components/write_to_modbus_device/write_to_modbus_device.cpp


logger:

# wifi:
#   ssid: !secret WiFi_ssid
#   password: !secret WiFi_password

# api:
#   password: !secret API_password

# ota:
#   - platform: esphome
#     password: !secret OTA_password

external_components:
  - source:
      type: git
      url: https://github.com/nielsnl68/esphome
      ref: "nvds-new-espnow"
    components: [ espnow ]

uart:
  - id: intmodbus
    tx_pin: 21
    rx_pin: 20
    baud_rate: 4800
    stop_bits: 1
    data_bits: 8
    parity: NONE
    debug:
      direction: BOTH

modbus:
  flow_control_pin: GPIO1
  id: modbus1

modbus_controller:
  - id: modbus_device
    address: 0x1
    modbus_id: modbus1
    setup_priority: -10
    update_interval: never  # Do not poll sensor automatically


globals:
  - id: device_id
    type: std::string
    initial_value: '"01"'
  - id: get_calibration
    type: bool
    initial_value: 'false'
  - id: calibrating
    type: bool
    initial_value: 'false'

sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: 'Humidity'
    register_type: holding
    address: 0x00
    unit_of_measurement: '%RH'
    value_type: U_WORD
    id: 'humidity'
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Temperature"
    register_type: holding
    address: 0x01  # Register for temperature
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Apply scaling as per the manual
    id: 'temperature'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Conductivity"
    register_type: holding
    address: 0x02  # Register for conductivity
    unit_of_measurement: "µS/cm"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'conductivity'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "pH"
    register_type: holding
    address: 0x03  # Register for pH
    unit_of_measurement: "pH"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Scaling factor for pH
    id: 'ph'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Nitrogen (N)"
    register_type: holding
    address: 0x04  # Register for Nitrogen
    unit_of_measurement: "mg/kg"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'nitrogen'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Phosphorus (P)"
    register_type: holding
    address: 0x05  # Register for Phosphorus
    unit_of_measurement: "mg/kg"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'phosphorus'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Potassium (K)"
    register_type: holding
    address: 0x06  # Register for Potassium
    unit_of_measurement: "mg/kg"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'potassium'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Salinity"
    register_type: holding
    address: 0x07  # Register for salinity
    unit_of_measurement: "mg/L"
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'salinity'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "TDS"
    register_type: holding
    address: 0x08  # Register for TDS
    unit_of_measurement: "mg/L"
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'tds'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Conductivity Factor"
    register_type: holding
    address: 0x22  # Register for conductivity factor
    unit_of_measurement: "x"
    value_type: U_WORD
    id: 'cond_f'
  
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Salinity Factor"
    register_type: holding
    address: 0x23  # Register for salinity factor
    unit_of_measurement: "x"
    value_type: U_WORD
    id: 'sal_f'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "TDS Factor"
    register_type: holding
    address: 0x24  # Register for TDS factor
    unit_of_measurement: "x"
    value_type: U_WORD
    id: 'tds_f'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Temperature Offset"
    register_type: holding
    address: 0x50  # Register for temperature offset
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Scaling factor for offset
    id: 'temp_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Humidity Offset"
    register_type: holding
    address: 0x51  # Register for humidity offset
    unit_of_measurement: "%RH"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Scaling factor for offset
    id: 'hum_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Conductivity Offset"
    register_type: holding
    address: 0x52  # Register for conductivity offset
    unit_of_measurement: "µS/cm"
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1.0  # No scaling needed
    id: 'cond_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "pH Offset"
    register_type: holding
    address: 0x53  # Register for pH offset
    unit_of_measurement: "pH"
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1  # Scaling factor for pH offset
    id: 'ph_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Nitrogen Factor High"
    register_type: holding
    address: 0x4E8  # Nitrogen factor high byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'n_f_high'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Nitrogen Factor Low"
    register_type: holding
    address: 0x4E9  # Nitrogen factor low byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'n_f_low'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Nitrogen Offset"
    register_type: holding
    address: 0x4EA  # Nitrogen offset
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'n_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Phosphorus Factor High"
    register_type: holding
    address: 0x4F2  # Phosphorus factor high byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'p_f_high'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Phosphorus Factor Low"
    register_type: holding
    address: 0x4F3  # Phosphorus factor low byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'p_f_low'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Phosphorus Offset"
    register_type: holding
    address: 0x4F4  # Phosphorus offset
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'p_offset'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Potassium Factor High"
    register_type: holding
    address: 0x4FC  # Potassium factor high byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'k_f_high'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Potassium Factor Low"
    register_type: holding
    address: 0x4FD  # Potassium factor low byte
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'k_f_low'

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Potassium Offset"
    register_type: holding
    address: 0x4FE  # Potassium offset
    value_type: U_WORD
    accuracy_decimals: 0
    id: 'k_offset'

espnow:
  auto_add_peer: true
  wifi_channel: "11"
  peers:
    - FF:FF:FF:FF:FF:FF
  on_receive:
    then:
      - lambda: |-
          ESP_LOGI("main", "Received data from ESP-NOW");

          // Convert the received data to a string
          std::string received_string((char*)packet.get_payload(), packet.size);

          ESP_LOGI("main", "Received data: %s", received_string.c_str());
          
          // Array to hold parts of the received string
          char buffer[50];
          strncpy(buffer, received_string.c_str(), sizeof(buffer));

          // Parse the string using strtok
          char* cal_device_id = strtok(buffer, ";");
          char* cal_sensor_name = strtok(nullptr, ";");
          char* cal_value_string = strtok(nullptr, ";");
          
          if(cal_device_id != nullptr && strcmp(cal_device_id, id(device_id).c_str()) == 0){
            if (cal_sensor_name != nullptr){
              if (strcmp(cal_sensor_name, "getcalibration") == 0) {
                id(get_calibration) = true;
              }
              else if(cal_value_string != nullptr){
                float value = atof(cal_value_string);
                ESP_LOGI("main", "Received sensor data: %s = %f", cal_sensor_name, value);
                if (strcmp(cal_sensor_name, "cond_f") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x22, value);
                } else if (strcmp(cal_sensor_name, "sal_f") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x23, value);
                } else if (strcmp(cal_sensor_name, "tds_f") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x24, value);
                } else if (strcmp(cal_sensor_name, "temp_offset") == 0) {
                  if (value < 0) {value = 65536 + value;}
                  write_to_modbus_device(id(modbus_device), 0x50, value);
                } else if (strcmp(cal_sensor_name, "hum_offset") == 0) {
                  if (value < 0) {value = 65536 + value;}
                  write_to_modbus_device(id(modbus_device), 0x51, value);
                } else if (strcmp(cal_sensor_name, "cond_offset") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x52, value);
                } else if (strcmp(cal_sensor_name, "ph_offset") == 0) {
                  if (value < 0) {value = 65536 + value;}
                  write_to_modbus_device(id(modbus_device), 0x53, value);
                } else if (strcmp(cal_sensor_name, "n_f_high") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4E8, value);
                } else if (strcmp(cal_sensor_name, "n_f_low") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4E9, value);
                } else if (strcmp(cal_sensor_name, "n_offset") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4EA, value);
                } else if (strcmp(cal_sensor_name, "p_f_high") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4F2, value);
                } else if (strcmp(cal_sensor_name, "p_f_low") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4F3, value);
                } else if (strcmp(cal_sensor_name, "p_offset") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4F4, value);
                } else if (strcmp(cal_sensor_name, "k_f_high") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4FC, value);
                } else if (strcmp(cal_sensor_name, "k_f_low") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4FD, value);
                } else if (strcmp(cal_sensor_name, "k_offset") == 0) {
                  write_to_modbus_device(id(modbus_device), 0x4FE, value);
                }


                // Add more sensor handling here if needed
              }
            }
          }
          else {
            ESP_LOGI("main", "Received data not for this device");
          }
      - if:
          condition:
            lambda: 'return id(get_calibration);'
          then:
            - component.update: modbus_device
            - delay: 5s
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "cond_f", id(cond_f).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "sal_f", id(sal_f).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "tds_f", id(tds_f).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "temp_offset", id(temp_offset).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "hum_offset", id(hum_offset).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "cond_offset", id(cond_offset).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "ph_offset", id(ph_offset).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "n_f_high", id(n_f_high).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "n_f_low", id(n_f_low).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "n_offset", id(n_offset).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "p_f_high", id(p_f_high).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "p_f_low", id(p_f_low).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "p_offset", id(p_offset).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "k_f_high", id(k_f_high).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "k_f_low", id(k_f_low).state);
            - delay: 500ms
            - espnow.send:
                data: !lambda |-
                  return format_espnow_data(id(device_id).c_str(), "k_offset", id(k_offset).state);
            - lambda: |- 
                ESP_LOGI("main", "Calibration data sent");
                id(get_calibration) = false;
        
interval:
  - interval: 60s
    then:
      - component.update: modbus_device
      - delay: 5s
      - wait_until:
          condition:
            lambda: 'return !id(get_calibration);'
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "humidity", id(humidity).state);
      - delay: 500ms
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "temperature", id(temperature).state);
      - delay: 500ms
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "conductivity", id(conductivity).state);
      - delay: 500ms
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "ph", id(ph).state);
      - delay: 500ms
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "nitrogen", id(nitrogen).state);
      - delay: 500ms
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "phosphorus", id(phosphorus).state);
      - delay: 500ms
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "potassium", id(potassium).state);
      - delay: 500ms
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "salinity", id(salinity).state);
      - delay: 500ms
      - espnow.send:
          data: !lambda |-
            return format_espnow_data(id(device_id).c_str(), "tds", id(tds).state);